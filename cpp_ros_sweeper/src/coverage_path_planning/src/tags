!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLOCKED	coveragepathplanning.cpp	/^static const unsigned char BLOCKED = 0;$/;"	v	file:
CLOSED	coveragepathplanning.cpp	/^static const int CLOSED = -1;$/;"	v	file:
Candidate	coveragepathplanning.cpp	/^struct Candidate$/;"	s	file:
CoveragePathPlanning	coveragepathplanning.cpp	/^int cpp::CoveragePathPlanning($/;"	f	class:cpp
CoveragePlanService	coverage_path_planning_node.cpp	/^bool CoveragePlanService($/;"	f	namespace:coverage_path_planning
FindHighestNeighbour	coveragepathplanning.cpp	/^static int FindHighestNeighbour($/;"	f	file:
IsValid	coveragepathplanning.cpp	/^static int IsValid(const Mat &_dt, Point _tar, int _radius) {$/;"	f	file:
IsValid	coveragepathplanning.cpp	/^static int IsValid(const Mat &_dt, int row, int col, int _radius) {$/;"	f	file:
MapToWorld	coverage_path_planning_node.cpp	/^void MapToWorld($/;"	f	namespace:coverage_path_planning
Planning	coveragepathplanning.cpp	/^static int Planning($/;"	f	file:
UpdatePath	coveragepathplanning.cpp	/^int UpdatePath(cv::Mat &_binary, const cv::Point &_tar, $/;"	f
Visit	coveragepathplanning.cpp	/^static int Visit($/;"	f	file:
WaveFront	coveragepathplanning.cpp	/^static int WaveFront($/;"	f	file:
WorldToMap	coverage_path_planning_node.cpp	/^bool WorldToMap($/;"	f	namespace:coverage_path_planning
ZigZagPathPlanning	coveragepathplanning.cpp	/^int cpp::ZigZagPathPlanning(const cv::Mat &_binary, $/;"	f	class:cpp
coverage_path_planning	coverage_path_planning_node.cpp	/^namespace coverage_path_planning {$/;"	n	file:
coveragepathplanning_hpp	coveragepathplanning.hpp	10;"	d
cpp	coveragepathplanning.hpp	/^namespace cpp {$/;"	n
createMarker	coverage_path_planning_client.cpp	/^visualization_msgs::Marker createMarker(const std::string markerName,uint32_t type, geometry_msgs::Pose pose, geometry_msgs::Vector3 scale, std_msgs::ColorRGBA color,  int32_t id, std::string frame_id = std::string("s_map"))$/;"	f
g_neighbours	coveragepathplanning.cpp	/^static const Point g_neighbours[8] = {Point(1, 0),  Point(1, 1),  Point(0, 1),$/;"	v	file:
m_checkDown	coveragepathplanning.cpp	/^    bool m_checkDown;$/;"	m	struct:Candidate	file:
m_checkUp	coveragepathplanning.cpp	/^    bool m_checkUp;$/;"	m	struct:Candidate	file:
m_pos	coveragepathplanning.cpp	/^    Point m_pos;$/;"	m	struct:Candidate	file:
main	coverage_path_planning_client.cpp	/^int main(int argc, char **argv) {$/;"	f
main	coverage_path_planning_node.cpp	/^int main(int argc, char **argv) {$/;"	f
