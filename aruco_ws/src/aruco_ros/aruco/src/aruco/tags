!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BoardConfiguration	board.cpp	/^BoardConfiguration::BoardConfiguration ( const BoardConfiguration  &T ): vector<MarkerInfo>(T)$/;"	f	class:aruco::BoardConfiguration
BoardConfiguration	board.cpp	/^BoardConfiguration::BoardConfiguration()$/;"	f	class:aruco::BoardConfiguration
BoardDetector	boarddetector.cpp	/^  BoardDetector::BoardDetector(bool setYPerpendicular)$/;"	f	class:aruco::BoardDetector
CameraParameters	cameraparameters.cpp	/^CameraParameters::CameraParameters() {$/;"	f	class:aruco::CameraParameters
CameraParameters	cameraparameters.cpp	/^CameraParameters::CameraParameters(const CameraParameters &CI) {$/;"	f	class:aruco::CameraParameters
CameraParameters	cameraparameters.cpp	/^CameraParameters::CameraParameters(cv::Mat cameraMatrix,cv::Mat distorsionCoeff,cv::Size size) throw(cv::Exception) {$/;"	f	class:aruco::CameraParameters
HammDist	aruco_selectoptimalmarkers.cpp	/^int HammDist(const cv::Mat &m1,const cv::Mat & m2)$/;"	f
HammDist_	aruco_selectoptimalmarkers.cpp	/^int HammDist_(const cv::Mat &m1,const cv::Mat & m2)$/;"	f
Marker	marker.cpp	/^  Marker::Marker()$/;"	f	class:aruco::Marker
Marker	marker.cpp	/^  Marker::Marker(const  std::vector<cv::Point2f> &corners,int _id):std::vector<cv::Point2f>(corners)$/;"	f	class:aruco::Marker
Marker	marker.cpp	/^  Marker::Marker(const Marker &M):std::vector<cv::Point2f>(M)$/;"	f	class:aruco::Marker
MarkerDetector	markerdetector.cpp	/^  MarkerDetector::MarkerDetector()$/;"	f	class:aruco::MarkerDetector
OgreGetPoseParameters	board.cpp	/^void Board::OgreGetPoseParameters ( double position[3], double orientation[4] ) throw ( cv::Exception )$/;"	f	class:aruco::Board
OgreGetPoseParameters	marker.cpp	/^  void Marker::OgreGetPoseParameters(double position[3], double orientation[4]) throw(cv::Exception)$/;"	f	class:aruco::Marker
OgreGetProjectionMatrix	cameraparameters.cpp	/^void CameraParameters::OgreGetProjectionMatrix(cv::Size orgImgSize, cv::Size size, double proj_matrix[16], double gnear, double gfar, bool invert) throw(cv::Exception)$/;"	f	class:aruco::CameraParameters
_USE_MATH_DEFINES	boarddetector.cpp	30;"	d	file:
_USE_MATH_DEFINES	marker.cpp	29;"	d	file:
analyzeMarkerImage	arucofidmarkers.cpp	/^  int FiducidalMarkers::analyzeMarkerImage(Mat &grey,int &nRotations)$/;"	f	class:aruco::FiducidalMarkers
arParamDecompMat	cameraparameters.cpp	/^int CameraParameters::arParamDecompMat( double source[3][4], double cpara[3][4], double trans[3][4] )throw(cv::Exception)$/;"	f	class:aruco::CameraParameters
argConvGLcpara2	cameraparameters.cpp	/^void CameraParameters::argConvGLcpara2( double cparam[3][4], int width, int height, double gnear, double gfar, double m[16], bool invert )throw(cv::Exception)$/;"	f	class:aruco::CameraParameters
aruco	arucofidmarkers.cpp	/^namespace aruco {$/;"	n	file:
aruco	board.cpp	/^namespace aruco$/;"	n	file:
aruco	boarddetector.cpp	/^namespace aruco$/;"	n	file:
aruco	cameraparameters.cpp	/^namespace aruco$/;"	n	file:
aruco	cvdrawingutils.cpp	/^namespace aruco {$/;"	n	file:
aruco	marker.cpp	/^namespace aruco {$/;"	n	file:
aruco	markerdetector.cpp	/^namespace aruco$/;"	n	file:
calculateExtrinsics	marker.cpp	/^  void Marker::calculateExtrinsics(float markerSize,const CameraParameters &CP,bool setYPerpendicular)throw(cv::Exception)$/;"	f	class:aruco::Marker
calculateExtrinsics	marker.cpp	/^  void Marker::calculateExtrinsics(float markerSizeMeters, cv::Mat  camMatrix, cv::Mat distCoeff , bool setYPerpendicular)throw(cv::Exception)$/;"	f	class:aruco::Marker
createBoardImage	arucofidmarkers.cpp	/^  cv::Mat  FiducidalMarkers::createBoardImage( Size gridSize,int MarkerSize,int MarkerDistance,  BoardConfiguration& TInfo  ,vector<int> *excludedIds) throw (cv::Exception)$/;"	f	class:aruco::FiducidalMarkers
createBoardImage_ChessBoard	arucofidmarkers.cpp	/^  cv::Mat  FiducidalMarkers::createBoardImage_ChessBoard( Size gridSize,int MarkerSize,  BoardConfiguration& TInfo ,bool centerData ,vector<int> *excludedIds) throw (cv::Exception)$/;"	f	class:aruco::FiducidalMarkers
createBoardImage_Frame	arucofidmarkers.cpp	/^  cv::Mat  FiducidalMarkers::createBoardImage_Frame( Size gridSize,int MarkerSize,int MarkerDistance, BoardConfiguration& TInfo ,bool centerData,vector<int> *excludedIds ) throw (cv::Exception)$/;"	f	class:aruco::FiducidalMarkers
createMarkerImage	arucofidmarkers.cpp	/^  Mat FiducidalMarkers::createMarkerImage(int id,int size) throw (cv::Exception)$/;"	f	class:aruco::FiducidalMarkers
detect	arucofidmarkers.cpp	/^  int FiducidalMarkers::detect(const Mat &in,int &nRotations)$/;"	f	class:aruco::FiducidalMarkers
detect	boarddetector.cpp	/^  float  BoardDetector::detect(const cv::Mat &im)throw (cv::Exception)$/;"	f	class:aruco::BoardDetector
detect	boarddetector.cpp	/^  float BoardDetector::detect ( const vector<Marker> &detectedMarkers,const  BoardConfiguration &BConf, Board &Bdetected, Mat camMatrix,Mat distCoeff,float markerSizeMeters ) throw ( cv::Exception )$/;"	f	class:aruco::BoardDetector
detect	boarddetector.cpp	/^  float BoardDetector::detect ( const vector<Marker> &detectedMarkers,const  BoardConfiguration &BConf, Board &Bdetected,const CameraParameters &cp, float markerSizeMeters ) throw ( cv::Exception )$/;"	f	class:aruco::BoardDetector
detect	markerdetector.cpp	/^  void MarkerDetector::detect ( const  cv::Mat &input,std::vector<Marker> &detectedMarkers, CameraParameters camParams ,float markerSizeMeters ,bool setYPerpendicular) throw ( cv::Exception )$/;"	f	class:aruco::MarkerDetector
detect	markerdetector.cpp	/^  void MarkerDetector::detect ( const  cv::Mat &input,vector<Marker> &detectedMarkers,Mat camMatrix ,Mat distCoeff ,float markerSizeMeters ,bool setYPerpendicular) throw ( cv::Exception )$/;"	f	class:aruco::MarkerDetector
detectRectangles	markerdetector.cpp	/^  void  MarkerDetector::detectRectangles ( const cv::Mat &thres,vector<std::vector<cv::Point2f> > &MarkerCanditates )$/;"	f	class:aruco::MarkerDetector
detectRectangles	markerdetector.cpp	/^  void MarkerDetector::detectRectangles(const cv::Mat &thresImg,vector<MarkerCandidate> & OutMarkerCanditates)$/;"	f	class:aruco::MarkerDetector
dot	cameraparameters.cpp	/^double CameraParameters::dot( double a1, double a2, double a3,$/;"	f	class:aruco::CameraParameters
draw	marker.cpp	/^  void Marker::draw(Mat &in, Scalar color, int lineWidth ,bool writeId)const$/;"	f	class:aruco::Marker
draw	markerdetector.cpp	/^  void MarkerDetector::draw ( Mat out,const vector<Marker> &markers )$/;"	f	class:aruco::MarkerDetector
draw3dAxis	cvdrawingutils.cpp	/^    void CvDrawingUtils::draw3dAxis(cv::Mat &Image,Board &B,const CameraParameters &CP)$/;"	f	class:aruco::CvDrawingUtils
draw3dAxis	cvdrawingutils.cpp	/^    void CvDrawingUtils::draw3dAxis(cv::Mat &Image,Marker &m,const CameraParameters &CP)$/;"	f	class:aruco::CvDrawingUtils
draw3dCube	cvdrawingutils.cpp	/^    void CvDrawingUtils::draw3dCube(cv::Mat &Image,Board &B,const CameraParameters &CP)$/;"	f	class:aruco::CvDrawingUtils
draw3dCube	cvdrawingutils.cpp	/^    void CvDrawingUtils::draw3dCube(cv::Mat &Image,Marker &m,const CameraParameters &CP)$/;"	f	class:aruco::CvDrawingUtils
drawAllContours	markerdetector.cpp	/^  void MarkerDetector::drawAllContours ( Mat input, std::vector<std::vector<cv::Point> > &contours )$/;"	f	class:aruco::MarkerDetector
drawApproxCurve	markerdetector.cpp	/^  void  MarkerDetector:: drawApproxCurve ( Mat &in,vector<Point>  &contour,Scalar color )$/;"	f	class:aruco::MarkerDetector
drawContour	markerdetector.cpp	/^  void MarkerDetector:: drawContour ( Mat &in,vector<Point>  &contour,Scalar color )$/;"	f	class:aruco::MarkerDetector
entropy	aruco_selectoptimalmarkers.cpp	/^int entropy(const cv::Mat &marker)$/;"	f
findBestCornerInRegion_harris	markerdetector.cpp	/^  void MarkerDetector::findBestCornerInRegion_harris ( const cv::Mat  & grey,vector<cv::Point2f> &  Corners,int blockSize )$/;"	f	class:aruco::MarkerDetector
findCornerPointsInContour	markerdetector.cpp	/^  void findCornerPointsInContour(const vector<cv::Point2f>& points,const vector<cv::Point> &contour,vector<int> &idxs)$/;"	f	namespace:aruco
findDeformedSidesIdx	markerdetector.cpp	/^  int findDeformedSidesIdx(const vector<cv::Point> &contour,const vector<int> &idxSegments)$/;"	f	namespace:aruco
getArea	marker.cpp	/^  float Marker::getArea()const$/;"	f	class:aruco::Marker
getCameraLocation	cameraparameters.cpp	/^cv::Point3f CameraParameters::getCameraLocation(cv::Mat Rvec,cv::Mat Tvec)$/;"	f	class:aruco::CameraParameters
getCenter	marker.cpp	/^  cv::Point2f Marker::getCenter()const$/;"	f	class:aruco::Marker
getCrossPoint	markerdetector.cpp	/^  Point2f MarkerDetector::getCrossPoint(const cv::Point3f& line1, const cv::Point3f& line2)$/;"	f	class:aruco::MarkerDetector
getIdList	board.cpp	/^void BoardConfiguration::getIdList(std::vector< int >& ids, bool append) const$/;"	f	class:aruco::BoardConfiguration
getIndexOfMarkerId	board.cpp	/^int BoardConfiguration::getIndexOfMarkerId(int id)const$/;"	f	class:aruco::BoardConfiguration
getListOfValidMarkersIds_random	arucofidmarkers.cpp	/^  vector<int> FiducidalMarkers::getListOfValidMarkersIds_random(int nMarkers,vector<int> *excluded) throw (cv::Exception)$/;"	f	class:aruco::FiducidalMarkers
getMarkerInfo	board.cpp	/^const MarkerInfo& BoardConfiguration::getMarkerInfo(int id)const throw (cv::Exception)$/;"	f	class:aruco::BoardConfiguration
getMarkerMat	arucofidmarkers.cpp	/^  cv::Mat FiducidalMarkers::getMarkerMat(int id) throw (cv::Exception)$/;"	f	class:aruco::FiducidalMarkers
getPerimeter	marker.cpp	/^  float Marker::getPerimeter()const$/;"	f	class:aruco::Marker
glGetModelViewMatrix	board.cpp	/^void Board::glGetModelViewMatrix ( double modelview_matrix[16] ) throw ( cv::Exception )$/;"	f	class:aruco::Board
glGetModelViewMatrix	marker.cpp	/^  void Marker::glGetModelViewMatrix(   double modelview_matrix[16])throw(cv::Exception)$/;"	f	class:aruco::Marker
glGetProjectionMatrix	cameraparameters.cpp	/^void CameraParameters::glGetProjectionMatrix( cv::Size orgImgSize, cv::Size size,double proj_matrix[16],double gnear,double gfar,bool invert   )throw(cv::Exception)$/;"	f	class:aruco::CameraParameters
glGetProjectionMatrix	markerdetector.cpp	/^  void MarkerDetector::glGetProjectionMatrix ( CameraParameters &  CamMatrix,cv::Size orgImgSize, cv::Size size,double proj_matrix[16],double gnear,double gfar,bool invert )$/;"	f	class:aruco::MarkerDetector
hammDistMarker	arucofidmarkers.cpp	/^  int FiducidalMarkers::hammDistMarker(Mat  bits)$/;"	f	class:aruco::FiducidalMarkers
interpolate2Dline	markerdetector.cpp	/^  void MarkerDetector::interpolate2Dline( const std::vector< Point >& inPoints, Point3f& outLine)$/;"	f	class:aruco::MarkerDetector
isInto	markerdetector.cpp	/^  bool MarkerDetector::isInto ( Mat &contour,vector<Point2f> &b )$/;"	f	class:aruco::MarkerDetector
main	aruco_selectoptimalmarkers.cpp	/^int main(int argc,char **argv)$/;"	f
norm	cameraparameters.cpp	/^double CameraParameters::norm( double a, double b, double c )$/;"	f	class:aruco::CameraParameters
operator =	board.cpp	/^BoardConfiguration & BoardConfiguration ::operator=(const BoardConfiguration  &T) {$/;"	f	class:aruco::BoardConfiguration
operator =	cameraparameters.cpp	/^CameraParameters & CameraParameters::operator=(const CameraParameters &CI) {$/;"	f	class:aruco::CameraParameters
perimeter	markerdetector.cpp	/^  int MarkerDetector:: perimeter ( vector<Point2f> &a )$/;"	f	class:aruco::MarkerDetector
print	marker.cpp	/^  void print(cv::Point3f p,string cad)$/;"	f	namespace:aruco
readFromFile	board.cpp	/^void Board::readFromFile(string filePath)throw(cv::Exception)$/;"	f	class:aruco::Board
readFromFile	board.cpp	/^void BoardConfiguration::readFromFile ( string sfile ) throw ( cv::Exception )$/;"	f	class:aruco::BoardConfiguration
readFromFile	board.cpp	/^void BoardConfiguration::readFromFile(cv::FileStorage &fs)throw (cv::Exception)$/;"	f	class:aruco::BoardConfiguration
readFromFile	cameraparameters.cpp	/^void CameraParameters::readFromFile(string path)throw(cv::Exception)$/;"	f	class:aruco::CameraParameters
readFromXMLFile	cameraparameters.cpp	/^void CameraParameters::readFromXMLFile(string filePath)throw(cv::Exception)$/;"	f	class:aruco::CameraParameters
refineCandidateLines	markerdetector.cpp	/^  void MarkerDetector::refineCandidateLines(MarkerDetector::MarkerCandidate& candidate)$/;"	f	class:aruco::MarkerDetector
resize	cameraparameters.cpp	/^void CameraParameters::resize(cv::Size size)throw(cv::Exception)$/;"	f	class:aruco::CameraParameters
rotate	aruco_selectoptimalmarkers.cpp	/^Mat rotate(Mat  in)$/;"	f
rotate	arucofidmarkers.cpp	/^  Mat FiducidalMarkers::rotate(const Mat  &in)$/;"	f	class:aruco::FiducidalMarkers
rotateXAxis	boarddetector.cpp	/^  void BoardDetector::rotateXAxis ( Mat &rotation )$/;"	f	class:aruco::BoardDetector
rotateXAxis	marker.cpp	/^  void Marker::rotateXAxis(Mat &rotation)$/;"	f	class:aruco::Marker
saveToFile	board.cpp	/^void Board::saveToFile(string filePath)throw(cv::Exception)$/;"	f	class:aruco::Board
saveToFile	board.cpp	/^void BoardConfiguration::saveToFile ( string sfile ) throw ( cv::Exception )$/;"	f	class:aruco::BoardConfiguration
saveToFile	board.cpp	/^void BoardConfiguration::saveToFile(cv::FileStorage &fs)throw (cv::Exception) {$/;"	f	class:aruco::BoardConfiguration
saveToFile	cameraparameters.cpp	/^void CameraParameters::saveToFile(string path,bool inXML)throw(cv::Exception)$/;"	f	class:aruco::CameraParameters
setDesiredSpeed	markerdetector.cpp	/^  void MarkerDetector::setDesiredSpeed ( int val )$/;"	f	class:aruco::MarkerDetector
setMinMaxSize	markerdetector.cpp	/^  void MarkerDetector::setMinMaxSize(float min ,float max )throw(cv::Exception)$/;"	f	class:aruco::MarkerDetector
setParams	boarddetector.cpp	/^  void BoardDetector::setParams(const BoardConfiguration &bc)$/;"	f	class:aruco::BoardDetector
setParams	boarddetector.cpp	/^  void BoardDetector::setParams(const BoardConfiguration &bc,const CameraParameters &cp, float markerSizeMeters)$/;"	f	class:aruco::BoardDetector
setParams	cameraparameters.cpp	/^void CameraParameters::setParams(cv::Mat cameraMatrix,cv::Mat distorsionCoeff,cv::Size size) throw(cv::Exception)$/;"	f	class:aruco::CameraParameters
setPointIntoImage	markerdetector.cpp	/^  void setPointIntoImage(cv::Point  &p,cv::Size s) {$/;"	f	namespace:aruco
setPointIntoImage	markerdetector.cpp	/^  void setPointIntoImage(cv::Point2f &p,cv::Size s) {$/;"	f	namespace:aruco
thresHold	markerdetector.cpp	/^  void MarkerDetector::thresHold ( int method,const Mat &grey,Mat &out,double param1,double param2 ) throw ( cv::Exception )$/;"	f	class:aruco::MarkerDetector
warp	markerdetector.cpp	/^  bool MarkerDetector::warp ( Mat &in,Mat &out,Size size, vector<Point2f> points ) throw ( cv::Exception )$/;"	f	class:aruco::MarkerDetector
warp_cylinder	markerdetector.cpp	/^  bool MarkerDetector::warp_cylinder ( Mat &in,Mat &out,Size size, MarkerCandidate& mcand ) throw ( cv::Exception )$/;"	f	class:aruco::MarkerDetector
~MarkerDetector	markerdetector.cpp	/^  MarkerDetector::~MarkerDetector()$/;"	f	class:aruco::MarkerDetector
