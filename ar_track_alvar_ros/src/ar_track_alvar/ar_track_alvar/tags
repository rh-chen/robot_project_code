!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADAPT	include/ar_track_alvar/ConnectedComponents.h	/^		ADAPT$/;"	e	enum:alvar::Labeling::ThresholdMethod
ALVAR_CAPTURE_PLUGIN_CMU_EXPORT	src/platform/capture_plugin_cmu/CapturePluginCmu.h	35;"	d
ALVAR_CAPTURE_PLUGIN_CMU_EXPORT	src/platform/capture_plugin_cmu/CapturePluginCmu.h	37;"	d
ALVAR_CAPTURE_PLUGIN_CMU_EXPORT	src/platform/capture_plugin_cmu/CapturePluginCmu.h	40;"	d
ALVAR_CAPTURE_PLUGIN_DSCAPTURE_EXPORT	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	38;"	d
ALVAR_CAPTURE_PLUGIN_DSCAPTURE_EXPORT	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	40;"	d
ALVAR_CAPTURE_PLUGIN_DSCAPTURE_EXPORT	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	43;"	d
ALVAR_CAPTURE_PLUGIN_FILE_EXPORT	src/platform/capture_plugin_file/CapturePluginFile.h	35;"	d
ALVAR_CAPTURE_PLUGIN_FILE_EXPORT	src/platform/capture_plugin_file/CapturePluginFile.h	37;"	d
ALVAR_CAPTURE_PLUGIN_FILE_EXPORT	src/platform/capture_plugin_file/CapturePluginFile.h	40;"	d
ALVAR_CAPTURE_PLUGIN_HIGHGUI_EXPORT	src/platform/capture_plugin_highgui/CapturePluginHighgui.h	35;"	d
ALVAR_CAPTURE_PLUGIN_HIGHGUI_EXPORT	src/platform/capture_plugin_highgui/CapturePluginHighgui.h	37;"	d
ALVAR_CAPTURE_PLUGIN_HIGHGUI_EXPORT	src/platform/capture_plugin_highgui/CapturePluginHighgui.h	40;"	d
ALVAR_CAPTURE_PLUGIN_PTGREY_EXPORT	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	38;"	d
ALVAR_CAPTURE_PLUGIN_PTGREY_EXPORT	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	40;"	d
ALVAR_CAPTURE_PLUGIN_PTGREY_EXPORT	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	43;"	d
ALVAR_DATE	include/ar_track_alvar/Alvar.h	/^static const char *ALVAR_DATE = "2012-06-20";$/;"	m	namespace:alvar
ALVAR_EXCEPTION_H	include/ar_track_alvar/AlvarException.h	25;"	d
ALVAR_EXPORT	include/ar_track_alvar/Alvar.h	163;"	d
ALVAR_EXPORT	include/ar_track_alvar/Alvar.h	165;"	d
ALVAR_EXPORT	include/ar_track_alvar/Alvar.h	168;"	d
ALVAR_H	include/ar_track_alvar/Alvar.h	25;"	d
ALVAR_SYSTEM	include/ar_track_alvar/Alvar.h	/^static const char *ALVAR_SYSTEM = "Linux 3.2.0-24-generic x86_64";$/;"	m	namespace:alvar
ALVAR_VERSION	include/ar_track_alvar/Alvar.h	/^static const char *ALVAR_VERSION = "2.0.0";$/;"	m	namespace:alvar
ALVAR_VERSION_MAJOR	include/ar_track_alvar/Alvar.h	/^static const int ALVAR_VERSION_MAJOR = 2;$/;"	m	namespace:alvar
ALVAR_VERSION_MINOR	include/ar_track_alvar/Alvar.h	/^static const int ALVAR_VERSION_MINOR = 0;$/;"	m	namespace:alvar
ALVAR_VERSION_NODOTS	include/ar_track_alvar/Alvar.h	/^static const char *ALVAR_VERSION_NODOTS = "200";$/;"	m	namespace:alvar
ALVAR_VERSION_PATCH	include/ar_track_alvar/Alvar.h	/^static const int ALVAR_VERSION_PATCH = 0;$/;"	m	namespace:alvar
ALVAR_VERSION_REVISION	include/ar_track_alvar/Alvar.h	/^static const char *ALVAR_VERSION_REVISION = "";$/;"	m	namespace:alvar
ALVAR_VERSION_TAG	include/ar_track_alvar/Alvar.h	/^static const char *ALVAR_VERSION_TAG = "";$/;"	m	namespace:alvar
ARCloud	include/ar_track_alvar/filter/kinect_filtering.h	/^typedef pcl::PointCloud<ARPoint> ARCloud;$/;"	t	namespace:ar_track_alvar
ARCloud	nodes/FindMarkerBundles.cpp	/^typedef pcl::PointCloud<ARPoint> ARCloud;$/;"	t	file:
ARCloud	nodes/IndividualMarkers.cpp	/^typedef pcl::PointCloud<ARPoint> ARCloud;$/;"	t	file:
ARPoint	include/ar_track_alvar/filter/kinect_filtering.h	/^typedef pcl::PointXYZRGB ARPoint;$/;"	t	namespace:ar_track_alvar
ARPoint	nodes/FindMarkerBundles.cpp	/^typedef pcl::PointXYZRGB ARPoint;$/;"	t	file:
ARPoint	nodes/IndividualMarkers.cpp	/^typedef pcl::PointXYZRGB ARPoint;$/;"	t	file:
AR_TRACK_ALVAR_KINECT_FILTERING_H	include/ar_track_alvar/filter/kinect_filtering.h	40;"	d
AR_TRACK_ALVAR_MEDIAN_FILTER_H	include/ar_track_alvar/filter/medianFilter.h	40;"	d
Add	include/ar_track_alvar/Container3d.h	/^		void Add(const CvPoint3D32f& _pos, const T& _data){$/;"	f	class:alvar::Container3d
Add6bitStr	src/Marker.cpp	/^void MarkerData::Add6bitStr(BitsetExt *bs, char *s) {$/;"	f	class:alvar::MarkerData
AddDimension	src/Util.cpp	/^void Histogram::AddDimension(int binsize) {$/;"	f	class:alvar::Histogram
AddFeatures	include/ar_track_alvar/EC.h	/^	bool AddFeatures(std::map<int,T> &container, int type_id=0, int first_id=0, int last_id=65535)$/;"	f	class:alvar::TrackerFeaturesEC
AddFeatures	src/TrackerFeatures.cpp	/^int TrackerFeatures::AddFeatures(IplImage *new_features_mask) {$/;"	f	class:alvar::TrackerFeatures
AddMarker	src/SampleMarkerCreator.cpp	/^    void AddMarker(const char *id) {$/;"	f	struct:State
AddMarker	src/SfM.cpp	/^void SimpleSfM::AddMarker(int marker_id, double edge_length, Pose &pose) {$/;"	f	class:alvar::SimpleSfM
AddMultiMarker	src/SfM.cpp	/^bool SimpleSfM::AddMultiMarker(MultiMarkerEC *mm) {$/;"	f	class:alvar::SimpleSfM
AddMultiMarker	src/SfM.cpp	/^bool SimpleSfM::AddMultiMarker(const char *fname, FILE_FORMAT format\/* = FILE_FORMAT_XML*\/) {$/;"	f	class:alvar::SimpleSfM
AddPointsUsingChessboard	src/Camera.cpp	/^bool ProjPoints::AddPointsUsingChessboard(IplImage *image, double etalon_square_size, int etalon_rows, int etalon_columns, bool visualize) {$/;"	f	class:alvar::ProjPoints
AddPointsUsingMarkers	src/Camera.cpp	/^bool ProjPoints::AddPointsUsingMarkers(vector<PointDouble> &marker_corners, vector<PointDouble> &marker_corners_img, IplImage* image)$/;"	f	class:alvar::ProjPoints
AlvarException	include/ar_track_alvar/AlvarException.h	/^	AlvarException(const char *s) : std::runtime_error(s) { }$/;"	f	class:alvar::AlvarException
AlvarException	include/ar_track_alvar/AlvarException.h	/^class AlvarException : public std::runtime_error$/;"	c	namespace:alvar
AlvarLoader	src/Alvar.cpp	/^	AlvarLoader() {$/;"	f	struct:alvar::AlvarLoader
AlvarLoader	src/Alvar.cpp	/^struct AlvarLoader {$/;"	s	namespace:alvar	file:
Ascend	src/Util.cpp	/^bool Serialization::Ascend() {$/;"	f	class:alvar::Serialization
BITSET_H	include/ar_track_alvar/Bitset.h	25;"	d
Bitset	include/ar_track_alvar/Bitset.h	/^class ALVAR_EXPORT Bitset {$/;"	c	namespace:alvar
BitsetExt	include/ar_track_alvar/Bitset.h	/^class ALVAR_EXPORT BitsetExt : public Bitset {$/;"	c	namespace:alvar
BitsetExt	src/Bitset.cpp	/^BitsetExt::BitsetExt() {$/;"	f	class:alvar::BitsetExt
BitsetExt	src/Bitset.cpp	/^BitsetExt::BitsetExt(bool _verbose) {$/;"	f	class:alvar::BitsetExt
BuildHideTexture	src/Draw.cpp	/^void BuildHideTexture(IplImage *image, IplImage *hide_texture, $/;"	f	namespace:alvar
CAMERA_H	include/ar_track_alvar/Camera.h	25;"	d
CAPTUREDEVICE_H	include/ar_track_alvar/CaptureDevice.h	25;"	d
CAPTUREFACTORY_H	include/ar_track_alvar/CaptureFactory.h	25;"	d
CAPTUREFACTORY_PRIVATE_H	include/ar_track_alvar/CaptureFactory_private.h	25;"	d
CAPTUREPLUGINCMU_H	src/platform/capture_plugin_cmu/CapturePluginCmu.h	25;"	d
CAPTUREPLUGINDSCAPTURE_H	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	25;"	d
CAPTUREPLUGINFILE_H	src/platform/capture_plugin_file/CapturePluginFile.h	25;"	d
CAPTUREPLUGINHIGHGUI_H	src/platform/capture_plugin_highgui/CapturePluginHighgui.h	25;"	d
CAPTUREPLUGINPTGREY_H	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	25;"	d
CAPTUREPLUGIN_H	include/ar_track_alvar/CapturePlugin.h	25;"	d
CAPTURE_H	include/ar_track_alvar/Capture.h	25;"	d
CONNECTEDCOMPONENTS_H	include/ar_track_alvar/ConnectedComponents.h	25;"	d
CONTAINER_3D	include/ar_track_alvar/Container3d.h	25;"	d
CVSEQ	include/ar_track_alvar/ConnectedComponents.h	/^	CVSEQ$/;"	e	enum:alvar::LabelingMethod
CVTESTBED_H	include/ar_track_alvar/CvTestbed.h	2;"	d
CalcExteriorOrientation	include/ar_track_alvar/EC.h	/^	bool CalcExteriorOrientation(std::map<int,T> &container, Pose *pose, F do_handle_test) {$/;"	f	class:alvar::CameraEC
CalcExteriorOrientation	include/ar_track_alvar/EC.h	/^	bool CalcExteriorOrientation(std::map<int,T> &container, Pose *pose, int type_id=-1) {$/;"	f	class:alvar::CameraEC
CalcExteriorOrientation	src/Camera.cpp	/^bool Camera::CalcExteriorOrientation(const CvMat* object_points, CvMat* image_points, CvMat *rodriques, CvMat *tra) {$/;"	f	class:alvar::Camera
CalcExteriorOrientation	src/Camera.cpp	/^bool Camera::CalcExteriorOrientation(const CvMat* object_points, CvMat* image_points, Pose *pose) {$/;"	f	class:alvar::Camera
CalcExteriorOrientation	src/Camera.cpp	/^void Camera::CalcExteriorOrientation(vector<CvPoint3D64f>& pw, vector<CvPoint2D64f>& pi,$/;"	f	class:alvar::Camera
CalcExteriorOrientation	src/Camera.cpp	/^void Camera::CalcExteriorOrientation(vector<CvPoint3D64f>& pw, vector<PointDouble >& pi,$/;"	f	class:alvar::Camera
CalcExteriorOrientation	src/Camera.cpp	/^void Camera::CalcExteriorOrientation(vector<PointDouble >& pw, vector<PointDouble >& pi,$/;"	f	class:alvar::Camera
CalcExteriorOrientation	src/Camera.cpp	/^void Camera::CalcExteriorOrientation(vector<PointDouble>& pw, vector<PointDouble >& pi, Pose *pose)$/;"	f	class:alvar::Camera
CalcJacobian	src/Optimization.cpp	/^void Optimization::CalcJacobian(CvMat* x, CvMat* J, EstimateCallback Estimate)$/;"	f	class:alvar::Optimization
CalcTukeyWeight	src/Optimization.cpp	/^double Optimization::CalcTukeyWeight(double residual, double c)$/;"	f	class:alvar::Optimization
CalcTukeyWeightSimple	src/Optimization.cpp	/^double Optimization::CalcTukeyWeightSimple(double residual, double c)$/;"	f	class:alvar::Optimization
CalculatePointNormals	src/IntegralImage.cpp	/^void IntegralGradient::CalculatePointNormals(IplImage *gray) {$/;"	f	class:alvar::IntegralGradient
Calibrate	src/Camera.cpp	/^void Camera::Calibrate(ProjPoints &pp)$/;"	f	class:alvar::Camera
Camera	include/ar_track_alvar/Camera.h	/^class ALVAR_EXPORT Camera {$/;"	c	namespace:alvar
Camera	src/Camera.cpp	/^Camera::Camera() {$/;"	f	class:alvar::Camera
Camera	src/Camera.cpp	/^Camera::Camera(ros::NodeHandle & n, std::string cam_info_topic):n_(n) $/;"	f	class:alvar::Camera
CameraEC	include/ar_track_alvar/EC.h	/^class ALVAR_EXPORT CameraEC : public Camera {$/;"	c	namespace:alvar
CameraMoves	src/SfM.cpp	/^	CameraMoves()$/;"	f	class:alvar::CameraMoves
CameraMoves	src/SfM.cpp	/^class CameraMoves$/;"	c	namespace:alvar	file:
Capture	include/ar_track_alvar/Capture.h	/^    Capture(const CaptureDevice captureDevice)$/;"	f	class:alvar::Capture
Capture	include/ar_track_alvar/Capture.h	/^class ALVAR_EXPORT Capture$/;"	c	namespace:alvar
CaptureCmu	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^CaptureCmu::CaptureCmu(const CaptureDevice captureDevice)$/;"	f	class:alvar::plugins::CaptureCmu
CaptureCmu	src/platform/capture_plugin_cmu/CapturePluginCmu.h	/^class ALVAR_CAPTURE_PLUGIN_CMU_EXPORT CaptureCmu$/;"	c	namespace:alvar::plugins
CaptureDSCapture	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^CaptureDSCapture::CaptureDSCapture(const CaptureDevice captureDevice)$/;"	f	class:alvar::plugins::CaptureDSCapture
CaptureDSCapture	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^class ALVAR_CAPTURE_PLUGIN_DSCAPTURE_EXPORT CaptureDSCapture$/;"	c	namespace:alvar::plugins
CaptureDevice	include/ar_track_alvar/CaptureDevice.h	/^class ALVAR_EXPORT CaptureDevice$/;"	c	namespace:alvar
CaptureDevice	src/CaptureDevice.cpp	/^CaptureDevice::CaptureDevice(const std::string captureType, const std::string id, const std::string description)$/;"	f	class:alvar::CaptureDevice
CaptureDeviceVector	include/ar_track_alvar/CaptureFactory.h	/^    typedef std::vector<CaptureDevice> CaptureDeviceVector;$/;"	t	class:alvar::CaptureFactory
CaptureDeviceVector	include/ar_track_alvar/CapturePlugin.h	/^    typedef std::vector<CaptureDevice> CaptureDeviceVector;$/;"	t	class:alvar::CapturePlugin
CaptureFactory	include/ar_track_alvar/CaptureFactory.h	/^class ALVAR_EXPORT CaptureFactory$/;"	c	namespace:alvar
CaptureFactory	src/CaptureFactory.cpp	/^CaptureFactory::CaptureFactory()$/;"	f	class:alvar::CaptureFactory
CaptureFactoryDestroyer	include/ar_track_alvar/CaptureFactory.h	/^        CaptureFactoryDestroyer(CaptureFactory *instance = NULL) : mInstance(instance) {}$/;"	f	class:alvar::CaptureFactory::CaptureFactoryDestroyer
CaptureFactoryDestroyer	include/ar_track_alvar/CaptureFactory.h	/^    class CaptureFactoryDestroyer$/;"	c	class:alvar::CaptureFactory
CaptureFactoryPrivate	include/ar_track_alvar/CaptureFactory_private.h	/^class CaptureFactoryPrivate$/;"	c	namespace:alvar
CaptureFactoryPrivate	src/CaptureFactory.cpp	/^CaptureFactoryPrivate::CaptureFactoryPrivate()$/;"	f	class:alvar::CaptureFactoryPrivate
CaptureFile	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^CaptureFile::CaptureFile(const CaptureDevice captureDevice)$/;"	f	class:alvar::plugins::CaptureFile
CaptureFile	src/platform/capture_plugin_file/CapturePluginFile.h	/^class ALVAR_CAPTURE_PLUGIN_FILE_EXPORT CaptureFile$/;"	c	namespace:alvar::plugins
CaptureHighgui	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^CaptureHighgui::CaptureHighgui(const CaptureDevice captureDevice)$/;"	f	class:alvar::plugins::CaptureHighgui
CaptureHighgui	src/platform/capture_plugin_highgui/CapturePluginHighgui.h	/^class ALVAR_CAPTURE_PLUGIN_HIGHGUI_EXPORT CaptureHighgui$/;"	c	namespace:alvar::plugins
CapturePlugin	include/ar_track_alvar/CapturePlugin.h	/^    CapturePlugin(const std::string &captureType)$/;"	f	class:alvar::CapturePlugin
CapturePlugin	include/ar_track_alvar/CapturePlugin.h	/^class ALVAR_EXPORT CapturePlugin$/;"	c	namespace:alvar
CapturePluginCmu	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^CapturePluginCmu::CapturePluginCmu(const std::string &captureType)$/;"	f	class:alvar::plugins::CapturePluginCmu
CapturePluginCmu	src/platform/capture_plugin_cmu/CapturePluginCmu.h	/^class ALVAR_CAPTURE_PLUGIN_CMU_EXPORT CapturePluginCmu$/;"	c	namespace:alvar::plugins
CapturePluginDSCapture	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^CapturePluginDSCapture::CapturePluginDSCapture(const string &captureType)$/;"	f	class:alvar::plugins::CapturePluginDSCapture
CapturePluginDSCapture	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^class ALVAR_CAPTURE_PLUGIN_DSCAPTURE_EXPORT CapturePluginDSCapture$/;"	c	namespace:alvar::plugins
CapturePluginFile	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^CapturePluginFile::CapturePluginFile(const std::string &captureType)$/;"	f	class:alvar::plugins::CapturePluginFile
CapturePluginFile	src/platform/capture_plugin_file/CapturePluginFile.h	/^class ALVAR_CAPTURE_PLUGIN_FILE_EXPORT CapturePluginFile$/;"	c	namespace:alvar::plugins
CapturePluginHighgui	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^CapturePluginHighgui::CapturePluginHighgui(const std::string &captureType)$/;"	f	class:alvar::plugins::CapturePluginHighgui
CapturePluginHighgui	src/platform/capture_plugin_highgui/CapturePluginHighgui.h	/^class ALVAR_CAPTURE_PLUGIN_HIGHGUI_EXPORT CapturePluginHighgui$/;"	c	namespace:alvar::plugins
CapturePluginMap	include/ar_track_alvar/CaptureFactory_private.h	/^    typedef std::map<std::string, CapturePlugin *> CapturePluginMap;$/;"	t	class:alvar::CaptureFactoryPrivate
CapturePluginPtgrey	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^CapturePluginPtgrey::CapturePluginPtgrey(const string &captureType)$/;"	f	class:alvar::plugins::CapturePluginPtgrey
CapturePluginPtgrey	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	/^class ALVAR_CAPTURE_PLUGIN_PTGREY_EXPORT CapturePluginPtgrey$/;"	c	namespace:alvar::plugins
CapturePluginVector	include/ar_track_alvar/CaptureFactory.h	/^    typedef std::vector<std::string> CapturePluginVector;$/;"	t	class:alvar::CaptureFactory
CapturePtgrey	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^CapturePtgrey::CapturePtgrey(const CaptureDevice captureDevice)$/;"	f	class:alvar::plugins::CapturePtgrey
CapturePtgrey	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	/^class ALVAR_CAPTURE_PLUGIN_PTGREY_EXPORT CapturePtgrey$/;"	c	namespace:alvar::plugins
ChangeSettings	src/TrackerFeatures.cpp	/^void TrackerFeatures::ChangeSettings(int _max_features, int _min_features, double _quality_level, double _min_distance) {$/;"	f	class:alvar::TrackerFeatures
CheckBorder	src/ConnectedComponents.cpp	/^bool Labeling::CheckBorder(CvSeq* contour, int width, int height)$/;"	f	class:alvar::Labeling
Clear	include/ar_track_alvar/Container3d.h	/^		void Clear() {$/;"	f	class:alvar::Container3d
Clear	src/SfM.cpp	/^void SimpleSfM::Clear() {$/;"	f	class:alvar::SimpleSfM
Clear	src/Util.cpp	/^void Histogram::Clear() {$/;"	f	class:alvar::Histogram
Clear	src/Util.cpp	/^void HistogramSubpixel::Clear() {$/;"	f	class:alvar::HistogramSubpixel
CompareContent	src/Marker.cpp	/^void Marker::CompareContent(vector<PointDouble > &_marker_corners_img, IplImage *gray, Camera *cam, int *orientation) const {$/;"	f	class:alvar::Marker
CompareCorners	src/Marker.cpp	/^void Marker::CompareCorners(vector<PointDouble > &_marker_corners_img, int *orientation, double *error) {$/;"	f	class:alvar::Marker
Compensate	include/ar_track_alvar/Tracker.h	/^	virtual void Compensate(double *x, double *y) {}$/;"	f	class:alvar::Tracker
Compensate	src/TrackerPsa.cpp	/^void TrackerPsa::Compensate(double *x, double *y) {$/;"	f	class:alvar::TrackerPsa
Compensate	src/TrackerPsa.cpp	/^void TrackerPsaRot::Compensate(double *x, double *y)$/;"	f	class:alvar::TrackerPsaRot
Compensate	src/TrackerStat.cpp	/^void TrackerStat::Compensate(double *x, double *y) { $/;"	f	class:alvar::TrackerStat
Compensate	src/TrackerStat.cpp	/^void TrackerStatRot::Compensate(double *x, double *y)$/;"	f	class:alvar::TrackerStatRot
Container3d	include/ar_track_alvar/Container3d.h	/^class Container3d$/;"	c	namespace:alvar
Container3dLimitDist	include/ar_track_alvar/Container3d.h	/^	Container3dLimitDist(Container3d<T> &_container, const CvPoint3D32f _orig, float _dist_limit) $/;"	f	class:alvar::Container3dLimitDist
Container3dLimitDist	include/ar_track_alvar/Container3d.h	/^class Container3dLimitDist {$/;"	c	namespace:alvar
Container3dSortDist	include/ar_track_alvar/Container3d.h	/^	Container3dSortDist(Container3d<T> &_container, const CvPoint3D32f _orig) : container(_container), orig(_orig) {}$/;"	f	class:alvar::Container3dSortDist
Container3dSortDist	include/ar_track_alvar/Container3d.h	/^class Container3dSortDist {$/;"	c	namespace:alvar
Container3dSortSize	include/ar_track_alvar/Container3d.h	/^	Container3dSortSize(Container3d<T> &_container) : container(_container) {}$/;"	f	class:alvar::Container3dSortSize
Container3dSortSize	include/ar_track_alvar/Container3d.h	/^class Container3dSortSize {$/;"	c	namespace:alvar
CreateImage	src/CvTestbed.cpp	/^IplImage *CvTestbed::CreateImage(const char *title, CvSize size, int depth, int channels ) {$/;"	f	class:CvTestbed
CreateImageWithProto	src/CvTestbed.cpp	/^IplImage *CvTestbed::CreateImageWithProto(const char *title, IplImage *proto, int depth \/* =0 *\/, int channels \/* =0 *\/) {$/;"	f	class:CvTestbed
CreateShadowPoint	src/SfM.cpp	/^void CreateShadowPoint(CvPoint3D32f &p3d_sh, CvPoint3D32f p3d, CameraEC *cam, Pose *camera_pose, float parallax_length, float triangulate_angle) {$/;"	f	namespace:alvar
CvTestbed	include/ar_track_alvar/CvTestbed.h	/^class CvTestbed {$/;"	c
CvTestbed	src/CvTestbed.cpp	/^CvTestbed::CvTestbed() {$/;"	f	class:CvTestbed
DECODE_ERROR	include/ar_track_alvar/Marker.h	/^    static const int DECODE_ERROR=2;$/;"	m	class:alvar::Marker
DIRECTORYITERATOR_H	include/ar_track_alvar/DirectoryIterator.h	25;"	d
DRAW_H	include/ar_track_alvar/Draw.h	25;"	d
DecodeCode	src/Marker.cpp	/^int MarkerData::DecodeCode(int orientation, BitsetExt *bs, int *erroneous, int *total, $/;"	f	class:alvar::MarkerData
DecodeContent	src/Marker.cpp	/^bool Marker::DecodeContent(int *orientation) {$/;"	f	class:alvar::Marker
DecodeContent	src/Marker.cpp	/^bool MarkerArtoolkit::DecodeContent(int *orientation) {$/;"	f	class:alvar::MarkerArtoolkit
DecodeContent	src/Marker.cpp	/^bool MarkerData::DecodeContent(int *orientation) {$/;"	f	class:alvar::MarkerData
DecodeOrientation	src/Marker.cpp	/^void MarkerData::DecodeOrientation(int *error, int *total, int *orientation) {$/;"	f	class:alvar::MarkerData
Deg2Rad	include/ar_track_alvar/Util.h	/^double ALVAR_EXPORT Deg2Rad(const C& v)$/;"	f	namespace:alvar
DelFeature	include/ar_track_alvar/EC.h	/^	bool DelFeature(int index) { throw alvar::AlvarException("Method not supported"); }$/;"	f	class:alvar::TrackerFeaturesEC
DelFeature	src/TrackerFeatures.cpp	/^bool TrackerFeatures::DelFeature(int index) {$/;"	f	class:alvar::TrackerFeatures
DelFeatureId	include/ar_track_alvar/EC.h	/^	bool DelFeatureId(int id) { throw alvar::AlvarException("Method not supported"); }$/;"	f	class:alvar::TrackerFeaturesEC
DelFeatureId	src/TrackerFeatures.cpp	/^bool TrackerFeatures::DelFeatureId(int id) {$/;"	f	class:alvar::TrackerFeatures
Descend	src/Util.cpp	/^bool Serialization::Descend(const char *id) {$/;"	f	class:alvar::Serialization
Detect	include/ar_track_alvar/EC.h	/^	int Detect(IplImage *image,$/;"	f	class:alvar::MarkerDetectorEC
Detect	src/MarkerDetector.cpp	/^	int MarkerDetectorImpl::Detect(IplImage *image,$/;"	f	class:alvar::MarkerDetectorImpl
DetectAdditional	src/MarkerDetector.cpp	/^	int MarkerDetectorImpl::DetectAdditional(IplImage *image, Camera *cam, bool visualize, double max_track_error)$/;"	f	class:alvar::MarkerDetectorImpl
DetectResolution	src/Marker.cpp	/^bool MarkerData::DetectResolution(vector<PointDouble > &_marker_corners_img, IplImage *gray, Camera *cam) {$/;"	f	class:alvar::MarkerData
DimIndex	src/Util.cpp	/^int Histogram::DimIndex(int dim, double val) {$/;"	f	class:alvar::Histogram
DimVal	src/Util.cpp	/^double Histogram::DimVal(int dim, int index) {$/;"	f	class:alvar::Histogram
DirectoryIterator	include/ar_track_alvar/DirectoryIterator.h	/^class ALVAR_EXPORT DirectoryIterator$/;"	c	namespace:alvar
DirectoryIterator	src/DirectoryIterator.cpp	/^DirectoryIterator::DirectoryIterator(const std::string &path)$/;"	f	class:alvar::DirectoryIterator
DirectoryIteratorPrivate	include/ar_track_alvar/DirectoryIterator_private.h	/^class DirectoryIteratorPrivate$/;"	c	namespace:alvar
DirectoryIteratorPrivate	src/DirectoryIterator_unix.cpp	/^DirectoryIteratorPrivate::DirectoryIteratorPrivate(const std::string &path)$/;"	f	class:alvar::DirectoryIteratorPrivate
DirectoryIteratorPrivate	src/DirectoryIterator_win.cpp	/^DirectoryIteratorPrivate::DirectoryIteratorPrivate(const std::string &path)$/;"	f	class:alvar::DirectoryIteratorPrivate
DirectoryIteratorPrivateData	src/DirectoryIterator_unix.cpp	/^    DirectoryIteratorPrivateData()$/;"	f	class:alvar::DirectoryIteratorPrivateData
DirectoryIteratorPrivateData	src/DirectoryIterator_unix.cpp	/^class DirectoryIteratorPrivateData$/;"	c	namespace:alvar	file:
DirectoryIteratorPrivateData	src/DirectoryIterator_win.cpp	/^    DirectoryIteratorPrivateData()$/;"	f	class:alvar::DirectoryIteratorPrivateData
DirectoryIteratorPrivateData	src/DirectoryIterator_win.cpp	/^class DirectoryIteratorPrivateData$/;"	c	namespace:alvar	file:
Distort	include/ar_track_alvar/EC.h	/^	void Distort(std::map<int,T> &container, F &do_handle_test) {$/;"	f	class:alvar::CameraEC
Distort	include/ar_track_alvar/EC.h	/^	void Distort(std::map<int,T> &container, int type_id=-1) {$/;"	f	class:alvar::CameraEC
Distort	src/Camera.cpp	/^void Camera::Distort(CvPoint2D32f & point) $/;"	f	class:alvar::Camera
Distort	src/Camera.cpp	/^void Camera::Distort(PointDouble & point) $/;"	f	class:alvar::Camera
Distort	src/Camera.cpp	/^void Camera::Distort(vector<PointDouble>& points) $/;"	f	class:alvar::Camera
DoEraseTest	include/ar_track_alvar/EC.h	/^	DoEraseTest(bool _erase_without_p2d, bool _erase_without_p3d, int _type_id=-1) $/;"	f	class:alvar::DoEraseTest
DoEraseTest	include/ar_track_alvar/EC.h	/^	DoEraseTest(float _limit, bool _erase_without_p2d=false, bool _erase_without_p3d=false, int _type_id=-1) $/;"	f	class:alvar::DoEraseTest
DoEraseTest	include/ar_track_alvar/EC.h	/^class DoEraseTest {$/;"	c	namespace:alvar
DoHandleTest	include/ar_track_alvar/EC.h	/^	DoHandleTest(int _type_id=-1, bool _needs_has_p2d=false, bool _needs_has_p3d=false) $/;"	f	class:alvar::DoHandleTest
DoHandleTest	include/ar_track_alvar/EC.h	/^class DoHandleTest {$/;"	c	namespace:alvar
Draw	src/GlutViewer.cpp	/^void Drawable::Draw() {$/;"	f	class:Drawable
Draw	src/SampleMarkerHide.cpp	/^    virtual void Draw() {$/;"	f	struct:OwnDrawable
Draw	src/SamplePointcloud.cpp	/^    virtual void Draw() {$/;"	f	struct:OwnDrawable
Draw	src/SfM.cpp	/^void SimpleSfM::Draw(IplImage *rgba) {$/;"	f	class:alvar::SimpleSfM
DrawAr	src/GlutViewer.cpp	/^void GlutViewer::DrawAr()$/;"	f	class:GlutViewer
DrawAxis	src/GlutViewer.cpp	/^void Drawable::DrawAxis(double scale, double color[3])$/;"	f	class:Drawable
DrawAxis	src/GlutViewer.cpp	/^void GlutViewer::DrawAxis(float scale)$/;"	f	class:GlutViewer
DrawBB	include/ar_track_alvar/Draw.h	/^void inline DrawBB(IplImage *image, const std::vector<PointType>& points, CvScalar color, std::string label="")$/;"	f	namespace:alvar
DrawCVEllipse	src/Draw.cpp	/^void DrawCVEllipse(IplImage* image, CvBox2D& ellipse, CvScalar color, bool fill\/*=false*\/, double par)$/;"	f	namespace:alvar
DrawCircles	src/Draw.cpp	/^void DrawCircles(IplImage* image, const CvSeq* contour, int radius, CvScalar color)$/;"	f	namespace:alvar
DrawContent	src/GlutViewer.cpp	/^void GlutViewer::DrawContent()$/;"	f	class:GlutViewer
DrawFloor	src/GlutViewer.cpp	/^void GlutViewer::DrawFloor()$/;"	f	class:GlutViewer
DrawLine	src/Draw.cpp	/^void DrawLine(IplImage* image, const Line line, CvScalar color)$/;"	f	namespace:alvar
DrawLines	include/ar_track_alvar/Draw.h	/^void inline DrawLines(IplImage *image, const std::vector<PointType>& points, CvScalar color, bool loop=true)$/;"	f	namespace:alvar
DrawLines	src/Draw.cpp	/^void DrawLines(IplImage* image, const CvSeq* contour, CvScalar color)$/;"	f	namespace:alvar
DrawPoints	include/ar_track_alvar/Draw.h	/^void inline DrawPoints(IplImage *image, const std::vector<PointType>& points, CvScalar color, int radius=1)$/;"	f	namespace:alvar
DrawPoints	src/Draw.cpp	/^void DrawPoints(IplImage *image, const vector<CvPoint>& points, CvScalar color)$/;"	f	namespace:alvar
DrawPoints	src/Draw.cpp	/^void DrawPoints(IplImage* image, const CvSeq* contour, CvScalar color)$/;"	f	namespace:alvar
DrawTexture	src/Draw.cpp	/^void DrawTexture(IplImage *image, IplImage *texture, $/;"	f	namespace:alvar
DrawVideo	src/GlutViewer.cpp	/^void GlutViewer::DrawVideo()$/;"	f	class:GlutViewer
DrawVr	src/GlutViewer.cpp	/^void GlutViewer::DrawVr()$/;"	f	class:GlutViewer
Drawable	include/ar_track_alvar/GlutViewer.h	/^class Drawable$/;"	c
Drawable	src/GlutViewer.cpp	/^Drawable::Drawable(double _scale, double _r, double _g, double _b) {$/;"	f	class:Drawable
DrawableAdd	src/GlutViewer.cpp	/^void GlutViewer::DrawableAdd(Drawable* item)$/;"	f	class:GlutViewer
DrawableClear	src/GlutViewer.cpp	/^void GlutViewer::DrawableClear() {$/;"	f	class:GlutViewer
EC_H	include/ar_track_alvar/EC.h	25;"	d
EUL	include/ar_track_alvar/Rotation.h	/^	enum RotationType {QUAT, MAT, EUL, ROD};$/;"	e	enum:alvar::Rotation::RotationType
Erase	include/ar_track_alvar/Container3d.h	/^		void Erase(size_t index) {$/;"	f	class:alvar::Container3d
EraseItemsEC	include/ar_track_alvar/EC.h	/^inline int EraseItemsEC(std::map<int,T> &container, F do_erase_test) {$/;"	f	namespace:alvar
EraseNonTracked	include/ar_track_alvar/EC.h	/^	int EraseNonTracked(std::map<int,T> &container, int type_id=-1)$/;"	f	class:alvar::TrackerFeaturesEC
EraseUsingReprojectionError	include/ar_track_alvar/EC.h	/^	int EraseUsingReprojectionError(std::map<int,T> &container, float reprojection_error_limit, int type_id=-1, Pose *pose = 0)$/;"	f	class:alvar::CameraEC
Est	src/MultiMarkerBundle.cpp	/^void Est(CvMat* state, CvMat* estimation, void *param)$/;"	f	namespace:alvar
Estimate	src/SampleOptimization.cpp	/^void Estimate(CvMat* state, CvMat *projection, void *param) {$/;"	f
EstimateCallback	include/ar_track_alvar/Optimization.h	/^	typedef void (*EstimateCallback)(CvMat* state, CvMat *projection, void *param);$/;"	t	class:alvar::Optimization
EulToQuat	src/Rotation.cpp	/^void Rotation::EulToQuat(const double *eul, double *quat)$/;"	f	class:alvar::Rotation
Exit	src/GlutViewer.cpp	/^void GlutViewer::Exit()$/;"	f	class:GlutViewer
ExternalContainer	include/ar_track_alvar/EC.h	/^	ExternalContainer() : type_id(-1), has_p2d(false), has_p3d(false) {}$/;"	f	class:alvar::ExternalContainer
ExternalContainer	include/ar_track_alvar/EC.h	/^	ExternalContainer(const ExternalContainer &c) {$/;"	f	class:alvar::ExternalContainer
ExternalContainer	include/ar_track_alvar/EC.h	/^class ExternalContainer {$/;"	c	namespace:alvar
ExternalContainerMap	include/ar_track_alvar/FernPoseEstimator.h	/^    typedef std::map<int, alvar::ExternalContainer> ExternalContainerMap;$/;"	t	class:alvar::FernPoseEstimator
F	include/ar_track_alvar/Kalman.h	/^	CvMat *F;$/;"	m	class:alvar::KalmanCore
FERNIMAGEDETECTOR_H	include/ar_track_alvar/FernImageDetector.h	25;"	d
FERNPOSEESTIMATOR_H	include/ar_track_alvar/FernPoseEstimator.h	25;"	d
FILEFORMATUTILS_H	include/ar_track_alvar/FileFormatUtils.h	25;"	d
FILEFORMAT_H	include/ar_track_alvar/FileFormat.h	25;"	d
FILE_FORMAT	include/ar_track_alvar/FileFormat.h	/^	} FILE_FORMAT;$/;"	t	namespace:alvar	typeref:enum:alvar::__anon4
FILE_FORMAT_DEFAULT	include/ar_track_alvar/FileFormat.h	/^		FILE_FORMAT_DEFAULT,$/;"	e	enum:alvar::__anon4
FILE_FORMAT_OPENCV	include/ar_track_alvar/FileFormat.h	/^		FILE_FORMAT_OPENCV,$/;"	e	enum:alvar::__anon4
FILE_FORMAT_TEXT	include/ar_track_alvar/FileFormat.h	/^		FILE_FORMAT_TEXT,$/;"	e	enum:alvar::__anon4
FILE_FORMAT_XML	include/ar_track_alvar/FileFormat.h	/^		FILE_FORMAT_XML$/;"	e	enum:alvar::__anon4
FILTER_H	include/ar_track_alvar/Filter.h	25;"	d
F_trans	include/ar_track_alvar/Kalman.h	/^	CvMat *F_trans;$/;"	m	class:alvar::KalmanCore
Feature	include/ar_track_alvar/SfM.h	/^		Feature() : ExternalContainer() {$/;"	f	class:alvar::SimpleSfM::Feature
Feature	include/ar_track_alvar/SfM.h	/^		Feature(const Feature &c) : ExternalContainer(c) {$/;"	f	class:alvar::SimpleSfM::Feature
Feature	include/ar_track_alvar/SfM.h	/^	class Feature : public ExternalContainer {$/;"	c	class:alvar::SimpleSfM
Feature	include/ar_track_alvar/TrackerOrientation.h	/^		Feature()$/;"	f	struct:alvar::TrackerOrientation::Feature
Feature	include/ar_track_alvar/TrackerOrientation.h	/^		Feature(double vx, double vy)$/;"	f	struct:alvar::TrackerOrientation::Feature
Feature	include/ar_track_alvar/TrackerOrientation.h	/^	struct Feature$/;"	s	class:alvar::TrackerOrientation
FernClassifierWrapper	include/ar_track_alvar/FernImageDetector.h	/^class FernClassifierWrapper : public FernClassifier$/;"	c	namespace:alvar
FernClassifierWrapper	src/FernImageDetector.cpp	/^FernClassifierWrapper::FernClassifierWrapper()$/;"	f	class:alvar::FernClassifierWrapper
FernClassifierWrapper	src/FernImageDetector.cpp	/^FernClassifierWrapper::FernClassifierWrapper(const FileNode &fileNode)$/;"	f	class:alvar::FernClassifierWrapper
FernClassifierWrapper	src/FernImageDetector.cpp	/^FernClassifierWrapper::FernClassifierWrapper(const vector<vector<Point2f> > &points,$/;"	f	class:alvar::FernClassifierWrapper
FernImageDetector	include/ar_track_alvar/FernImageDetector.h	/^class ALVAR_EXPORT FernImageDetector$/;"	c	namespace:alvar
FernImageDetector	src/FernImageDetector.cpp	/^FernImageDetector::FernImageDetector(const bool visualize)$/;"	f	class:alvar::FernImageDetector
FernPoseEstimator	include/ar_track_alvar/FernPoseEstimator.h	/^class ALVAR_EXPORT FernPoseEstimator$/;"	c	namespace:alvar
FernPoseEstimator	src/FernPoseEstimator.cpp	/^FernPoseEstimator::FernPoseEstimator()$/;"	f	class:alvar::FernPoseEstimator
FileFormatUtils	include/ar_track_alvar/FileFormatUtils.h	/^	class ALVAR_EXPORT FileFormatUtils {$/;"	c	namespace:alvar
Filter	include/ar_track_alvar/Filter.h	/^class ALVAR_EXPORT Filter {$/;"	c	namespace:alvar
Filter	src/Filter.cpp	/^Filter::Filter() { $/;"	f	class:alvar::Filter
FilterArray	include/ar_track_alvar/Filter.h	/^	FilterArray(int size) {$/;"	f	class:alvar::FilterArray
FilterArray	include/ar_track_alvar/Filter.h	/^class ALVAR_EXPORT FilterArray {$/;"	c	namespace:alvar
FilterArray	src/Filter.cpp	/^template class ALVAR_EXPORT alvar::FilterArray<alvar::FilterAverage>;$/;"	m	class:alvar	typeref:class:alvar::	file:
FilterArray	src/Filter.cpp	/^template class ALVAR_EXPORT alvar::FilterArray<alvar::FilterDoubleExponentialSmoothing>;$/;"	m	class:alvar	typeref:class:alvar::	file:
FilterArray	src/Filter.cpp	/^template class ALVAR_EXPORT alvar::FilterArray<alvar::FilterMedian>;$/;"	m	class:alvar	typeref:class:alvar::	file:
FilterArray	src/Filter.cpp	/^template class ALVAR_EXPORT alvar::FilterArray<alvar::FilterRunningAverage>;$/;"	m	class:alvar	typeref:class:alvar::	file:
FilterAverage	include/ar_track_alvar/Filter.h	/^	FilterAverage(int size=3) { setWindowSize(size); }$/;"	f	class:alvar::FilterAverage
FilterAverage	include/ar_track_alvar/Filter.h	/^class ALVAR_EXPORT FilterAverage : public Filter {$/;"	c	namespace:alvar
FilterDoubleExponentialSmoothing	include/ar_track_alvar/Filter.h	/^	FilterDoubleExponentialSmoothing(double _alpha=0.5, double _gamma=1.0) : FilterRunningAverage(_alpha) {$/;"	f	class:alvar::FilterDoubleExponentialSmoothing
FilterDoubleExponentialSmoothing	include/ar_track_alvar/Filter.h	/^class ALVAR_EXPORT FilterDoubleExponentialSmoothing : public FilterRunningAverage {$/;"	c	namespace:alvar
FilterMedian	include/ar_track_alvar/Filter.h	/^	FilterMedian(int size=3) { setWindowSize(size); }$/;"	f	class:alvar::FilterMedian
FilterMedian	include/ar_track_alvar/Filter.h	/^class ALVAR_EXPORT FilterMedian : public FilterAverage {$/;"	c	namespace:alvar
FilterRunningAverage	include/ar_track_alvar/Filter.h	/^	FilterRunningAverage(double _alpha=0.5) { breset=true; setAlpha(_alpha); }$/;"	f	class:alvar::FilterRunningAverage
FilterRunningAverage	include/ar_track_alvar/Filter.h	/^class ALVAR_EXPORT FilterRunningAverage : public Filter {$/;"	c	namespace:alvar
Find	src/Camera.cpp	/^void Homography::Find(const vector<PointDouble  >& pw, const vector<PointDouble  >& pi)$/;"	f	class:alvar::Homography
FitCVEllipse	src/Util.cpp	/^void FitCVEllipse(const vector<PointDouble> &points, CvBox2D& ellipse_box)$/;"	f	namespace:alvar
FitLineGray	src/ConnectedComponents.cpp	/^void FitLineGray(CvMat *line_data, float params[4], IplImage *gray) {$/;"	f	namespace:alvar
FitLines	src/Line.cpp	/^int FitLines(vector<Line> &lines,$/;"	f	namespace:alvar
FitLines	src/Line.cpp	/^void FitLines(vector<Line>& lines)$/;"	f	namespace:alvar
FlyCapture2	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	/^namespace FlyCapture2 {$/;"	n
GAUSSNEWTON	include/ar_track_alvar/Optimization.h	/^		GAUSSNEWTON,$/;"	e	enum:alvar::Optimization::OptimizeMethod
GHOST_MARKER	nodes/FindMarkerBundles.cpp	73;"	d	file:
GHOST_MARKER	nodes/FindMarkerBundlesNoKinect.cpp	55;"	d	file:
GHOST_MARKER	nodes/TrainMarkerBundle.cpp	56;"	d	file:
GLUT_DISABLE_ATEXIT_HACK	src/SampleMarkerHide.cpp	8;"	d	file:
Get3dOnDepth	src/EC.cpp	/^void CameraEC::Get3dOnDepth(const Pose *pose, CvPoint2D32f p2d, float depth, CvPoint3D32f &p3d)$/;"	f	class:alvar::CameraEC
Get3dOnPlane	src/EC.cpp	/^void CameraEC::Get3dOnPlane(const Pose *pose, CvPoint2D32f p2d, CvPoint3D32f &p3d) {$/;"	f	class:alvar::CameraEC
GetAve	src/IntegralImage.cpp	/^double IntegralImage::GetAve(CvRect &rect) {$/;"	f	class:alvar::IntegralImage
GetAveGradient	src/IntegralImage.cpp	/^void IntegralGradient::GetAveGradient(CvRect &rect, double *dirx, double *diry) {$/;"	f	class:alvar::IntegralGradient
GetBits	include/ar_track_alvar/Bitset.h	/^	inline std::deque<bool>& GetBits()$/;"	f	class:alvar::Bitset
GetCamera	src/SfM.cpp	/^CameraEC *SimpleSfM::GetCamera() { return &cam; }$/;"	f	class:alvar::SimpleSfM
GetContent	include/ar_track_alvar/Marker.h	/^    CvMat *GetContent() const {$/;"	f	class:alvar::Marker
GetErr	include/ar_track_alvar/Optimization.h	/^	CvMat *GetErr() { return err; }$/;"	f	class:alvar::Optimization
GetError	include/ar_track_alvar/Marker.h	/^    double GetError(int errors = (MARGIN_ERROR | DECODE_ERROR)) const {$/;"	f	class:alvar::Marker
GetEuler	src/Rotation.cpp	/^void Rotation::GetEuler(CvMat *mat) const$/;"	f	class:alvar::Rotation
GetFovX	include/ar_track_alvar/Camera.h	/^	double GetFovX() {$/;"	f	class:alvar::Camera
GetFovY	include/ar_track_alvar/Camera.h	/^	double GetFovY() {$/;"	f	class:alvar::Camera
GetGradient	src/IntegralImage.cpp	/^void IntegralGradient::GetGradient(CvRect &rect, double *dirx, double *diry, int *count \/*=0*\/) {$/;"	f	class:alvar::IntegralGradient
GetId	include/ar_track_alvar/EC.h	/^	int GetId(int marker_id, int corner_id, int first_id=0, int last_id=65535) {$/;"	f	class:alvar::MarkerDetectorEC
GetId	include/ar_track_alvar/Marker.h	/^    unsigned long GetId() const { return data.id; }$/;"	f	class:alvar::MarkerData
GetId	include/ar_track_alvar/Marker.h	/^    unsigned long GetId() const { return id; }$/;"	f	class:alvar::MarkerArtoolkit
GetId	include/ar_track_alvar/Marker.h	/^    virtual unsigned long GetId() const { return 0; }$/;"	f	class:alvar::Marker
GetId	include/ar_track_alvar/MultiMarkerInitializer.h	/^		unsigned long GetId() const { return _id; }$/;"	f	class:alvar::MultiMarkerInitializer::MarkerMeasurement
GetImage	src/CvTestbed.cpp	/^IplImage *CvTestbed::GetImage(const char *title) {$/;"	f	class:CvTestbed
GetImage	src/CvTestbed.cpp	/^IplImage *CvTestbed::GetImage(size_t index) {$/;"	f	class:CvTestbed
GetImageIndex	src/CvTestbed.cpp	/^size_t CvTestbed::GetImageIndex(const char *title) {$/;"	f	class:CvTestbed
GetIndex	include/ar_track_alvar/Container3d.h	/^				size_t GetIndex() { return *iter; }$/;"	f	class:alvar::Container3d::Iterator
GetIndex	include/ar_track_alvar/Container3d.h	/^		size_t GetIndex(Iterator &iter) {$/;"	f	class:alvar::Container3d
GetIndex	include/ar_track_alvar/Container3d.h	/^		size_t GetIndex(T *p) {$/;"	f	class:alvar::Container3d
GetMargin	include/ar_track_alvar/Marker.h	/^    double GetMargin() const { return margin; }$/;"	f	class:alvar::Marker
GetMarkerEdgeLength	include/ar_track_alvar/Marker.h	/^    double GetMarkerEdgeLength() const { return edge_length; }$/;"	f	class:alvar::Marker
GetMarkerPoses	nodes/IndividualMarkers.cpp	/^void GetMarkerPoses(IplImage *image, ARCloud &cloud) {$/;"	f
GetMatrix	src/Pose.cpp	/^void Pose::GetMatrix(CvMat *mat) const$/;"	f	class:alvar::Pose
GetMatrix	src/Rotation.cpp	/^void Rotation::GetMatrix(CvMat *mat) const$/;"	f	class:alvar::Rotation
GetMatrixGL	src/Pose.cpp	/^void Pose::GetMatrixGL(double gl[16], bool mirror)$/;"	f	class:alvar::Pose
GetMax	src/Util.cpp	/^int Histogram::GetMax(double *dim0, double *dim1, double *dim2) {$/;"	f	class:alvar::Histogram
GetMax	src/Util.cpp	/^int HistogramSubpixel::GetMax(double *dim0, double *dim1, double *dim2) {$/;"	f	class:alvar::HistogramSubpixel
GetMultiMarkerPose	nodes/TrainMarkerBundle.cpp	/^double GetMultiMarkerPose(IplImage *image, Pose &pose) {$/;"	f
GetMultiMarkerPose	src/SampleMultiMarkerBundle.cpp	/^double GetMultiMarkerPose(IplImage *image, Camera *cam, Pose &pose) {$/;"	f
GetMultiMarkerPoses	nodes/FindMarkerBundles.cpp	/^void GetMultiMarkerPoses(IplImage *image, ARCloud &cloud) {$/;"	f
GetMultiMarkerPoses	nodes/FindMarkerBundlesNoKinect.cpp	/^void GetMultiMarkerPoses(IplImage *image) {$/;"	f
GetOpenglProjectionMatrix	src/Camera.cpp	/^void Camera::GetOpenglProjectionMatrix(double proj_matrix[16], const int width, const int height, const float far_clip \/*= 1000.0f*\/, const float near_clip \/*= 0.1f*\/) {$/;"	f	class:alvar::Camera
GetOptimizationError	include/ar_track_alvar/MultiMarkerBundle.h	/^	double GetOptimizationError() { return optimization_error; }$/;"	f	class:alvar::MultiMarkerBundle
GetOptimizationKeyframes	include/ar_track_alvar/MultiMarkerBundle.h	/^	int GetOptimizationKeyframes() { return optimization_keyframes; }$/;"	f	class:alvar::MultiMarkerBundle
GetOptimizationMarkers	include/ar_track_alvar/MultiMarkerBundle.h	/^	int GetOptimizationMarkers() { return optimization_markers; }$/;"	f	class:alvar::MultiMarkerBundle
GetOptimizing	include/ar_track_alvar/MultiMarkerBundle.h	/^	bool GetOptimizing() { return optimizing; }$/;"	f	class:alvar::MultiMarkerBundle
GetOrigo	src/EC.cpp	/^void GetOrigo(Pose* pose, CvMat* O)$/;"	f	namespace:alvar
GetPointOnLine	src/EC.cpp	/^void GetPointOnLine(const Pose* pose, Camera *camera, const CvPoint2D32f *u, CvMat* P)$/;"	f	namespace:alvar
GetPose	include/ar_track_alvar/MultiMarker.h	/^	double GetPose(const std::vector<M, Eigen::aligned_allocator<M> >* markers, Camera* cam, Pose& pose, IplImage* image = 0)$/;"	f	class:alvar::MultiMarker
GetPose	include/ar_track_alvar/TrackerOrientation.h	/^	void GetPose(double gl_mat[16])	{$/;"	f	class:alvar::TrackerOrientation
GetPose	src/SfM.cpp	/^Pose *SimpleSfM::GetPose() { return &pose; }$/;"	f	class:alvar::SimpleSfM
GetQuaternion	src/Rotation.cpp	/^void Rotation::GetQuaternion(CvMat *mat) const$/;"	f	class:alvar::Rotation
GetRes	include/ar_track_alvar/Marker.h	/^    int GetRes() const { return res; }$/;"	f	class:alvar::Marker
GetRodriques	src/Rotation.cpp	/^void Rotation::GetRodriques(CvMat *mat) const$/;"	f	class:alvar::Rotation
GetSize	include/ar_track_alvar/Filter.h	/^	size_t GetSize() {$/;"	f	class:alvar::FilterArray
GetSubimage	src/IntegralImage.cpp	/^void IntegralImage::GetSubimage(const CvRect &rect, IplImage *sub) {$/;"	f	class:alvar::IntegralImage
GetSum	src/IntegralImage.cpp	/^double IntegralImage::GetSum(CvRect &rect, int *count \/*=0*\/) {$/;"	f	class:alvar::IntegralImage
GetTranslation	src/Pose.cpp	/^void Pose::GetTranslation( CvMat *tra) const{$/;"	f	class:alvar::Pose
GetXOffset	src/GlutViewer.cpp	/^double GlutViewer::GetXOffset()$/;"	f	class:GlutViewer
GetYOffset	src/GlutViewer.cpp	/^double GlutViewer::GetYOffset()$/;"	f	class:GlutViewer
GlutViewer	include/ar_track_alvar/GlutViewer.h	/^namespace GlutViewer$/;"	n
H	include/ar_track_alvar/Camera.h	/^	CvMat H;$/;"	m	struct:alvar::Homography
H	include/ar_track_alvar/Kalman.h	/^	CvMat *H;$/;"	m	class:alvar::KalmanSensorCore
HEADER_SIZE	src/Marker.cpp	37;"	d	file:
H_data	include/ar_track_alvar/Camera.h	/^	double H_data[3][3];$/;"	m	struct:alvar::Homography
H_trans	include/ar_track_alvar/Kalman.h	/^	CvMat *H_trans;$/;"	m	class:alvar::KalmanSensorCore
Histogram	include/ar_track_alvar/Util.h	/^class ALVAR_EXPORT Histogram {$/;"	c	namespace:alvar
HistogramSubpixel	include/ar_track_alvar/Util.h	/^class ALVAR_EXPORT HistogramSubpixel : public Histogram {$/;"	c	namespace:alvar
Homography	include/ar_track_alvar/Camera.h	/^struct ALVAR_EXPORT Homography {$/;"	s	namespace:alvar
Homography	src/Camera.cpp	/^Homography::Homography() {$/;"	f	class:alvar::Homography
INTEGRAL_IMAGE_H	include/ar_track_alvar/IntegralImage.h	25;"	d
IS_INITIAL	include/ar_track_alvar/TrackerOrientation.h	/^		enum {NONE=0, USE_FOR_POSE, IS_OUTLIER, IS_INITIAL} status3D;$/;"	e	enum:alvar::TrackerOrientation::Feature::__anon3
IS_OUTLIER	include/ar_track_alvar/TrackerOrientation.h	/^		enum {NONE=0, USE_FOR_POSE, IS_OUTLIER, IS_INITIAL} status3D;$/;"	e	enum:alvar::TrackerOrientation::Feature::__anon3
IS_TRACKED	include/ar_track_alvar/TrackerOrientation.h	/^		enum {NOT_TRACKED=0, IS_TRACKED} status2D;$/;"	e	enum:alvar::TrackerOrientation::Feature::__anon2
Image	include/ar_track_alvar/CvTestbed.h	/^		Image(IplImage *_ipl, std::string _title, bool _visible, bool _release_at_exit)$/;"	f	struct:CvTestbed::Image
Image	include/ar_track_alvar/CvTestbed.h	/^	struct Image {$/;"	s	class:CvTestbed
ImagePointVector	include/ar_track_alvar/FernPoseEstimator.h	/^    typedef std::vector<CvPoint2D64f> ImagePointVector;$/;"	t	class:alvar::FernPoseEstimator
Inc	src/Util.cpp	/^void Histogram::Inc(double dim0, double dim1, double dim2) {$/;"	f	class:alvar::Histogram
Inc	src/Util.cpp	/^void HistogramSubpixel::Inc(double dim0, double dim1, double dim2) {$/;"	f	class:alvar::HistogramSubpixel
Index	include/ar_track_alvar/Util.h	/^struct ALVAR_EXPORT Index {$/;"	s	namespace:alvar
Index	src/Util.cpp	/^Index::Index(int a) { val.push_back(a); }$/;"	f	class:alvar::Index
Index	src/Util.cpp	/^Index::Index(int a, int b) {$/;"	f	class:alvar::Index
Index	src/Util.cpp	/^Index::Index(int a, int b, int c) { $/;"	f	class:alvar::Index
IndexRansac	include/ar_track_alvar/Ransac.h	/^    IndexRansac(int min_params, int max_params) $/;"	f	class:alvar::IndexRansac
IndexRansac	include/ar_track_alvar/Ransac.h	/^    class IndexRansac : public RansacImpl {$/;"	c	namespace:alvar
InferCorners	nodes/FindMarkerBundles.cpp	/^int InferCorners(const ARCloud &cloud, MultiMarkerBundle &master, ARCloud &bund_corners){$/;"	f
Init	src/Kalman.cpp	/^void KalmanVisualize::Init() {$/;"	f	class:alvar::KalmanVisualize
Initialize	src/MultiMarkerInitializer.cpp	/^int MultiMarkerInitializer::Initialize(Camera* cam) {$/;"	f	class:alvar::MultiMarkerInitializer
Input	src/Util.cpp	/^bool Serialization::Input() {$/;"	f	class:alvar::Serialization
Instance	src/CvTestbed.cpp	/^CvTestbed& CvTestbed::Instance() {$/;"	f	class:CvTestbed
IntIndex	include/ar_track_alvar/IntegralImage.h	/^class ALVAR_EXPORT IntIndex {$/;"	c	namespace:alvar
IntIndex	src/IntegralImage.cpp	/^IntIndex::IntIndex(int _res, int _steps) {$/;"	f	class:alvar::IntIndex
IntegralGradient	include/ar_track_alvar/IntegralImage.h	/^class ALVAR_EXPORT IntegralGradient {$/;"	c	namespace:alvar
IntegralGradient	src/IntegralImage.cpp	/^IntegralGradient::IntegralGradient() {$/;"	f	class:alvar::IntegralGradient
IntegralImage	include/ar_track_alvar/IntegralImage.h	/^class ALVAR_EXPORT IntegralImage {$/;"	c	namespace:alvar
IntegralImage	src/IntegralImage.cpp	/^IntegralImage::IntegralImage() {$/;"	f	class:alvar::IntegralImage
Intersection	src/Line.cpp	/^PointDouble Intersection(const Line& l1, const Line& l2)$/;"	f	namespace:alvar
Invert	src/Pose.cpp	/^void Pose::Invert()$/;"	f	class:alvar::Pose
IsInput	include/ar_track_alvar/Util.h	/^	bool IsInput() { return input; }$/;"	f	class:alvar::Serialization
IsValidMarker	src/MultiMarker.cpp	/^bool MultiMarker::IsValidMarker(int marker_id) {$/;"	f	class:alvar::MultiMarker
Iterator	include/ar_track_alvar/Container3d.h	/^				Iterator() {}$/;"	f	class:alvar::Container3d::Iterator
Iterator	include/ar_track_alvar/Container3d.h	/^				Iterator(Container3d<T> *_container, std::vector<size_t>::iterator _iter) : container(_container), iter(_iter) {}$/;"	f	class:alvar::Container3d::Iterator
Iterator	include/ar_track_alvar/Container3d.h	/^		class Iterator : public std::iterator<std::forward_iterator_tag, node_type>$/;"	c	class:alvar::Container3d
J	include/ar_track_alvar/Optimization.h	/^	CvMat *J;$/;"	m	class:alvar::Optimization
JtJ	include/ar_track_alvar/Optimization.h	/^	CvMat *JtJ;$/;"	m	class:alvar::Optimization
K	include/ar_track_alvar/Kalman.h	/^	CvMat *K;$/;"	m	class:alvar::KalmanSensorCore
KALMAN_H	include/ar_track_alvar/Kalman.h	25;"	d
Kalman	include/ar_track_alvar/Kalman.h	/^class ALVAR_EXPORT Kalman : public KalmanCore {$/;"	c	namespace:alvar
Kalman	src/Kalman.cpp	/^Kalman::Kalman(int _n) : KalmanCore(_n) {$/;"	f	class:alvar::Kalman
KalmanCore	include/ar_track_alvar/Kalman.h	/^class ALVAR_EXPORT KalmanCore {$/;"	c	namespace:alvar
KalmanCore	src/Kalman.cpp	/^KalmanCore::KalmanCore(const KalmanCore &s) {$/;"	f	class:alvar::KalmanCore
KalmanCore	src/Kalman.cpp	/^KalmanCore::KalmanCore(int _n) {$/;"	f	class:alvar::KalmanCore
KalmanEkf	include/ar_track_alvar/Kalman.h	/^class ALVAR_EXPORT KalmanEkf : public Kalman {$/;"	c	namespace:alvar
KalmanEkf	src/Kalman.cpp	/^KalmanEkf::KalmanEkf(int _n) : Kalman(_n) {$/;"	f	class:alvar::KalmanEkf
KalmanOwn	src/SampleFilter.cpp	/^    KalmanOwn(int _n) : KalmanEkf(_n) {}$/;"	f	class:KalmanOwn
KalmanOwn	src/SampleFilter.cpp	/^class KalmanOwn : public KalmanEkf {$/;"	c	file:
KalmanSensor	include/ar_track_alvar/Kalman.h	/^class ALVAR_EXPORT KalmanSensor : public KalmanSensorCore {$/;"	c	namespace:alvar
KalmanSensor	src/Kalman.cpp	/^KalmanSensor::KalmanSensor(const KalmanSensor &k) : KalmanSensorCore(k) {$/;"	f	class:alvar::KalmanSensor
KalmanSensor	src/Kalman.cpp	/^KalmanSensor::KalmanSensor(int n, int _m) : KalmanSensorCore(n, _m) {$/;"	f	class:alvar::KalmanSensor
KalmanSensorCore	include/ar_track_alvar/Kalman.h	/^class ALVAR_EXPORT KalmanSensorCore {$/;"	c	namespace:alvar
KalmanSensorCore	src/Kalman.cpp	/^KalmanSensorCore::KalmanSensorCore(const KalmanSensorCore &k) {$/;"	f	class:alvar::KalmanSensorCore
KalmanSensorCore	src/Kalman.cpp	/^KalmanSensorCore::KalmanSensorCore(int _n, int _m) {$/;"	f	class:alvar::KalmanSensorCore
KalmanSensorEkf	include/ar_track_alvar/Kalman.h	/^class ALVAR_EXPORT KalmanSensorEkf : public KalmanSensor {$/;"	c	namespace:alvar
KalmanSensorEkf	src/Kalman.cpp	/^KalmanSensorEkf::KalmanSensorEkf(const KalmanSensorEkf &k) : KalmanSensor(k) {$/;"	f	class:alvar::KalmanSensorEkf
KalmanSensorEkf	src/Kalman.cpp	/^KalmanSensorEkf::KalmanSensorEkf(int _n, int _m) : KalmanSensor(_n, _m) {$/;"	f	class:alvar::KalmanSensorEkf
KalmanSensorOwn	src/SampleFilter.cpp	/^    KalmanSensorOwn(int _n, int _m) : KalmanSensorEkf(_n, _m) {}$/;"	f	class:KalmanSensorOwn
KalmanSensorOwn	src/SampleFilter.cpp	/^class KalmanSensorOwn : public KalmanSensorEkf {$/;"	c	file:
KalmanVisualize	include/ar_track_alvar/Kalman.h	/^class ALVAR_EXPORT KalmanVisualize {$/;"	c	namespace:alvar
KalmanVisualize	src/Kalman.cpp	/^KalmanVisualize::KalmanVisualize(Kalman *_kalman, KalmanSensor *_sensor) {$/;"	f	class:alvar::KalmanVisualize
KalmanVisualize	src/Kalman.cpp	/^KalmanVisualize::KalmanVisualize(KalmanCore *_kalman, KalmanSensorCore *_sensor) {$/;"	f	class:alvar::KalmanVisualize
KeyCallback	src/GlutViewer.cpp	/^void GlutViewer::KeyCallback(int key, int x, int y)$/;"	f	class:GlutViewer
LEVENBERGMARQUARDT	include/ar_track_alvar/Optimization.h	/^		LEVENBERGMARQUARDT,$/;"	e	enum:alvar::Optimization::OptimizeMethod
LOCK_H	include/ar_track_alvar/Lock.h	25;"	d
LabelImage	src/ConnectedComponents.cpp	/^CvSeq* LabelingCvSeq::LabelImage(IplImage* image, int min_size, bool approx)$/;"	f	class:alvar::LabelingCvSeq
LabelSquares	src/ConnectedComponents.cpp	/^void LabelingCvSeq::LabelSquares(IplImage* image, bool visualize)$/;"	f	class:alvar::LabelingCvSeq
Labeling	include/ar_track_alvar/ConnectedComponents.h	/^class ALVAR_EXPORT Labeling$/;"	c	namespace:alvar
Labeling	src/ConnectedComponents.cpp	/^Labeling::Labeling()$/;"	f	class:alvar::Labeling
LabelingCvSeq	include/ar_track_alvar/ConnectedComponents.h	/^class ALVAR_EXPORT LabelingCvSeq : public Labeling$/;"	c	namespace:alvar
LabelingCvSeq	src/ConnectedComponents.cpp	/^LabelingCvSeq::LabelingCvSeq() : _n_blobs(0), _min_edge(20), _min_area(25)$/;"	f	class:alvar::LabelingCvSeq
LabelingMethod	include/ar_track_alvar/ConnectedComponents.h	/^enum ALVAR_EXPORT LabelingMethod$/;"	g	namespace:alvar
Length	src/Bitset.cpp	/^int Bitset::Length() {$/;"	f	class:alvar::Bitset
Limit	include/ar_track_alvar/Container3d.h	/^		int Limit(Test test) {$/;"	f	class:alvar::Container3d
Limit	src/Util.cpp	/^double Limit(double val, double min_val, double max_val) {$/;"	f	namespace:alvar
Line	include/ar_track_alvar/Line.h	/^	Line()$/;"	f	struct:alvar::Line
Line	include/ar_track_alvar/Line.h	/^struct ALVAR_EXPORT Line$/;"	s	namespace:alvar
Line	src/Line.cpp	/^Line::Line(float params[4])$/;"	f	class:alvar::Line
Load	include/ar_track_alvar/EC.h	/^	bool Load(std::map<int,T> &container, const char* fname, FILE_FORMAT format = FILE_FORMAT_DEFAULT, int type_id=0, int first_id=0,int last_id=65535) {$/;"	f	class:alvar::MultiMarkerEC
Load	src/MultiMarker.cpp	/^bool MultiMarker::Load(const char* fname, FILE_FORMAT format) {$/;"	f	class:alvar::MultiMarker
LoadCalibOpenCV	src/Camera.cpp	/^bool Camera::LoadCalibOpenCV(const char *calibfile) {$/;"	f	class:alvar::Camera
LoadCalibXML	src/Camera.cpp	/^bool Camera::LoadCalibXML(const char *calibfile) {$/;"	f	class:alvar::Camera
LoadText	src/MultiMarker.cpp	/^bool MultiMarker::LoadText(const char* fname) {$/;"	f	class:alvar::MultiMarker
LoadXML	src/MultiMarker.cpp	/^bool MultiMarker::LoadXML(const char* fname) {$/;"	f	class:alvar::MultiMarker
Lock	include/ar_track_alvar/Lock.h	/^    Lock(Mutex *mutex)$/;"	f	class:alvar::Lock
Lock	include/ar_track_alvar/Lock.h	/^class ALVAR_EXPORT Lock : private Uncopyable$/;"	c	namespace:alvar
MAIN_MARKER	nodes/FindMarkerBundles.cpp	71;"	d	file:
MAIN_MARKER	nodes/FindMarkerBundlesNoKinect.cpp	53;"	d	file:
MAIN_MARKER	nodes/TrainMarkerBundle.cpp	54;"	d	file:
MARGIN_ERROR	include/ar_track_alvar/Marker.h	/^    static const int MARGIN_ERROR=1;$/;"	m	class:alvar::Marker
MARKER_CONTENT_TYPE_FILE	include/ar_track_alvar/Marker.h	/^      MARKER_CONTENT_TYPE_FILE,$/;"	e	enum:alvar::MarkerData::MarkerContentType
MARKER_CONTENT_TYPE_HTTP	include/ar_track_alvar/Marker.h	/^      MARKER_CONTENT_TYPE_HTTP$/;"	e	enum:alvar::MarkerData::MarkerContentType
MARKER_CONTENT_TYPE_NUMBER	include/ar_track_alvar/Marker.h	/^      MARKER_CONTENT_TYPE_NUMBER,$/;"	e	enum:alvar::MarkerData::MarkerContentType
MARKER_CONTENT_TYPE_STRING	include/ar_track_alvar/Marker.h	/^      MARKER_CONTENT_TYPE_STRING,$/;"	e	enum:alvar::MarkerData::MarkerContentType
MARKER_DETECTOR_H	include/ar_track_alvar/MarkerDetector.h	25;"	d
MARKER_H	include/ar_track_alvar/Marker.h	25;"	d
MAT	include/ar_track_alvar/Rotation.h	/^	enum RotationType {QUAT, MAT, EUL, ROD};$/;"	e	enum:alvar::Rotation::RotationType
MAX_MARKER_STRING_LEN	include/ar_track_alvar/Marker.h	/^    static const int MAX_MARKER_STRING_LEN=2048;$/;"	m	class:alvar::MarkerData
MULTIMARKERBUNDLE_H	include/ar_track_alvar/MultiMarkerBundle.h	25;"	d
MULTIMARKERFILTERED_H	include/ar_track_alvar/MultiMarkerFiltered.h	25;"	d
MULTIMARKERINITIALIZER_H	include/ar_track_alvar/MultiMarkerInitializer.h	25;"	d
MULTIMARKER_H	include/ar_track_alvar/MultiMarker.h	25;"	d
MUTEX_H	include/ar_track_alvar/Mutex.h	25;"	d
MUTEX_PRIVATE_H	include/ar_track_alvar/Mutex_private.h	25;"	d
Marker	include/ar_track_alvar/Marker.h	/^  class ALVAR_EXPORT Marker$/;"	c	namespace:alvar
Marker	src/Marker.cpp	/^Marker::Marker(const Marker& m) {$/;"	f	class:alvar::Marker
Marker	src/Marker.cpp	/^Marker::Marker(double _edge_length, int _res, double _margin)$/;"	f	class:alvar::Marker
MarkerArtoolkit	include/ar_track_alvar/Marker.h	/^  MarkerArtoolkit(double _edge_length = 0, int _res = 0, double _margin = 0) : $/;"	f	class:alvar::MarkerArtoolkit
MarkerArtoolkit	include/ar_track_alvar/Marker.h	/^  class ALVAR_EXPORT MarkerArtoolkit : public Marker$/;"	c	namespace:alvar
MarkerContentType	include/ar_track_alvar/Marker.h	/^    enum MarkerContentType {$/;"	g	class:alvar::MarkerData
MarkerData	include/ar_track_alvar/Marker.h	/^  MarkerData(double _edge_length = 0, int _res = 0, double _margin = 0) : $/;"	f	class:alvar::MarkerData
MarkerData	include/ar_track_alvar/Marker.h	/^  class ALVAR_EXPORT MarkerData : public Marker$/;"	c	namespace:alvar
MarkerDetector	include/ar_track_alvar/MarkerDetector.h	/^  MarkerDetector() : MarkerDetectorImpl() {$/;"	f	class:alvar::MarkerDetector
MarkerDetector	include/ar_track_alvar/MarkerDetector.h	/^class ALVAR_EXPORT MarkerDetector : public MarkerDetectorImpl$/;"	c	namespace:alvar
MarkerDetector	src/MarkerDetector.cpp	/^template class ALVAR_EXPORT alvar::MarkerDetector<alvar::Marker>;$/;"	m	class:alvar	typeref:class:alvar::	file:
MarkerDetector	src/MarkerDetector.cpp	/^template class ALVAR_EXPORT alvar::MarkerDetector<alvar::MarkerArtoolkit>;$/;"	m	class:alvar	typeref:class:alvar::	file:
MarkerDetector	src/MarkerDetector.cpp	/^template class ALVAR_EXPORT alvar::MarkerDetector<alvar::MarkerData>;$/;"	m	class:alvar	typeref:class:alvar::	file:
MarkerDetectorEC	include/ar_track_alvar/EC.h	/^class MarkerDetectorEC : public MarkerDetector<M> {$/;"	c	namespace:alvar
MarkerDetectorImpl	include/ar_track_alvar/MarkerDetector.h	/^class ALVAR_EXPORT MarkerDetectorImpl {$/;"	c	namespace:alvar
MarkerDetectorImpl	src/MarkerDetector.cpp	/^	MarkerDetectorImpl::MarkerDetectorImpl() {$/;"	f	class:alvar::MarkerDetectorImpl
MarkerIdToContainerId	include/ar_track_alvar/EC.h	/^inline int MarkerIdToContainerId(int marker_id, int corner_id, int first_id=0, int last_id=65535) {$/;"	f	namespace:alvar
MarkerIterator	include/ar_track_alvar/Marker.h	/^  class ALVAR_EXPORT MarkerIterator : public std::iterator<std::forward_iterator_tag, Marker*> {$/;"	c	namespace:alvar
MarkerIteratorImpl	include/ar_track_alvar/Marker.h	/^    class ALVAR_EXPORT MarkerIteratorImpl : public MarkerIterator {$/;"	c	namespace:alvar
MarkerIteratorImpl	include/ar_track_alvar/Marker.h	/^  MarkerIteratorImpl(const_iterator_aligntype i) : _begin(i), _i(i) {$/;"	f	class:alvar::MarkerIteratorImpl
MarkerIteratorImpl	src/Marker.cpp	/^template class ALVAR_EXPORT alvar::MarkerIteratorImpl<alvar::Marker>;$/;"	m	class:alvar	typeref:class:alvar::	file:
MarkerIteratorImpl	src/Marker.cpp	/^template class ALVAR_EXPORT alvar::MarkerIteratorImpl<alvar::MarkerArtoolkit>;$/;"	m	class:alvar	typeref:class:alvar::	file:
MarkerIteratorImpl	src/Marker.cpp	/^template class ALVAR_EXPORT alvar::MarkerIteratorImpl<alvar::MarkerData>;$/;"	m	class:alvar	typeref:class:alvar::	file:
MarkerMeasurement	include/ar_track_alvar/MultiMarkerInitializer.h	/^		MarkerMeasurement() : globalPose(false) {}$/;"	f	class:alvar::MultiMarkerInitializer::MarkerMeasurement
MarkerMeasurement	include/ar_track_alvar/MultiMarkerInitializer.h	/^	class MarkerMeasurement : public Marker {$/;"	c	class:alvar::MultiMarkerInitializer
MarkerToEC	include/ar_track_alvar/EC.h	/^	void MarkerToEC(std::map<int,T> &container, int marker_id, double edge_length, Pose &pose, int type_id=0, int first_id=0,int last_id=65535) {$/;"	f	class:alvar::MarkerDetectorEC
MarkersFromEC	include/ar_track_alvar/EC.h	/^	bool MarkersFromEC(std::map<int,T> &container, int type_id=0, int first_id=0,int last_id=65535) {$/;"	f	class:alvar::MultiMarkerEC
MarkersToEC	include/ar_track_alvar/EC.h	/^	bool MarkersToEC(std::map<int,T> &container, int type_id=0, int first_id=0,int last_id=65535) {$/;"	f	class:alvar::MultiMarkerEC
Mat9ToQuat	src/Rotation.cpp	/^void Rotation::Mat9ToQuat(const double *mat, double *quat)$/;"	f	class:alvar::Rotation
Mat9ToRod	src/Rotation.cpp	/^void Rotation::Mat9ToRod(double *mat, double *rod)$/;"	f	class:alvar::Rotation
MeasurementIterator	include/ar_track_alvar/MultiMarkerInitializer.h	/^	typedef std::vector<std::vector<MarkerMeasurement, Eigen::aligned_allocator<MarkerMeasurement> > >::iterator MeasurementIterator;$/;"	t	class:alvar::MultiMarkerInitializer
MeasurementsAdd	include/ar_track_alvar/MultiMarkerBundle.h	/^	void MeasurementsAdd(const std::vector<M, Eigen::aligned_allocator<M> > *markers, const Pose& camera_pose) {$/;"	f	class:alvar::MultiMarkerBundle
MeasurementsAdd	include/ar_track_alvar/MultiMarkerInitializer.h	/^	void MeasurementsAdd(const std::vector<M, Eigen::aligned_allocator<M> > *markers) {$/;"	f	class:alvar::MultiMarkerInitializer
MeasurementsAdd	src/MultiMarkerInitializer.cpp	/^void MultiMarkerInitializer::MeasurementsAdd(MarkerIterator &begin, MarkerIterator &end) {$/;"	f	class:alvar::MultiMarkerInitializer
MeasurementsReset	include/ar_track_alvar/MultiMarkerFiltered.h	/^	void MeasurementsReset() {$/;"	f	class:alvar::MultiMarkerFiltered
MeasurementsReset	src/MultiMarkerBundle.cpp	/^void MultiMarkerBundle::MeasurementsReset() {$/;"	f	class:alvar::MultiMarkerBundle
MeasurementsReset	src/MultiMarkerInitializer.cpp	/^void MultiMarkerInitializer::MeasurementsReset() {$/;"	f	class:alvar::MultiMarkerInitializer
MedianFilter	include/ar_track_alvar/filter/medianFilter.h	/^class MedianFilter$/;"	c	namespace:ar_track_alvar
MedianFilter	src/medianFilter.cpp	/^  MedianFilter::MedianFilter(int n){$/;"	f	class:ar_track_alvar::MedianFilter
MidPointAlgorithm	src/EC.cpp	/^bool MidPointAlgorithm(CvMat* o1, CvMat* o2, CvMat* p1, CvMat* p2, CvPoint3D32f& X, double limit)$/;"	f	namespace:alvar
Mirror	src/Pose.cpp	/^void Pose::Mirror(bool x, bool y, bool z)$/;"	f	class:alvar::Pose
Mirror	src/Rotation.cpp	/^void Rotation::Mirror(bool x, bool y, bool z)$/;"	f	class:alvar::Rotation
MirrorMat	src/Rotation.cpp	/^void Rotation::MirrorMat(CvMat *mat, bool x, bool y, bool z) {$/;"	f	class:alvar::Rotation
ModelPointVector	include/ar_track_alvar/FernPoseEstimator.h	/^    typedef std::vector<CvPoint3D64f> ModelPointVector;$/;"	t	class:alvar::FernPoseEstimator
Motion	src/GlutViewer.cpp	/^void GlutViewer::Motion(int x, int y)$/;"	f	class:GlutViewer
Mouse	src/GlutViewer.cpp	/^void GlutViewer::Mouse(int button, int state, int x, int y)$/;"	f	class:GlutViewer
MultiMarker	include/ar_track_alvar/MultiMarker.h	/^	MultiMarker() {}$/;"	f	class:alvar::MultiMarker
MultiMarker	include/ar_track_alvar/MultiMarker.h	/^class ALVAR_EXPORT MultiMarker {$/;"	c	namespace:alvar
MultiMarker	src/MultiMarker.cpp	/^MultiMarker::MultiMarker(vector<int>& indices)$/;"	f	class:alvar::MultiMarker
MultiMarkerBundle	include/ar_track_alvar/MultiMarkerBundle.h	/^class ALVAR_EXPORT MultiMarkerBundle : public MultiMarker$/;"	c	namespace:alvar
MultiMarkerBundle	src/MultiMarkerBundle.cpp	/^MultiMarkerBundle::MultiMarkerBundle(std::vector<int>& indices) $/;"	f	class:alvar::MultiMarkerBundle
MultiMarkerEC	include/ar_track_alvar/EC.h	/^class MultiMarkerEC : public MultiMarker {$/;"	c	namespace:alvar
MultiMarkerFiltered	include/ar_track_alvar/MultiMarkerFiltered.h	/^class ALVAR_EXPORT MultiMarkerFiltered : public MultiMarker$/;"	c	namespace:alvar
MultiMarkerFiltered	src/MultiMarkerFiltered.cpp	/^MultiMarkerFiltered::MultiMarkerFiltered(std::vector<int>& indices)$/;"	f	class:alvar::MultiMarkerFiltered
MultiMarkerInitializer	include/ar_track_alvar/MultiMarkerInitializer.h	/^class ALVAR_EXPORT MultiMarkerInitializer : public MultiMarker$/;"	c	namespace:alvar
MultiMarkerInitializer	src/MultiMarkerInitializer.cpp	/^MultiMarkerInitializer::MultiMarkerInitializer(std::vector<int>& indices, int _filter_buffer_min, int _filter_buffer_max)$/;"	f	class:alvar::MultiMarkerInitializer
Mutex	include/ar_track_alvar/Mutex.h	/^class ALVAR_EXPORT Mutex$/;"	c	namespace:alvar
Mutex	src/Mutex.cpp	/^Mutex::Mutex()$/;"	f	class:alvar::Mutex
MutexPrivate	include/ar_track_alvar/Mutex_private.h	/^class MutexPrivate$/;"	c	namespace:alvar
MutexPrivate	src/Mutex_unix.cpp	/^MutexPrivate::MutexPrivate()$/;"	f	class:alvar::MutexPrivate
MutexPrivate	src/Mutex_win.cpp	/^MutexPrivate::MutexPrivate()$/;"	f	class:alvar::MutexPrivate
MutexPrivateData	src/Mutex_unix.cpp	/^    MutexPrivateData()$/;"	f	class:alvar::MutexPrivateData
MutexPrivateData	src/Mutex_unix.cpp	/^class MutexPrivateData$/;"	c	namespace:alvar	file:
MutexPrivateData	src/Mutex_win.cpp	/^    MutexPrivateData()$/;"	f	class:alvar::MutexPrivateData
MutexPrivateData	src/Mutex_win.cpp	/^class MutexPrivateData$/;"	c	namespace:alvar	file:
NONE	include/ar_track_alvar/TrackerOrientation.h	/^		enum {NONE=0, USE_FOR_POSE, IS_OUTLIER, IS_INITIAL} status3D;$/;"	e	enum:alvar::TrackerOrientation::Feature::__anon3
NOT_TRACKED	include/ar_track_alvar/TrackerOrientation.h	/^		enum {NOT_TRACKED=0, IS_TRACKED} status2D;$/;"	e	enum:alvar::TrackerOrientation::Feature::__anon2
N_PTS_TO_FIND	src/FernImageDetector.cpp	32;"	d	file:
N_PTS_TO_TEACH	src/FernImageDetector.cpp	33;"	d	file:
N_STRUCTS	src/FernImageDetector.cpp	36;"	d	file:
N_VIEWS	src/FernImageDetector.cpp	31;"	d	file:
NewFeatureMask	src/TrackerFeatures.cpp	/^IplImage *TrackerFeatures::NewFeatureMask() {$/;"	f	class:alvar::TrackerFeatures
OPTIMIZATION_H	include/ar_track_alvar/Optimization.h	25;"	d
OnVideoSample	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^void CaptureDSCapture::OnVideoSample(BYTE* pBuffer, DWORD dwDataLen, REFERENCE_TIME t_start)$/;"	f	class:alvar::plugins::CaptureDSCapture
OnVideoSample	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^      void OnVideoSample(BYTE* pBuffer, DWORD dwDataLen, REFERENCE_TIME t_start) {$/;"	f	class:alvar::plugins::CaptureDSCapture::VideoSampler
Optimization	include/ar_track_alvar/Optimization.h	/^class ALVAR_EXPORT Optimization $/;"	c	namespace:alvar
Optimization	src/Optimization.cpp	/^Optimization::Optimization(int n_params, int n_meas)$/;"	f	class:alvar::Optimization
Optimize	src/MultiMarkerBundle.cpp	/^bool MultiMarkerBundle::Optimize(Camera *_cam, double stop, int max_iter, Optimization::OptimizeMethod method)$/;"	f	class:alvar::MultiMarkerBundle
Optimize	src/Optimization.cpp	/^double Optimization::Optimize(CvMat* parameters,      \/\/ Initial values are set$/;"	f	class:alvar::Optimization
OptimizeMethod	include/ar_track_alvar/Optimization.h	/^	enum OptimizeMethod$/;"	g	class:alvar::Optimization
Output	src/Bitset.cpp	/^ostream &Bitset::Output(ostream &os) const {$/;"	f	class:alvar::Bitset
Output	src/Pose.cpp	/^void Pose::Output() const {$/;"	f	class:alvar::Pose
Output	src/Util.cpp	/^bool Serialization::Output() {$/;"	f	class:alvar::Serialization
OwnDrawable	src/SampleMarkerHide.cpp	/^struct OwnDrawable : public Drawable {$/;"	s	file:
OwnDrawable	src/SamplePointcloud.cpp	/^struct OwnDrawable : public Drawable {$/;"	s	file:
P	include/ar_track_alvar/Kalman.h	/^	CvMat *P;$/;"	m	class:alvar::Kalman
PACKAGE	cfg/Params.cfg	/^PACKAGE = "ar_track_alvar"$/;"	v
PATCH_SIZE	src/FernImageDetector.cpp	29;"	d	file:
PI	include/ar_track_alvar/Util.h	/^const double PI = 3.14159265;$/;"	m	namespace:alvar
PLATFORM_H	include/ar_track_alvar/Platform.h	25;"	d
PLUGIN_H	include/ar_track_alvar/Plugin.h	25;"	d
PLUGIN_PRIVATE_H	include/ar_track_alvar/DirectoryIterator_private.h	25;"	d
PLUGIN_PRIVATE_H	include/ar_track_alvar/Plugin_private.h	25;"	d
POSE_H	include/ar_track_alvar/Pose.h	25;"	d
PYR_LEVELS	src/FernImageDetector.cpp	30;"	d	file:
P_pred	include/ar_track_alvar/Kalman.h	/^	CvMat *P_pred;$/;"	m	class:alvar::Kalman
P_tmp	include/ar_track_alvar/Kalman.h	/^	CvMat *P_tmp;$/;"	m	class:alvar::KalmanSensor
PlaneFitPoseImprovement	nodes/FindMarkerBundles.cpp	/^int PlaneFitPoseImprovement(int id, const ARCloud &corners_3D, ARCloud::Ptr selected_points, const ARCloud &cloud, Pose &p){$/;"	f
PlaneFitPoseImprovement	nodes/IndividualMarkers.cpp	/^int PlaneFitPoseImprovement(int id, const ARCloud &corners_3D, ARCloud::Ptr selected_points, const ARCloud &cloud, Pose &p){$/;"	f
PlaneFitResult	include/ar_track_alvar/filter/kinect_filtering.h	/^  PlaneFitResult () : inliers(ARCloud::Ptr(new ARCloud)) {}$/;"	f	struct:ar_track_alvar::PlaneFitResult
PlaneFitResult	include/ar_track_alvar/filter/kinect_filtering.h	/^struct PlaneFitResult$/;"	s	namespace:ar_track_alvar
Plugin	include/ar_track_alvar/Plugin.h	/^class Plugin$/;"	c	namespace:alvar
Plugin	src/Plugin.cpp	/^Plugin::Plugin(const Plugin &plugin)$/;"	f	class:alvar::Plugin
Plugin	src/Plugin.cpp	/^Plugin::Plugin(const std::string filename)$/;"	f	class:alvar::Plugin
PluginMap	include/ar_track_alvar/CaptureFactory_private.h	/^    typedef std::map<std::string, Plugin> PluginMap;$/;"	t	class:alvar::CaptureFactoryPrivate
PluginPathsVector	include/ar_track_alvar/CaptureFactory_private.h	/^    typedef std::vector<std::string> PluginPathsVector;$/;"	t	class:alvar::CaptureFactoryPrivate
PluginPrivate	include/ar_track_alvar/Plugin_private.h	/^class PluginPrivate$/;"	c	namespace:alvar
PluginPrivate	src/Plugin_unix.cpp	/^PluginPrivate::PluginPrivate()$/;"	f	class:alvar::PluginPrivate
PluginPrivate	src/Plugin_win.cpp	/^PluginPrivate::PluginPrivate()$/;"	f	class:alvar::PluginPrivate
PluginPrivateData	src/Plugin_unix.cpp	/^    PluginPrivateData()$/;"	f	class:alvar::PluginPrivateData
PluginPrivateData	src/Plugin_unix.cpp	/^class PluginPrivateData$/;"	c	namespace:alvar	file:
PluginPrivateData	src/Plugin_win.cpp	/^    PluginPrivateData()$/;"	f	class:alvar::PluginPrivateData
PluginPrivateData	src/Plugin_win.cpp	/^class PluginPrivateData$/;"	c	namespace:alvar	file:
Point	include/ar_track_alvar/Util.h	/^	Point(double vx, double vy)$/;"	f	struct:alvar::Point
Point	include/ar_track_alvar/Util.h	/^	Point(int vx=0, int vy=0)$/;"	f	struct:alvar::Point
Point	include/ar_track_alvar/Util.h	/^struct ALVAR_EXPORT Point : public C$/;"	s	namespace:alvar
PointCloudAdd	src/MultiMarker.cpp	/^void MultiMarker::PointCloudAdd(int marker_id, double edge_length, Pose &pose) {$/;"	f	class:alvar::MultiMarker
PointCloudAverage	src/MultiMarkerFiltered.cpp	/^void MultiMarkerFiltered::PointCloudAverage(int marker_id, double edge_length, Pose &pose) {$/;"	f	class:alvar::MultiMarkerFiltered
PointCloudCopy	src/MultiMarker.cpp	/^void MultiMarker::PointCloudCopy(const MultiMarker *m) {$/;"	f	class:alvar::MultiMarker
PointCloudCorners3d	src/MultiMarker.cpp	/^void MultiMarker::PointCloudCorners3d(double edge_length, Pose &pose, CvPoint3D64f corners[4]) {$/;"	f	class:alvar::MultiMarker
PointCloudGet	src/MultiMarker.cpp	/^void MultiMarker::PointCloudGet(int marker_id, int point,$/;"	f	class:alvar::MultiMarker
PointCloudIsEmpty	include/ar_track_alvar/MultiMarker.h	/^	bool PointCloudIsEmpty() {$/;"	f	class:alvar::MultiMarker
PointCloudReset	src/MultiMarker.cpp	/^void MultiMarker::PointCloudReset() {$/;"	f	class:alvar::MultiMarker
PointDouble	include/ar_track_alvar/Util.h	/^typedef ALVAR_EXPORT Point<CvPoint2D64f> PointDouble;$/;"	t	namespace:alvar
PointInt	include/ar_track_alvar/Util.h	/^typedef ALVAR_EXPORT Point<CvPoint> PointInt;$/;"	t	namespace:alvar
PointSquaredDistance	include/ar_track_alvar/Util.h	/^double PointSquaredDistance(PointType p1, PointType p2) {$/;"	f	namespace:alvar
PointVectorFromCamera	src/SfM.cpp	/^float PointVectorFromCamera(CvPoint3D32f p3d, CvPoint3D32f &p3d_vec, Pose *camera_pose) {$/;"	f	namespace:alvar
Pose	include/ar_track_alvar/Pose.h	/^class ALVAR_EXPORT Pose : public Rotation {$/;"	c	namespace:alvar
Pose	src/Pose.cpp	/^Pose::Pose() : Rotation() {$/;"	f	class:alvar::Pose
Pose	src/Pose.cpp	/^Pose::Pose(CvMat *mat) : Rotation(mat, MAT) {$/;"	f	class:alvar::Pose
Pose	src/Pose.cpp	/^Pose::Pose(CvMat *tra, CvMat *rot, RotationType t) : Rotation(rot, t) {$/;"	f	class:alvar::Pose
Pose	src/Pose.cpp	/^Pose::Pose(const Pose& p) :Rotation(p) {$/;"	f	class:alvar::Pose
PreDetect	include/ar_track_alvar/EC.h	/^	bool PreDetect(T &p, int type_id) {$/;"	f	class:alvar::MarkerDetectorEC
PreDetect	include/ar_track_alvar/EC.h	/^	bool PreDetect(std::pair<const int,T> &p, int type_id) {$/;"	f	class:alvar::MarkerDetectorEC
ProjPoints	include/ar_track_alvar/Camera.h	/^struct ALVAR_EXPORT ProjPoints {$/;"	s	namespace:alvar
Project	src/EC.cpp	/^static void Project(CvMat* state, CvMat* projection, void* x)$/;"	f	namespace:alvar
Project	src/TrackerOrientation.cpp	/^void TrackerOrientation::Project(CvMat* state, CvMat* projection, void *param)$/;"	f	class:alvar::TrackerOrientation
ProjectParams	src/EC.cpp	/^struct ProjectParams$/;"	s	namespace:alvar	file:
ProjectPoint	src/Camera.cpp	/^void Camera::ProjectPoint(const CvPoint3D32f pw, const Pose *pose, CvPoint2D32f &pi) const {$/;"	f	class:alvar::Camera
ProjectPoint	src/Camera.cpp	/^void Camera::ProjectPoint(const CvPoint3D64f pw, const Pose *pose, CvPoint2D64f &pi) const {$/;"	f	class:alvar::Camera
ProjectPoints	src/Camera.cpp	/^void Camera::ProjectPoints(const CvMat* object_points, const CvMat* rotation_vector,$/;"	f	class:alvar::Camera
ProjectPoints	src/Camera.cpp	/^void Camera::ProjectPoints(const CvMat* object_points, const Pose* pose, CvMat* image_points) const$/;"	f	class:alvar::Camera
ProjectPoints	src/Camera.cpp	/^void Camera::ProjectPoints(const CvMat* object_points, double gl[16], CvMat* image_points) const$/;"	f	class:alvar::Camera
ProjectPoints	src/Camera.cpp	/^void Camera::ProjectPoints(vector<CvPoint3D64f>& pw, Pose *pose, vector<CvPoint2D64f>& pi) const {$/;"	f	class:alvar::Camera
ProjectPoints	src/Camera.cpp	/^void Homography::ProjectPoints(const vector<PointDouble>& from, vector<PointDouble>& to) $/;"	f	class:alvar::Homography
ProjectRot	src/EC.cpp	/^static void ProjectRot(CvMat* state, CvMat* projection, void* x) $/;"	f	namespace:alvar
Purge	include/ar_track_alvar/EC.h	/^	void Purge() { purge=true; }$/;"	f	class:alvar::TrackerFeaturesEC
Purge	src/TrackerFeatures.cpp	/^int TrackerFeatures::Purge() {$/;"	f	class:alvar::TrackerFeatures
Q	include/ar_track_alvar/Kalman.h	/^	CvMat *Q;$/;"	m	class:alvar::Kalman
QUAT	include/ar_track_alvar/Rotation.h	/^	enum RotationType {QUAT, MAT, EUL, ROD};$/;"	e	enum:alvar::Rotation::RotationType
QuatInv	src/Rotation.cpp	/^void Rotation::QuatInv(const double *q, double *qi)$/;"	f	class:alvar::Rotation
QuatMul	src/Rotation.cpp	/^void Rotation::QuatMul(const double *q1, const double *q2, double *q3)$/;"	f	class:alvar::Rotation
QuatNorm	src/Rotation.cpp	/^void Rotation::QuatNorm(double *q)$/;"	f	class:alvar::Rotation
QuatToEul	src/Rotation.cpp	/^void Rotation::QuatToEul(const double *q, double *eul)$/;"	f	class:alvar::Rotation
QuatToMat16	src/Rotation.cpp	/^void Rotation::QuatToMat16(const double *quat, double *mat)$/;"	f	class:alvar::Rotation
QuatToMat9	src/Rotation.cpp	/^void Rotation::QuatToMat9(const double *quat, double *mat)$/;"	f	class:alvar::Rotation
R	include/ar_track_alvar/Kalman.h	/^	CvMat *R;$/;"	m	class:alvar::KalmanSensor
ROD	include/ar_track_alvar/Rotation.h	/^	enum RotationType {QUAT, MAT, EUL, ROD};$/;"	e	enum:alvar::Rotation::RotationType
ROTATION_H	include/ar_track_alvar/Rotation.h	25;"	d
R_tmp	include/ar_track_alvar/Kalman.h	/^	CvMat *R_tmp;$/;"	m	class:alvar::KalmanSensor
Rad2Deg	include/ar_track_alvar/Util.h	/^double ALVAR_EXPORT Rad2Deg(const C& v)$/;"	f	namespace:alvar
Ransac	include/ar_track_alvar/Ransac.h	/^    Ransac(int min_params, int max_params) $/;"	f	class:alvar::Ransac
Ransac	include/ar_track_alvar/Ransac.h	/^    class Ransac : public RansacImpl {$/;"	c	namespace:alvar
RansacImpl	include/ar_track_alvar/Ransac.h	/^class ALVAR_EXPORT RansacImpl {$/;"	c	namespace:alvar
RansacImpl	src/Ransac.cpp	/^RansacImpl::RansacImpl(int min_params, int max_params, $/;"	f	class:alvar::RansacImpl
RansacImpl	src/Ransac.cpp	/^RansacImpl::RansacImpl(int min_params, int max_params, int sizeof_model) {$/;"	f	class:alvar::RansacImpl
Read6bitStr	src/Marker.cpp	/^void MarkerData::Read6bitStr(BitsetExt *bs, char *s, size_t s_max_len) {$/;"	f	class:alvar::MarkerData
ReconstructFeature	src/EC.cpp	/^bool CameraEC::ReconstructFeature(const Pose *pose1, const Pose *pose2, const CvPoint2D32f *u1, const CvPoint2D32f *u2, CvPoint3D32f *p3d, double limit) {$/;"	f	class:alvar::CameraEC
Reproject	include/ar_track_alvar/EC.h	/^	float Reproject(std::map<int,T> &container, Pose *pose, F do_handle_test, float average_outlier_limit=0.f)$/;"	f	class:alvar::CameraEC
Reproject	include/ar_track_alvar/EC.h	/^	float Reproject(std::map<int,T> &container, Pose *pose, int type_id=-1, bool needs_has_p2d=false, bool needs_has_p3d=false, float average_outlier_limit=0.f)$/;"	f	class:alvar::CameraEC
Reset	include/ar_track_alvar/EC.h	/^	double Reset(IplImage *img, IplImage *mask) { throw alvar::AlvarException("Method not supported"); }$/;"	f	class:alvar::TrackerFeaturesEC
Reset	include/ar_track_alvar/EC.h	/^	void Reset() { throw alvar::AlvarException("Method not supported"); }$/;"	f	class:alvar::TrackerFeaturesEC
Reset	src/Camera.cpp	/^void ProjPoints::Reset() {$/;"	f	class:alvar::ProjPoints
Reset	src/MultiMarker.cpp	/^void MultiMarker::Reset()$/;"	f	class:alvar::MultiMarker
Reset	src/Pose.cpp	/^void Pose::Reset()$/;"	f	class:alvar::Pose
Reset	src/Rotation.cpp	/^void Rotation::Reset()$/;"	f	class:alvar::Rotation
Reset	src/SfM.cpp	/^void SimpleSfM::Reset(bool reset_also_triangulated) {$/;"	f	class:alvar::SimpleSfM
Reset	src/TrackerFeatures.cpp	/^double TrackerFeatures::Reset(IplImage *img, IplImage *new_features_mask) {$/;"	f	class:alvar::TrackerFeatures
Reset	src/TrackerFeatures.cpp	/^void TrackerFeatures::Reset() {$/;"	f	class:alvar::TrackerFeatures
Reset	src/TrackerOrientation.cpp	/^void TrackerOrientation::Reset()$/;"	f	class:alvar::TrackerOrientation
Reset	src/TrackerStat.cpp	/^void TrackerStat::Reset() {$/;"	f	class:alvar::TrackerStat
ResetSearchSpace	include/ar_track_alvar/Container3d.h	/^		void ResetSearchSpace() {$/;"	f	class:alvar::Container3d
Reshape	src/GlutViewer.cpp	/^void GlutViewer::Reshape(int w, int h)$/;"	f	class:GlutViewer
RodToMat9	src/Rotation.cpp	/^void Rotation::RodToMat9(double *rod, double *mat)$/;"	f	class:alvar::Rotation
Rotation	include/ar_track_alvar/Rotation.h	/^class ALVAR_EXPORT Rotation$/;"	c	namespace:alvar
Rotation	src/Rotation.cpp	/^Rotation::Rotation()$/;"	f	class:alvar::Rotation
Rotation	src/Rotation.cpp	/^Rotation::Rotation(CvMat *data, RotationType t)$/;"	f	class:alvar::Rotation
Rotation	src/Rotation.cpp	/^Rotation::Rotation(const Rotation& r) {$/;"	f	class:alvar::Rotation
RotationType	include/ar_track_alvar/Rotation.h	/^	enum RotationType {QUAT, MAT, EUL, ROD};$/;"	g	class:alvar::Rotation
SFM_H	include/ar_track_alvar/SfM.h	25;"	d
SHARED_H	include/ar_track_alvar/Shared.h	2;"	d
SIGNATURE_SIZE	src/FernImageDetector.cpp	38;"	d	file:
SIZE_BLUR	src/FernImageDetector.cpp	34;"	d	file:
STRCPY	include/ar_track_alvar/Util.h	/^	inline void STRCPY(char *to, rsize_t size, const char *src) {$/;"	f	namespace:alvar
STRCPY	include/ar_track_alvar/Util.h	/^	inline void STRCPY(char *to, size_t size, const char *src) {$/;"	f	namespace:alvar
STRUCT_SIZE	src/FernImageDetector.cpp	37;"	d	file:
Save	include/ar_track_alvar/EC.h	/^	bool Save(std::map<int,T> &container, const char* fname, FILE_FORMAT format = FILE_FORMAT_DEFAULT, int type_id=0, int first_id=0,int last_id=65535) {$/;"	f	class:alvar::MultiMarkerEC
Save	src/MultiMarker.cpp	/^bool MultiMarker::Save(const char* fname, FILE_FORMAT format) {$/;"	f	class:alvar::MultiMarker
Save	src/SampleMarkerCreator.cpp	/^    void Save() {$/;"	f	struct:State
SaveCalib	src/Camera.cpp	/^bool Camera::SaveCalib(const char *calibfile, FILE_FORMAT format) {$/;"	f	class:alvar::Camera
SaveCalibOpenCV	src/Camera.cpp	/^bool Camera::SaveCalibOpenCV(const char *calibfile) {$/;"	f	class:alvar::Camera
SaveCalibXML	src/Camera.cpp	/^bool Camera::SaveCalibXML(const char *calibfile) {$/;"	f	class:alvar::Camera
SaveMarkerImage	src/Marker.cpp	/^void Marker::SaveMarkerImage(const char *filename, int save_res) const {$/;"	f	class:alvar::Marker
SaveText	src/MultiMarker.cpp	/^bool MultiMarker::SaveText(const char* fname) {$/;"	f	class:alvar::MultiMarker
SaveXML	src/MultiMarker.cpp	/^bool MultiMarker::SaveXML(const char* fname) {$/;"	f	class:alvar::MultiMarker
ScaleMarkerToImage	src/Marker.cpp	/^void Marker::ScaleMarkerToImage(IplImage *image) const {$/;"	f	class:alvar::Marker
Serialization	include/ar_track_alvar/Util.h	/^class ALVAR_EXPORT Serialization {$/;"	c	namespace:alvar
Serialization	src/Util.cpp	/^Serialization::Serialization(std::basic_iostream<char> &_stream)$/;"	f	class:alvar::Serialization
Serialization	src/Util.cpp	/^Serialization::Serialization(std::basic_istream<char> &_stream) {$/;"	f	class:alvar::Serialization
Serialization	src/Util.cpp	/^Serialization::Serialization(std::basic_ostream<char> &_stream) {$/;"	f	class:alvar::Serialization
Serialization	src/Util.cpp	/^Serialization::Serialization(std::string _filename) {$/;"	f	class:alvar::Serialization
SerializationFormatterXml	src/Util.cpp	/^	SerializationFormatterXml() : xml_current(0) {}$/;"	f	struct:alvar::SerializationFormatterXml
SerializationFormatterXml	src/Util.cpp	/^struct SerializationFormatterXml {$/;"	s	namespace:alvar	file:
Serialize	include/ar_track_alvar/Camera.h	/^	bool Serialize(Serialization *ser) {$/;"	f	class:alvar::Camera
Serialize	src/Util.cpp	/^bool Serialization::Serialize(CvMat &data, const std::string &name) {$/;"	f	class:alvar::Serialization
Serialize	src/Util.cpp	/^bool Serialization::Serialize(double &data, const std::string &name) {$/;"	f	class:alvar::Serialization
Serialize	src/Util.cpp	/^bool Serialization::Serialize(int &data, const std::string &name) {$/;"	f	class:alvar::Serialization
Serialize	src/Util.cpp	/^bool Serialization::Serialize(std::string &data, const std::string &name) {$/;"	f	class:alvar::Serialization
Serialize	src/Util.cpp	/^bool Serialization::Serialize(unsigned long &data, const std::string &name) {$/;"	f	class:alvar::Serialization
Serialize	src/Util.cpp	/^bool Serialization::Serialize(unsigned short &data, const std::string &name) {$/;"	f	class:alvar::Serialization
Serialize	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^bool CaptureCmu::Serialize(Serialization *serialization)$/;"	f	class:alvar::plugins::CaptureCmu
Serialize	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^bool CaptureDSCapture::Serialize(Serialization *serialization)$/;"	f	class:alvar::plugins::CaptureDSCapture
Serialize	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^bool CaptureFile::Serialize(Serialization *serialization)$/;"	f	class:alvar::plugins::CaptureFile
Serialize	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^bool CaptureHighgui::Serialize(Serialization *serialization)$/;"	f	class:alvar::plugins::CaptureHighgui
Serialize	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^bool CapturePtgrey::Serialize(Serialization *serialization)$/;"	f	class:alvar::plugins::CapturePtgrey
SerializeClass	include/ar_track_alvar/Util.h	/^	bool SerializeClass(C &serializable) {$/;"	f	class:alvar::Serialization
SerializeId	include/ar_track_alvar/Camera.h	/^	std::string SerializeId() { return "camera"; };$/;"	f	class:alvar::Camera
SerializeId	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^std::string CaptureCmu::SerializeId()$/;"	f	class:alvar::plugins::CaptureCmu
SerializeId	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^string CaptureDSCapture::SerializeId()$/;"	f	class:alvar::plugins::CaptureDSCapture
SerializeId	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^std::string CaptureFile::SerializeId()$/;"	f	class:alvar::plugins::CaptureFile
SerializeId	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^std::string CaptureHighgui::SerializeId()$/;"	f	class:alvar::plugins::CaptureHighgui
SerializeId	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^string CapturePtgrey::SerializeId()$/;"	f	class:alvar::plugins::CapturePtgrey
SetCalib	src/Camera.cpp	/^bool Camera::SetCalib(const char *calibfile, int _x_res, int _y_res, FILE_FORMAT format) {$/;"	f	class:alvar::Camera
SetCamera	include/ar_track_alvar/ConnectedComponents.h	/^	void SetCamera(Camera* camera) {cam = camera;}$/;"	f	class:alvar::Labeling
SetCamera	include/ar_track_alvar/TrackerOrientation.h	/^	void SetCamera(Camera *camera) {$/;"	f	class:alvar::TrackerOrientation
SetCameraInfo	src/Camera.cpp	/^void Camera::SetCameraInfo(const sensor_msgs::CameraInfo &camInfo)$/;"	f	class:alvar::Camera
SetColor	src/GlutViewer.cpp	/^void Drawable::SetColor(double _r, double _g, double _b) {$/;"	f	class:Drawable
SetContent	src/Marker.cpp	/^void MarkerArtoolkit::SetContent(unsigned long _id) {$/;"	f	class:alvar::MarkerArtoolkit
SetContent	src/Marker.cpp	/^void MarkerData::SetContent(MarkerContentType _content_type, unsigned long _id, const char *_str, bool force_strong_hamming, bool verbose) {$/;"	f	class:alvar::MarkerData
SetError	include/ar_track_alvar/Marker.h	/^    void SetError(int error_type, double value) {$/;"	f	class:alvar::Marker
SetEuler	src/Rotation.cpp	/^void Rotation::SetEuler(const CvMat *mat)$/;"	f	class:alvar::Rotation
SetGLMatTraQuat	src/GlutViewer.cpp	/^void Drawable::SetGLMatTraQuat(double *tra, double *quat, bool flip)$/;"	f	class:Drawable
SetGLMatTraRod	src/GlutViewer.cpp	/^void Drawable::SetGLMatTraRod(double *tra, double *rod)$/;"	f	class:Drawable
SetGlModelviewMatrix	src/GlutViewer.cpp	/^void GlutViewer::SetGlModelviewMatrix(double p[16]) {$/;"	f	class:GlutViewer
SetGlProjectionMatrix	src/GlutViewer.cpp	/^void GlutViewer::SetGlProjectionMatrix(double p[16]) {$/;"	f	class:GlutViewer
SetId	include/ar_track_alvar/Marker.h	/^    virtual void SetId(unsigned long _id) {};$/;"	f	class:alvar::Marker
SetId	include/ar_track_alvar/Marker.h	/^    void SetId(unsigned long _id) { data.id = _id; }$/;"	f	class:alvar::MarkerData
SetId	include/ar_track_alvar/Marker.h	/^    void SetId(unsigned long _id) { id = _id; }$/;"	f	class:alvar::MarkerArtoolkit
SetId	include/ar_track_alvar/MultiMarkerInitializer.h	/^		void SetId(unsigned long _id) { this->_id = _id; }$/;"	f	class:alvar::MultiMarkerInitializer::MarkerMeasurement
SetImage	src/CvTestbed.cpp	/^size_t CvTestbed::SetImage(const char *title, IplImage *ipl, bool release_at_exit \/* =false *\/) {$/;"	f	class:CvTestbed
SetKeyCallback	src/CvTestbed.cpp	/^void CvTestbed::SetKeyCallback(int (*_keycallback)(int key)) {$/;"	f	class:CvTestbed
SetMarkerSize	src/Marker.cpp	/^void Marker::SetMarkerSize(double _edge_length, int _res, double _margin) {$/;"	f	class:alvar::Marker
SetMarkerSize	src/MarkerDetector.cpp	/^	void MarkerDetectorImpl::SetMarkerSize(double _edge_length, int _res, double _margin) {$/;"	f	class:alvar::MarkerDetectorImpl
SetMarkerSizeForId	src/MarkerDetector.cpp	/^	void MarkerDetectorImpl::SetMarkerSizeForId(unsigned long id, double _edge_length) {$/;"	f	class:alvar::MarkerDetectorImpl
SetMatrix	src/Pose.cpp	/^void Pose::SetMatrix(const CvMat *mat)$/;"	f	class:alvar::Pose
SetMatrix	src/Rotation.cpp	/^void Rotation::SetMatrix(const CvMat *mat)$/;"	f	class:alvar::Rotation
SetMatrixGL	src/Pose.cpp	/^void Pose::SetMatrixGL(double gl[16], bool mirror)$/;"	f	class:alvar::Pose
SetOpenglProjectionMatrix	src/Camera.cpp	/^void Camera::SetOpenglProjectionMatrix(double proj_matrix[16], const int width, const int height) {$/;"	f	class:alvar::Camera
SetOptions	src/ConnectedComponents.cpp	/^void LabelingCvSeq::SetOptions(bool _detect_pose_grayscale) {$/;"	f	class:alvar::LabelingCvSeq
SetOptions	src/MarkerDetector.cpp	/^	void MarkerDetectorImpl::SetOptions(bool _detect_pose_grayscale) {$/;"	f	class:alvar::MarkerDetectorImpl
SetQuaternion	src/Rotation.cpp	/^void Rotation::SetQuaternion(CvMat *mat)$/;"	f	class:alvar::Rotation
SetQuaternion	src/Rotation.cpp	/^void Rotation::SetQuaternion(const double *quat)$/;"	f	class:alvar::Rotation
SetRes	src/Camera.cpp	/^void Camera::SetRes(int _x_res, int _y_res) {$/;"	f	class:alvar::Camera
SetResetPoint	src/SfM.cpp	/^void SimpleSfM::SetResetPoint() {$/;"	f	class:alvar::SimpleSfM
SetRodriques	src/Rotation.cpp	/^void Rotation::SetRodriques(const CvMat *mat)$/;"	f	class:alvar::Rotation
SetScale	include/ar_track_alvar/SfM.h	/^	void SetScale(double s) { scale = s; }$/;"	f	class:alvar::SimpleSfM
SetScale	src/GlutViewer.cpp	/^void Drawable::SetScale(double _scale) {$/;"	f	class:Drawable
SetSimpleCalib	src/Camera.cpp	/^void Camera::SetSimpleCalib(int _x_res, int _y_res, double f_fac)$/;"	f	class:alvar::Camera
SetSize	include/ar_track_alvar/Filter.h	/^	void SetSize(size_t size) {$/;"	f	class:alvar::FilterArray
SetThreshParams	include/ar_track_alvar/ConnectedComponents.h	/^	void SetThreshParams(int param1, int param2)$/;"	f	class:alvar::Labeling
SetTrackMarkers	include/ar_track_alvar/MultiMarker.h	/^	int SetTrackMarkers(MarkerDetector<M> &marker_detector, Camera* cam, Pose& pose, IplImage *image=0) {$/;"	f	class:alvar::MultiMarker
SetTranslation	src/Pose.cpp	/^void Pose::SetTranslation(const CvMat *tra) {$/;"	f	class:alvar::Pose
SetTranslation	src/Pose.cpp	/^void Pose::SetTranslation(const double *tra) {$/;"	f	class:alvar::Pose
SetTranslation	src/Pose.cpp	/^void Pose::SetTranslation(const double x, const double y, const double z) {$/;"	f	class:alvar::Pose
SetVerbose	src/Bitset.cpp	/^void BitsetExt::SetVerbose(bool _verbose) {$/;"	f	class:alvar::BitsetExt
SetVideo	src/GlutViewer.cpp	/^void GlutViewer::SetVideo(const IplImage* _image)$/;"	f	class:GlutViewer
SetVideoCallback	src/CvTestbed.cpp	/^void CvTestbed::SetVideoCallback(void (*_videocallback)(IplImage *image)) {$/;"	f	class:CvTestbed
ShowVisibleImages	src/CvTestbed.cpp	/^void CvTestbed::ShowVisibleImages() {$/;"	f	class:CvTestbed
Sign	include/ar_track_alvar/Util.h	/^int ALVAR_EXPORT Sign(const C& v)$/;"	f	namespace:alvar
SimpleSfM	include/ar_track_alvar/SfM.h	/^	SimpleSfM() : tf(200, 200, 0.01, 20, 4, 6), pose_ok(false), update_tri(false), markers_found(false) {}$/;"	f	class:alvar::SimpleSfM
SimpleSfM	include/ar_track_alvar/SfM.h	/^class ALVAR_EXPORT SimpleSfM {$/;"	c	namespace:alvar
Size	include/ar_track_alvar/MultiMarker.h	/^	size_t Size() {$/;"	f	class:alvar::MultiMarker
Sort	include/ar_track_alvar/Container3d.h	/^		int Sort(Compare comp) {$/;"	f	class:alvar::Container3d
Start	src/GlutViewer.cpp	/^void GlutViewer::Start(int argc, char** argv, int w, int h, float r)$/;"	f	class:GlutViewer
StartThreadParameters	src/Threads_win.cpp	/^struct StartThreadParameters$/;"	s	namespace:alvar	file:
StartVideo	src/CvTestbed.cpp	/^bool CvTestbed::StartVideo(Capture *_cap, const char *_wintitle) {$/;"	f	class:CvTestbed
State	src/SampleMarkerCreator.cpp	/^    State() $/;"	f	struct:State
State	src/SampleMarkerCreator.cpp	/^struct State {$/;"	s	file:
StopVideo	include/ar_track_alvar/CvTestbed.h	/^	void StopVideo() { running = false; }$/;"	f	class:CvTestbed
T	include/ar_track_alvar/TrifocalTensor.h	/^    double T[3][3][3];$/;"	m	class:alvar::TrifocalTensor
THREADS_H	include/ar_track_alvar/Threads.h	25;"	d
THREADS_PRIVATE_H	include/ar_track_alvar/Threads_private.h	25;"	d
THRESH	include/ar_track_alvar/ConnectedComponents.h	/^		THRESH,$/;"	e	enum:alvar::Labeling::ThresholdMethod
TIMER_H	include/ar_track_alvar/Timer.h	25;"	d
TIMER_PRIVATE_H	include/ar_track_alvar/Timer_private.h	25;"	d
TRACKERFEATURES_H	include/ar_track_alvar/TrackerFeatures.h	25;"	d
TRACKERORIENTATION_H	include/ar_track_alvar/TrackerOrientation.h	25;"	d
TRACKERPSA_H	include/ar_track_alvar/TrackerPsa.h	25;"	d
TRACKERSTAT_H	include/ar_track_alvar/TrackerStat.h	25;"	d
TRACKER_H	include/ar_track_alvar/Tracker.h	25;"	d
TRACK_ERROR	include/ar_track_alvar/Marker.h	/^    static const int TRACK_ERROR=4;$/;"	m	class:alvar::Marker
TUKEY_LM	include/ar_track_alvar/Optimization.h	/^		TUKEY_LM$/;"	e	enum:alvar::Optimization::OptimizeMethod
TestArAlvarRos	test/test_ar.py	/^class TestArAlvarRos(unittest.TestCase):$/;"	c
Threads	include/ar_track_alvar/Threads.h	/^class ALVAR_EXPORT Threads$/;"	c	namespace:alvar
Threads	src/Threads.cpp	/^Threads::Threads()$/;"	f	class:alvar::Threads
ThreadsPrivate	include/ar_track_alvar/Threads_private.h	/^class ThreadsPrivate$/;"	c	namespace:alvar
ThreadsPrivate	src/Threads_unix.cpp	/^ThreadsPrivate::ThreadsPrivate()$/;"	f	class:alvar::ThreadsPrivate
ThreadsPrivate	src/Threads_win.cpp	/^ThreadsPrivate::ThreadsPrivate()$/;"	f	class:alvar::ThreadsPrivate
ThreadsPrivateData	src/Threads_unix.cpp	/^    ThreadsPrivateData()$/;"	f	class:alvar::ThreadsPrivateData
ThreadsPrivateData	src/Threads_unix.cpp	/^class ThreadsPrivateData$/;"	c	namespace:alvar	file:
ThreadsPrivateData	src/Threads_win.cpp	/^    ThreadsPrivateData()$/;"	f	class:alvar::ThreadsPrivateData
ThreadsPrivateData	src/Threads_win.cpp	/^class ThreadsPrivateData$/;"	c	namespace:alvar	file:
ThresholdMethod	include/ar_track_alvar/ConnectedComponents.h	/^	enum ThresholdMethod $/;"	g	class:alvar::Labeling
Timer	include/ar_track_alvar/Timer.h	/^class ALVAR_EXPORT Timer$/;"	c	namespace:alvar
Timer	src/Timer.cpp	/^Timer::Timer()$/;"	f	class:alvar::Timer
TimerPrivate	include/ar_track_alvar/Timer_private.h	/^class TimerPrivate$/;"	c	namespace:alvar
TimerPrivate	src/Timer_unix.cpp	/^TimerPrivate::TimerPrivate()$/;"	f	class:alvar::TimerPrivate
TimerPrivate	src/Timer_win.cpp	/^TimerPrivate::TimerPrivate()$/;"	f	class:alvar::TimerPrivate
TimerPrivateData	src/Timer_unix.cpp	/^    TimerPrivateData()$/;"	f	class:alvar::TimerPrivateData
TimerPrivateData	src/Timer_unix.cpp	/^class TimerPrivateData$/;"	c	namespace:alvar	file:
TimerPrivateData	src/Timer_win.cpp	/^    TimerPrivateData()$/;"	f	class:alvar::TimerPrivateData
TimerPrivateData	src/Timer_win.cpp	/^class TimerPrivateData$/;"	c	namespace:alvar	file:
ToggleImageVisible	src/CvTestbed.cpp	/^bool CvTestbed::ToggleImageVisible(size_t index, int flags) {$/;"	f	class:CvTestbed
Track	include/ar_track_alvar/EC.h	/^	bool Track(IplImage *img, IplImage *mask, std::map<int,T> &container, F do_handle_test, int type_id=0, int first_id=-1, int last_id=-1)$/;"	f	class:alvar::TrackerFeaturesEC
Track	include/ar_track_alvar/EC.h	/^	bool Track(IplImage *img, IplImage *mask, std::map<int,T> &container, int type_id=-1, int first_id=-1, int last_id=-1)$/;"	f	class:alvar::TrackerFeaturesEC
Track	include/ar_track_alvar/TrackerFeatures.h	/^	double Track(IplImage *img) { return Track(img, true); }$/;"	f	class:alvar::TrackerFeatures
Track	src/TrackerFeatures.cpp	/^double TrackerFeatures::Track(IplImage *img, bool add_features) {$/;"	f	class:alvar::TrackerFeatures
Track	src/TrackerFeatures.cpp	/^double TrackerFeatures::Track(IplImage* img, IplImage* mask)$/;"	f	class:alvar::TrackerFeatures
Track	src/TrackerOrientation.cpp	/^double TrackerOrientation::Track(IplImage *image)$/;"	f	class:alvar::TrackerOrientation
Track	src/TrackerPsa.cpp	/^double TrackerPsa::Track(IplImage *img) {$/;"	f	class:alvar::TrackerPsa
Track	src/TrackerPsa.cpp	/^double TrackerPsaRot::Track(IplImage *img) {$/;"	f	class:alvar::TrackerPsaRot
Track	src/TrackerStat.cpp	/^double TrackerStat::Track(IplImage *img) $/;"	f	class:alvar::TrackerStat
Track	src/TrackerStat.cpp	/^double TrackerStatRot::Track(IplImage *img)$/;"	f	class:alvar::TrackerStatRot
TrackHid	src/TrackerFeatures.cpp	/^double TrackerFeatures::TrackHid(IplImage *img, IplImage *new_features_mask, bool add_features) {$/;"	f	class:alvar::TrackerFeatures
TrackMarkerAdd	src/MarkerDetector.cpp	/^	void MarkerDetectorImpl::TrackMarkerAdd(int id, PointDouble corners[4]) {$/;"	f	class:alvar::MarkerDetectorImpl
TrackMarkersReset	src/MarkerDetector.cpp	/^	void MarkerDetectorImpl::TrackMarkersReset() {$/;"	f	class:alvar::MarkerDetectorImpl
Tracker	include/ar_track_alvar/Tracker.h	/^	Tracker() {}$/;"	f	class:alvar::Tracker
Tracker	include/ar_track_alvar/Tracker.h	/^class ALVAR_EXPORT Tracker {$/;"	c	namespace:alvar
TrackerFeatures	include/ar_track_alvar/TrackerFeatures.h	/^class ALVAR_EXPORT TrackerFeatures : public Tracker {$/;"	c	namespace:alvar
TrackerFeatures	src/TrackerFeatures.cpp	/^TrackerFeatures::TrackerFeatures(int _max_features, int _min_features, double _quality_level, double _min_distance, int _pyr_levels, int _win_size) :$/;"	f	class:alvar::TrackerFeatures
TrackerFeaturesEC	include/ar_track_alvar/EC.h	/^	TrackerFeaturesEC(int _max_features=100, int _min_features=90, double _quality_level=0.01, double _min_distance=10, int _pyr_levels=4, int win_size=6)$/;"	f	class:alvar::TrackerFeaturesEC
TrackerFeaturesEC	include/ar_track_alvar/EC.h	/^class TrackerFeaturesEC : public TrackerFeatures {$/;"	c	namespace:alvar
TrackerOrientation	include/ar_track_alvar/TrackerOrientation.h	/^	TrackerOrientation(int width, int height, int image_scale=1, int outlier_limit=20)$/;"	f	class:alvar::TrackerOrientation
TrackerOrientation	include/ar_track_alvar/TrackerOrientation.h	/^class ALVAR_EXPORT TrackerOrientation : public Tracker {$/;"	c	namespace:alvar
TrackerPsa	include/ar_track_alvar/TrackerPsa.h	/^class ALVAR_EXPORT TrackerPsa : public Tracker {$/;"	c	namespace:alvar
TrackerPsa	src/TrackerPsa.cpp	/^TrackerPsa::TrackerPsa(int _max_shift) {$/;"	f	class:alvar::TrackerPsa
TrackerPsaRot	include/ar_track_alvar/TrackerPsa.h	/^class ALVAR_EXPORT TrackerPsaRot : public TrackerPsa {$/;"	c	namespace:alvar
TrackerPsaRot	src/TrackerPsa.cpp	/^TrackerPsaRot::TrackerPsaRot(int _max_shift) : TrackerPsa(_max_shift) {$/;"	f	class:alvar::TrackerPsaRot
TrackerStat	include/ar_track_alvar/TrackerStat.h	/^class ALVAR_EXPORT TrackerStat : public Tracker {$/;"	c	namespace:alvar
TrackerStat	src/TrackerStat.cpp	/^TrackerStat::TrackerStat(int binsize) : f(100,90) {$/;"	f	class:alvar::TrackerStat
TrackerStatRot	include/ar_track_alvar/TrackerStat.h	/^class ALVAR_EXPORT TrackerStatRot : public TrackerStat {$/;"	c	namespace:alvar
TrackerStatRot	src/TrackerStat.cpp	/^TrackerStatRot::TrackerStatRot(int binsize \/*=8*\/, int binsize_rot\/*=3*\/) : TrackerStat(binsize) {$/;"	f	class:alvar::TrackerStatRot
Transpose	src/Pose.cpp	/^void Pose::Transpose()$/;"	f	class:alvar::Pose
Transpose	src/Rotation.cpp	/^void Rotation::Transpose()$/;"	f	class:alvar::Rotation
TrifocalTensor	include/ar_track_alvar/TrifocalTensor.h	/^  class ALVAR_EXPORT TrifocalTensor {$/;"	c	namespace:alvar
TrifocalTensor	src/TrifocalTensor.cpp	/^TrifocalTensor::TrifocalTensor() {$/;"	f	class:alvar::TrifocalTensor
TrifocalTensor	src/TrifocalTensor.cpp	/^TrifocalTensor::TrifocalTensor(const Pose &p0, const Pose &p1) {$/;"	f	class:alvar::TrifocalTensor
TrifocalTensor	src/TrifocalTensor.cpp	/^TrifocalTensor::TrifocalTensor(const Pose &p0, const Pose &p1, const Pose &p2) {$/;"	f	class:alvar::TrifocalTensor
UNCOPYABLE_H	include/ar_track_alvar/Uncopyable.h	25;"	d
USE_FOR_POSE	include/ar_track_alvar/TrackerOrientation.h	/^		enum {NONE=0, USE_FOR_POSE, IS_OUTLIER, IS_INITIAL} status3D;$/;"	e	enum:alvar::TrackerOrientation::Feature::__anon3
UTIL_H	include/ar_track_alvar/Util.h	25;"	d
Uncopyable	include/ar_track_alvar/Uncopyable.h	/^    Uncopyable()$/;"	f	class:alvar::Uncopyable
Uncopyable	include/ar_track_alvar/Uncopyable.h	/^class ALVAR_EXPORT Uncopyable$/;"	c	namespace:alvar
Undistort	include/ar_track_alvar/EC.h	/^	void Undistort(std::map<int,T> &container, F &do_handle_test) {$/;"	f	class:alvar::CameraEC
Undistort	include/ar_track_alvar/EC.h	/^	void Undistort(std::map<int,T> &container, int type_id=-1) {$/;"	f	class:alvar::CameraEC
Undistort	src/Camera.cpp	/^void Camera::Undistort(CvPoint2D32f& point)$/;"	f	class:alvar::Camera
Undistort	src/Camera.cpp	/^void Camera::Undistort(PointDouble &point)$/;"	f	class:alvar::Camera
Undistort	src/Camera.cpp	/^void Camera::Undistort(vector<PointDouble >& points)$/;"	f	class:alvar::Camera
UnscentedKalman	include/ar_track_alvar/UnscentedKalman.h	/^  class ALVAR_EXPORT UnscentedKalman {$/;"	c	namespace:alvar
UnscentedKalman	src/UnscentedKalman.cpp	/^UnscentedKalman::UnscentedKalman(int state_n, int obs_n, int state_k, double alpha, double beta) {$/;"	f	class:alvar::UnscentedKalman
UnscentedObservation	include/ar_track_alvar/UnscentedKalman.h	/^  class ALVAR_EXPORT UnscentedObservation {$/;"	c	namespace:alvar
UnscentedProcess	include/ar_track_alvar/UnscentedKalman.h	/^  class ALVAR_EXPORT UnscentedProcess {$/;"	c	namespace:alvar
Update	include/ar_track_alvar/MultiMarker.h	/^	double Update(const std::vector<M, Eigen::aligned_allocator<M> >* markers, Camera* cam, Pose& pose, IplImage* image = 0)$/;"	f	class:alvar::MultiMarker
Update	include/ar_track_alvar/MultiMarkerFiltered.h	/^	double Update(const std::vector<M>* markers, Camera* cam, Pose& pose, IplImage* image = 0)$/;"	f	class:alvar::MultiMarkerFiltered
Update	src/IntegralImage.cpp	/^void IntegralGradient::Update(IplImage *gray) {$/;"	f	class:alvar::IntegralGradient
Update	src/IntegralImage.cpp	/^void IntegralImage::Update(IplImage *gray) {$/;"	f	class:alvar::IntegralImage
Update	src/SfM.cpp	/^bool SimpleSfM::Update(IplImage *image, bool assume_plane, bool triangulate, float reproj_err_limit, float triangulate_angle) {$/;"	f	class:alvar::SimpleSfM
UpdateContent	src/Marker.cpp	/^bool Marker::UpdateContent(vector<PointDouble > &_marker_corners_img, IplImage *gray, Camera *cam, int frame_no \/*= 0*\/) {$/;"	f	class:alvar::Marker
UpdateContent	src/Marker.cpp	/^bool MarkerData::UpdateContent(vector<PointDouble > &_marker_corners_img, IplImage *gray, Camera *cam, int frame_no \/*= 0*\/) {$/;"	f	class:alvar::MarkerData
UpdateContentBasic	src/Marker.cpp	/^bool Marker::UpdateContentBasic(vector<PointDouble > &_marker_corners_img, IplImage *gray, Camera *cam, int frame_no \/*= 0*\/) {$/;"	f	class:alvar::Marker
UpdateDistance	src/SfM.cpp	/^	bool UpdateDistance(Pose* pose, double limit=10)$/;"	f	class:alvar::CameraMoves
UpdatePose	include/ar_track_alvar/EC.h	/^	bool UpdatePose(std::map<int,T> &container, Pose *pose, F do_handle_test, std::map<int,double> *weights=0) {$/;"	f	class:alvar::CameraEC
UpdatePose	include/ar_track_alvar/EC.h	/^	bool UpdatePose(std::map<int,T> &container, Pose *pose, int type_id=-1, std::map<int,double> *weights=0) {$/;"	f	class:alvar::CameraEC
UpdatePose	src/EC.cpp	/^bool CameraEC::UpdatePose(const CvMat* object_points, CvMat* image_points, CvMat *rot, CvMat *tra, CvMat *weights) {$/;"	f	class:alvar::CameraEC
UpdatePose	src/EC.cpp	/^bool CameraEC::UpdatePose(const CvMat* object_points, CvMat* image_points, Pose *pose, CvMat *weights) {$/;"	f	class:alvar::CameraEC
UpdatePose	src/Marker.cpp	/^void Marker::UpdatePose(vector<PointDouble > &_marker_corners_img, Camera *cam, int orientation, int frame_no \/* =0 *\/, bool update_pose \/* =true *\/) {$/;"	f	class:alvar::Marker
UpdatePose	src/TrackerOrientation.cpp	/^bool TrackerOrientation::UpdatePose(IplImage *image)$/;"	f	class:alvar::TrackerOrientation
UpdateRotation	include/ar_track_alvar/EC.h	/^	bool UpdateRotation(std::map<int,T> &container, Pose *pose, F do_handle_test) {$/;"	f	class:alvar::CameraEC
UpdateRotation	include/ar_track_alvar/EC.h	/^	bool UpdateRotation(std::map<int,T> &container, Pose *pose, int type_id=-1) {$/;"	f	class:alvar::CameraEC
UpdateRotation	src/EC.cpp	/^bool CameraEC::UpdateRotation(const CvMat* object_points, CvMat* image_points, CvMat *rot, CvMat *tra) {$/;"	f	class:alvar::CameraEC
UpdateRotation	src/EC.cpp	/^bool CameraEC::UpdateRotation(const CvMat* object_points, CvMat* image_points, Pose *pose)$/;"	f	class:alvar::CameraEC
UpdateRotationOnly	src/TrackerOrientation.cpp	/^bool TrackerOrientation::UpdateRotationOnly(IplImage *gray, IplImage *image)$/;"	f	class:alvar::TrackerOrientation
UpdateRotationsOnly	src/SfM.cpp	/^bool SimpleSfM::UpdateRotationsOnly(IplImage *image) {$/;"	f	class:alvar::SimpleSfM
UpdateTriangulateOnly	src/SfM.cpp	/^bool SimpleSfM::UpdateTriangulateOnly(IplImage *image) {$/;"	f	class:alvar::SimpleSfM
UsableDataBits	src/Marker.cpp	/^int MarkerData::UsableDataBits(int marker_res, int hamming) {$/;"	f	class:alvar::MarkerData
VISIBLE_MARKER	nodes/FindMarkerBundles.cpp	72;"	d	file:
VISIBLE_MARKER	nodes/FindMarkerBundlesNoKinect.cpp	54;"	d	file:
VISIBLE_MARKER	nodes/TrainMarkerBundle.cpp	55;"	d	file:
VideoSampler	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^      VideoSampler(CaptureDSCapture *_parent) : parent(_parent) {}$/;"	f	class:alvar::plugins::CaptureDSCapture::VideoSampler
VideoSampler	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^    class VideoSampler : public IVideoCallback {$/;"	c	class:alvar::plugins::CaptureDSCapture
Visualize	src/Marker.cpp	/^void Marker::Visualize(IplImage *image, Camera *cam, CvScalar color) const {$/;"	f	class:alvar::Marker
VisualizeMarkerContent	src/Marker.cpp	/^void Marker::VisualizeMarkerContent(IplImage *image, Camera *cam, double datatext_point[2], double content_point[2]) const {$/;"	f	class:alvar::Marker
VisualizeMarkerContent	src/Marker.cpp	/^void MarkerData::VisualizeMarkerContent(IplImage *image, Camera *cam, double datatext_point[2], double content_point[2]) const {$/;"	f	class:alvar::MarkerData
VisualizeMarkerError	src/Marker.cpp	/^void Marker::VisualizeMarkerError(IplImage *image, Camera *cam, double errortext_point[2]) const {$/;"	f	class:alvar::Marker
VisualizeMarkerPose	src/Marker.cpp	/^void Marker::VisualizeMarkerPose(IplImage *image, Camera *cam, double visualize2d_points[12][2], CvScalar color) const {$/;"	f	class:alvar::Marker
W	include/ar_track_alvar/Optimization.h	/^	CvMat *W;$/;"	m	class:alvar::Optimization
WaitKeys	src/CvTestbed.cpp	/^void CvTestbed::WaitKeys() {$/;"	f	class:CvTestbed
_F_v	include/ar_track_alvar/TrackerOrientation.h	/^	std::map<int,Feature> _F_v;$/;"	m	class:alvar::TrackerOrientation
_GLUTVIEWER_H_	include/ar_track_alvar/GlutViewer.h	2;"	d
_GetPose	src/MultiMarker.cpp	/^double MultiMarker::_GetPose(MarkerIterator &begin, MarkerIterator &end, Camera* cam, Pose& pose, IplImage* image) {$/;"	f	class:alvar::MultiMarker
_LINE_H	include/ar_track_alvar/Line.h	25;"	d
_MeasurementsAdd	src/MultiMarkerBundle.cpp	/^void MultiMarkerBundle::_MeasurementsAdd(MarkerIterator &begin, MarkerIterator &end, const Pose& camera_pose) {$/;"	f	class:alvar::MultiMarkerBundle
_SetTrackMarkers	src/MultiMarker.cpp	/^int MultiMarker::_SetTrackMarkers(MarkerDetectorImpl &marker_detector, Camera* cam, Pose& pose, IplImage *image) {$/;"	f	class:alvar::MultiMarker
_Update	src/MultiMarkerFiltered.cpp	/^double MultiMarkerFiltered::_Update(MarkerIterator &begin, MarkerIterator &end, $/;"	f	class:alvar::MultiMarkerFiltered
__Ransac_h__	include/ar_track_alvar/Ransac.h	25;"	d
__TRIFOCAL_TENSOR__	include/ar_track_alvar/TrifocalTensor.h	25;"	d
__UNSCENTED_KALMAN__	include/ar_track_alvar/UnscentedKalman.h	25;"	d
_begin	include/ar_track_alvar/Marker.h	/^    const_iterator_aligntype _begin;$/;"	m	class:alvar::MarkerIteratorImpl
_camera	include/ar_track_alvar/TrackerOrientation.h	/^	Camera				 *_camera;$/;"	m	class:alvar::TrackerOrientation
_data	include/ar_track_alvar/Marker.h	/^    void *_data;$/;"	m	class:alvar::MarkerIterator
_doEstimate	include/ar_track_alvar/Ransac.h	/^    void _doEstimate(int* params, int param_c, void* model) {$/;"	f	class:alvar::IndexRansac
_doEstimate	include/ar_track_alvar/Ransac.h	/^    void _doEstimate(void** params, int param_c, void* model) {$/;"	f	class:alvar::Ransac
_doEstimate	include/ar_track_alvar/Ransac.h	/^  virtual void _doEstimate(int* params, int param_c, void* model) {};$/;"	f	class:alvar::RansacImpl
_doEstimate	include/ar_track_alvar/Ransac.h	/^  virtual void _doEstimate(void** params, int param_c, void* model) {};$/;"	f	class:alvar::RansacImpl
_doSupports	include/ar_track_alvar/Ransac.h	/^    bool _doSupports(int param, void* model) {$/;"	f	class:alvar::IndexRansac
_doSupports	include/ar_track_alvar/Ransac.h	/^    bool _doSupports(void* param, void* model) {$/;"	f	class:alvar::Ransac
_doSupports	include/ar_track_alvar/Ransac.h	/^  virtual bool _doSupports(int param, void* model) { return false; };$/;"	f	class:alvar::RansacImpl
_doSupports	include/ar_track_alvar/Ransac.h	/^  virtual bool _doSupports(void* param, void* model) { return false; };$/;"	f	class:alvar::RansacImpl
_estimate	src/Ransac.cpp	/^int RansacImpl::_estimate(int param_c,$/;"	f	class:alvar::RansacImpl
_estimate	src/Ransac.cpp	/^int RansacImpl::_estimate(void* params, int param_c,$/;"	f	class:alvar::RansacImpl
_ft	include/ar_track_alvar/TrackerOrientation.h	/^	TrackerFeatures		  _ft;$/;"	m	class:alvar::TrackerOrientation
_grsc	include/ar_track_alvar/TrackerOrientation.h	/^	IplImage			 *_grsc;$/;"	m	class:alvar::TrackerOrientation
_i	include/ar_track_alvar/Marker.h	/^    const_iterator_aligntype _i;$/;"	m	class:alvar::MarkerIteratorImpl
_id	include/ar_track_alvar/MultiMarkerInitializer.h	/^		long _id;$/;"	m	class:alvar::MultiMarkerInitializer::MarkerMeasurement
_image_scale	include/ar_track_alvar/TrackerOrientation.h	/^	int					  _image_scale;$/;"	m	class:alvar::TrackerOrientation
_lookup_tf	test/test_ar.py	/^    def _lookup_tf(self, origin, target):$/;"	m	class:TestArAlvarRos
_markers_clear	include/ar_track_alvar/MarkerDetector.h	/^  void _markers_clear() { markers->clear(); }$/;"	f	class:alvar::MarkerDetector
_markers_push_back	include/ar_track_alvar/MarkerDetector.h	/^  void _markers_push_back(Marker *mn) { markers->push_back(*((M*)mn)); }$/;"	f	class:alvar::MarkerDetector
_markers_size	include/ar_track_alvar/MarkerDetector.h	/^  size_t _markers_size() { return markers->size(); }$/;"	f	class:alvar::MarkerDetector
_min_area	include/ar_track_alvar/ConnectedComponents.h	/^	int _min_area;$/;"	m	class:alvar::LabelingCvSeq
_min_edge	include/ar_track_alvar/ConnectedComponents.h	/^	int _min_edge;$/;"	m	class:alvar::LabelingCvSeq
_n_blobs	include/ar_track_alvar/ConnectedComponents.h	/^	int _n_blobs;$/;"	m	class:alvar::LabelingCvSeq
_object_model	include/ar_track_alvar/TrackerOrientation.h	/^	CvMat				 *_object_model;$/;"	m	class:alvar::TrackerOrientation
_outlier_limit	include/ar_track_alvar/TrackerOrientation.h	/^	int					  _outlier_limit;$/;"	m	class:alvar::TrackerOrientation
_pose	include/ar_track_alvar/TrackerOrientation.h	/^	Pose				  _pose;$/;"	m	class:alvar::TrackerOrientation
_refine	src/Ransac.cpp	/^int RansacImpl::_refine(int param_c,$/;"	f	class:alvar::RansacImpl
_refine	src/Ransac.cpp	/^int RansacImpl::_refine(void* params, int param_c,$/;"	f	class:alvar::RansacImpl
_swap_marker_tables	include/ar_track_alvar/MarkerDetector.h	/^  void _swap_marker_tables() {$/;"	f	class:alvar::MarkerDetector
_track_markers_at	include/ar_track_alvar/MarkerDetector.h	/^  Marker* _track_markers_at(size_t i) { return &track_markers->at(i); }$/;"	f	class:alvar::MarkerDetector
_track_markers_clear	include/ar_track_alvar/MarkerDetector.h	/^  void _track_markers_clear() { track_markers->clear(); }$/;"	f	class:alvar::MarkerDetector
_track_markers_push_back	include/ar_track_alvar/MarkerDetector.h	/^  void _track_markers_push_back(Marker *mn) { track_markers->push_back(*((M*)mn)); }$/;"	f	class:alvar::MarkerDetector
_track_markers_size	include/ar_track_alvar/MarkerDetector.h	/^  size_t _track_markers_size() { return track_markers->size(); }$/;"	f	class:alvar::MarkerDetector
_xres	include/ar_track_alvar/TrackerOrientation.h	/^	int					  _xres;$/;"	m	class:alvar::TrackerOrientation
_yres	include/ar_track_alvar/TrackerOrientation.h	/^	int					  _yres;$/;"	m	class:alvar::TrackerOrientation
a_argc	src/GlutViewer.cpp	/^int a_argc;$/;"	v
a_argv	src/GlutViewer.cpp	/^char **a_argv;$/;"	v
absdiff	src/ConnectedComponents.cpp	/^inline T absdiff(T c1, T c2) {$/;"	f	namespace:alvar
acc_dim0	include/ar_track_alvar/Util.h	/^	std::map<Index, double> acc_dim0;$/;"	m	class:alvar::HistogramSubpixel
acc_dim1	include/ar_track_alvar/Util.h	/^	std::map<Index, double> acc_dim1;$/;"	m	class:alvar::HistogramSubpixel
acc_dim2	include/ar_track_alvar/Util.h	/^	std::map<Index, double> acc_dim2;$/;"	m	class:alvar::HistogramSubpixel
addPose	src/medianFilter.cpp	/^  void MedianFilter::addPose(const Pose &new_pose){$/;"	f	class:ar_track_alvar::MedianFilter
add_measurement	nodes/TrainMarkerBundle.cpp	/^bool add_measurement=false;$/;"	v
add_measurement	src/SampleMultiMarkerBundle.cpp	/^bool add_measurement=false;$/;"	v
allocateXMLMatrix	src/FileFormatUtils.cpp	/^	CvMat* FileFormatUtils::allocateXMLMatrix(const TiXmlElement *xml_matrix) {$/;"	f	class:alvar::FileFormatUtils
alpha	include/ar_track_alvar/Filter.h	/^	double alpha;$/;"	m	class:alvar::FilterRunningAverage
alvar	include/ar_track_alvar/Alvar.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/AlvarException.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Bitset.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Camera.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Capture.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/CaptureDevice.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/CaptureFactory.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/CaptureFactory_private.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/CapturePlugin.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/ConnectedComponents.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Container3d.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/DirectoryIterator.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/DirectoryIterator_private.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Draw.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/EC.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/FernImageDetector.h	/^namespace alvar{$/;"	n
alvar	include/ar_track_alvar/FernPoseEstimator.h	/^namespace alvar$/;"	n
alvar	include/ar_track_alvar/FileFormat.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/FileFormatUtils.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Filter.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/IntegralImage.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Kalman.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Line.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Lock.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Marker.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/MarkerDetector.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/MultiMarker.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/MultiMarkerBundle.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/MultiMarkerFiltered.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/MultiMarkerInitializer.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Mutex.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Mutex_private.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Optimization.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Platform.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Plugin.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Plugin_private.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Pose.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Ransac.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Rotation.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/SfM.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Threads.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Threads_private.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Timer.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Timer_private.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Tracker.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/TrackerFeatures.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/TrackerOrientation.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/TrackerPsa.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/TrackerStat.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/TrifocalTensor.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Uncopyable.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/UnscentedKalman.h	/^namespace alvar {$/;"	n
alvar	include/ar_track_alvar/Util.h	/^namespace alvar {$/;"	n
alvar	src/Alvar.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Bitset.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Camera.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/CaptureDevice.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/CaptureFactory.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/CaptureFactory_unix.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/CaptureFactory_win.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/ConnectedComponents.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/DirectoryIterator.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/DirectoryIterator_unix.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/DirectoryIterator_win.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Draw.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/EC.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/FernImageDetector.cpp	/^namespace alvar$/;"	n	file:
alvar	src/FernPoseEstimator.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/FileFormatUtils.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Filter.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/IntegralImage.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Kalman.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Line.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Marker.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/MarkerDetector.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/MultiMarker.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/MultiMarkerBundle.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/MultiMarkerFiltered.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/MultiMarkerInitializer.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Mutex.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Mutex_unix.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Mutex_win.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Optimization.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Platform.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Plugin.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Plugin_unix.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Plugin_win.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Pose.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Ransac.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Rotation.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/SfM.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Threads.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Threads_unix.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Threads_win.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Timer.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Timer_unix.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Timer_win.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/TrackerFeatures.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/TrackerOrientation.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/TrackerPsa.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/TrackerStat.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/TrifocalTensor.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/UnscentedKalman.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/Util.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/platform/capture_plugin_cmu/CapturePluginCmu.h	/^namespace alvar {$/;"	n
alvar	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^namespace alvar {$/;"	n
alvar	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/platform/capture_plugin_file/CapturePluginFile.h	/^namespace alvar {$/;"	n
alvar	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/platform/capture_plugin_highgui/CapturePluginHighgui.h	/^namespace alvar {$/;"	n
alvar	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^namespace alvar {$/;"	n	file:
alvar	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	/^namespace alvar {$/;"	n
alvarBasicLoader	src/Alvar.cpp	/^} alvarBasicLoader;$/;"	m	namespace:alvar	typeref:struct:alvar::AlvarLoader	file:
alvarInfo	src/Alvar.cpp	/^void alvarInfo()$/;"	f	namespace:alvar
angle	src/Util.cpp	/^double angle(CvPoint *A,CvPoint *B, CvPoint *C,CvPoint *D, int isDirectionDependent){$/;"	f	namespace:alvar
arMarkerPub_	nodes/FindMarkerBundles.cpp	/^ros::Publisher arMarkerPub_;$/;"	v
arMarkerPub_	nodes/FindMarkerBundlesNoKinect.cpp	/^ros::Publisher arMarkerPub_;$/;"	v
arMarkerPub_	nodes/IndividualMarkers.cpp	/^ros::Publisher arMarkerPub_;$/;"	v
arMarkerPub_	nodes/IndividualMarkersNoKinect.cpp	/^ros::Publisher arMarkerPub_;$/;"	v
arMarkerPub_	nodes/TrainMarkerBundle.cpp	/^ros::Publisher arMarkerPub_;$/;"	v
arPoseMarkers_	nodes/FindMarkerBundles.cpp	/^ar_track_alvar_msgs::AlvarMarkers arPoseMarkers_;$/;"	v
arPoseMarkers_	nodes/FindMarkerBundlesNoKinect.cpp	/^ar_track_alvar_msgs::AlvarMarkers arPoseMarkers_;$/;"	v
arPoseMarkers_	nodes/IndividualMarkers.cpp	/^ar_track_alvar_msgs::AlvarMarkers arPoseMarkers_;$/;"	v
arPoseMarkers_	nodes/IndividualMarkersNoKinect.cpp	/^ar_track_alvar_msgs::AlvarMarkers arPoseMarkers_;$/;"	v
arPoseMarkers_	nodes/TrainMarkerBundle.cpp	/^ar_track_alvar_msgs::AlvarMarkers arPoseMarkers_;$/;"	v
ar_track_alvar	include/ar_track_alvar/filter/kinect_filtering.h	/^namespace ar_track_alvar$/;"	n
ar_track_alvar	include/ar_track_alvar/filter/medianFilter.h	/^namespace ar_track_alvar$/;"	n
ar_track_alvar	src/kinect_filtering.cpp	/^namespace ar_track_alvar$/;"	n	file:
ar_track_alvar	src/medianFilter.cpp	/^namespace ar_track_alvar$/;"	n	file:
ar_window	src/GlutViewer.cpp	/^int ar_window;$/;"	v
arr	include/ar_track_alvar/Filter.h	/^	std::vector<F> arr;$/;"	m	class:alvar::FilterArray
array	src/SampleMarkerCreator.cpp	/^    bool   array;$/;"	m	struct:State	file:
as_double_array	include/ar_track_alvar/Filter.h	/^	const double *as_double_array(size_t start_i=0) {$/;"	f	class:alvar::FilterArray
auto_collect	nodes/TrainMarkerBundle.cpp	/^bool auto_collect;$/;"	v
auto_count	nodes/TrainMarkerBundle.cpp	/^int auto_count;$/;"	v
ax_len	include/ar_track_alvar/GlutViewer.h	/^	double ax_len;$/;"	m	class:Drawable
azim	src/GlutViewer.cpp	/^float elev = 0.0, azim = 0.0, rad = 0.0;$/;"	v
begin	include/ar_track_alvar/Container3d.h	/^		Iterator begin() {$/;"	f	class:alvar::Container3d
bins	include/ar_track_alvar/Util.h	/^	std::map<Index, int> bins;$/;"	m	class:alvar::Histogram
bits	include/ar_track_alvar/Bitset.h	/^	std::deque<bool> bits;$/;"	m	class:alvar::Bitset
blob_corners	include/ar_track_alvar/ConnectedComponents.h	/^	std::vector<std::vector<PointDouble> > blob_corners;$/;"	m	class:alvar::Labeling
breset	include/ar_track_alvar/Filter.h	/^	bool breset;$/;"	m	class:alvar::FilterRunningAverage
buffer	include/ar_track_alvar/Filter.h	/^	std::deque<double> buffer;$/;"	m	class:alvar::FilterAverage
buffer_size	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^    unsigned int buffer_size;$/;"	m	class:alvar::plugins::CaptureDSCapture
bundlePoses	nodes/FindMarkerBundles.cpp	/^Pose *bundlePoses;$/;"	v
bundlePoses	nodes/FindMarkerBundlesNoKinect.cpp	/^Pose *bundlePoses;$/;"	v
bundle_indices	nodes/FindMarkerBundles.cpp	/^std::vector<int> *bundle_indices; 	$/;"	v
bundle_indices	nodes/FindMarkerBundlesNoKinect.cpp	/^std::vector<int> *bundle_indices; 	$/;"	v
bundles_seen	nodes/FindMarkerBundles.cpp	/^int *bundles_seen;$/;"	v
bundles_seen	nodes/FindMarkerBundlesNoKinect.cpp	/^bool *bundles_seen;$/;"	v
bw	include/ar_track_alvar/ConnectedComponents.h	/^	IplImage *bw;$/;"	m	class:alvar::Labeling
c	include/ar_track_alvar/Line.h	/^	PointDouble c; \/\/ center$/;"	m	struct:alvar::Line
calcAndSaveMasterCoords	nodes/FindMarkerBundles.cpp	/^int calcAndSaveMasterCoords(MultiMarkerBundle &master)$/;"	f
calculateFromPointCorrespondences	src/FernPoseEstimator.cpp	/^void FernPoseEstimator::calculateFromPointCorrespondences(FernPoseEstimator::ModelPointVector &mpts, FernPoseEstimator::ImagePointVector &ipts)$/;"	f	class:alvar::FernPoseEstimator
calib_D	include/ar_track_alvar/Camera.h	/^	CvMat calib_D; double calib_D_data[4];$/;"	m	class:alvar::Camera
calib_D_data	include/ar_track_alvar/Camera.h	/^	CvMat calib_D; double calib_D_data[4];$/;"	m	class:alvar::Camera
calib_K	include/ar_track_alvar/Camera.h	/^	CvMat calib_K; double calib_K_data[3][3];$/;"	m	class:alvar::Camera
calib_K_data	include/ar_track_alvar/Camera.h	/^	CvMat calib_K; double calib_K_data[3][3];$/;"	m	class:alvar::Camera
calib_count_max	src/SampleCamCalib.cpp	/^const int calib_count_max=50;$/;"	v
calib_x_res	include/ar_track_alvar/Camera.h	/^	int calib_x_res;$/;"	m	class:alvar::Camera
calib_y_res	include/ar_track_alvar/Camera.h	/^	int calib_y_res;$/;"	m	class:alvar::Camera
calibrationFilename	src/SampleCamCalib.cpp	/^std::stringstream calibrationFilename;$/;"	v
calibrationFilename	src/SampleMarkerDetector.cpp	/^std::stringstream calibrationFilename;$/;"	v
calibrationFilename	src/SampleMarkerHide.cpp	/^std::stringstream calibrationFilename;$/;"	v
calibrationFilename	src/SampleMarkerlessDetector.cpp	/^std::stringstream calibrationFilename;$/;"	v
calibrationFilename	src/SampleMultiMarker.cpp	/^std::stringstream calibrationFilename;$/;"	v
calibrationFilename	src/SampleMultiMarkerBundle.cpp	/^std::stringstream calibrationFilename;$/;"	v
calibrationFilename	src/SamplePointcloud.cpp	/^std::stringstream calibrationFilename;$/;"	v
calibrationFilename	src/SampleTrack.cpp	/^std::stringstream calibrationFilename;$/;"	v
cam	include/ar_track_alvar/ConnectedComponents.h	/^	Camera	 *cam;$/;"	m	class:alvar::Labeling
cam	include/ar_track_alvar/SfM.h	/^	CameraEC cam;$/;"	m	class:alvar::SimpleSfM
cam	nodes/IndividualMarkers.cpp	/^Camera *cam;$/;"	v
cam	nodes/IndividualMarkersNoKinect.cpp	/^Camera *cam;$/;"	v
cam	src/SampleMarkerDetector.cpp	/^Camera cam;$/;"	v
camInfoCallback	src/Camera.cpp	/^void Camera::camInfoCallback (const sensor_msgs::CameraInfoConstPtr & cam_info)$/;"	f	class:alvar::Camera
cam_image_topic	nodes/FindMarkerBundles.cpp	/^std::string cam_image_topic; $/;"	v
cam_image_topic	nodes/FindMarkerBundlesNoKinect.cpp	/^std::string cam_image_topic; $/;"	v
cam_image_topic	nodes/IndividualMarkers.cpp	/^std::string cam_image_topic;$/;"	v
cam_image_topic	nodes/IndividualMarkersNoKinect.cpp	/^std::string cam_image_topic;$/;"	v
cam_image_topic	nodes/TrainMarkerBundle.cpp	/^std::string cam_image_topic; $/;"	v
cam_info_	include/ar_track_alvar/Camera.h	/^	sensor_msgs::CameraInfo cam_info_;$/;"	m	class:alvar::Camera
cam_info_topic	nodes/FindMarkerBundles.cpp	/^std::string cam_info_topic; $/;"	v
cam_info_topic	nodes/FindMarkerBundlesNoKinect.cpp	/^std::string cam_info_topic; $/;"	v
cam_info_topic	nodes/IndividualMarkers.cpp	/^std::string cam_info_topic;$/;"	v
cam_info_topic	nodes/IndividualMarkersNoKinect.cpp	/^std::string cam_info_topic;$/;"	v
cam_info_topic	nodes/TrainMarkerBundle.cpp	/^std::string cam_info_topic; $/;"	v
cam_sub_	nodes/FindMarkerBundles.cpp	/^image_transport::Subscriber cam_sub_;$/;"	v
cam_sub_	nodes/FindMarkerBundlesNoKinect.cpp	/^image_transport::Subscriber cam_sub_;$/;"	v
cam_sub_	nodes/IndividualMarkers.cpp	/^image_transport::Subscriber cam_sub_;$/;"	v
cam_sub_	nodes/IndividualMarkersNoKinect.cpp	/^image_transport::Subscriber cam_sub_;$/;"	v
cam_sub_	nodes/TrainMarkerBundle.cpp	/^image_transport::Subscriber cam_sub_;$/;"	v
camera	src/EC.cpp	/^	Camera *camera;$/;"	m	struct:alvar::ProjectParams	file:
camera	src/FernPoseEstimator.cpp	/^Camera FernPoseEstimator::camera() const$/;"	f	class:alvar::FernPoseEstimator
camera	src/MultiMarkerBundle.cpp	/^Camera *camera; \/\/ TODO: This should not be global (use the param instead)$/;"	m	namespace:alvar	file:
cameraInfoTopic_	include/ar_track_alvar/Camera.h	/^	std::string cameraInfoTopic_;$/;"	m	class:alvar::Camera
camera_poses	include/ar_track_alvar/MultiMarkerBundle.h	/^	std::vector<Pose> camera_poses; \/\/ Estimated camera pose for every frame$/;"	m	class:alvar::MultiMarkerBundle
cap	include/ar_track_alvar/CvTestbed.h	/^    Capture *cap;$/;"	m	class:CvTestbed
captureDevice	include/ar_track_alvar/Capture.h	/^    CaptureDevice captureDevice() {return mCaptureDevice;}$/;"	f	class:alvar::Capture
captureImage	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^IplImage *CaptureCmu::captureImage()$/;"	f	class:alvar::plugins::CaptureCmu
captureImage	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^IplImage *CaptureDSCapture::captureImage()$/;"	f	class:alvar::plugins::CaptureDSCapture
captureImage	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^IplImage *CaptureFile::captureImage()$/;"	f	class:alvar::plugins::CaptureFile
captureImage	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^IplImage *CaptureHighgui::captureImage()$/;"	f	class:alvar::plugins::CaptureHighgui
captureImage	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^IplImage *CapturePtgrey::captureImage()$/;"	f	class:alvar::plugins::CapturePtgrey
captureType	src/CaptureDevice.cpp	/^std::string CaptureDevice::captureType() const$/;"	f	class:alvar::CaptureDevice
centroid	src/kinect_filtering.cpp	/^  gm::Point centroid (const ARCloud& points)$/;"	f	namespace:ar_track_alvar
clear	src/Bitset.cpp	/^void Bitset::clear() { bits.clear(); }$/;"	f	class:alvar::Bitset
cloud_sub_	nodes/FindMarkerBundles.cpp	/^ros::Subscriber cloud_sub_;$/;"	v
cloud_sub_	nodes/IndividualMarkers.cpp	/^ros::Subscriber cloud_sub_;$/;"	v
coeffs	include/ar_track_alvar/filter/kinect_filtering.h	/^  pcl::ModelCoefficients coeffs;$/;"	m	struct:ar_track_alvar::PlaneFitResult
color	include/ar_track_alvar/GlutViewer.h	/^	double color[3];$/;"	m	class:Drawable
computeTensor	src/TrifocalTensor.cpp	/^void TrifocalTensor::computeTensor(const Pose &p0, const Pose &p1) {$/;"	f	class:alvar::TrifocalTensor
computeTensor	src/TrifocalTensor.cpp	/^void TrifocalTensor::computeTensor(const Pose &p0, const Pose &p1, const Pose &p2) {$/;"	f	class:alvar::TrifocalTensor
configCallback	nodes/IndividualMarkers.cpp	/^void configCallback(ar_track_alvar::ParamsConfig &config, uint32_t level)$/;"	f
configCallback	nodes/IndividualMarkersNoKinect.cpp	/^void configCallback(ar_track_alvar::ParamsConfig &config, uint32_t level)$/;"	f
const_iterator_aligntype	include/ar_track_alvar/Marker.h	/^  typedef typename std::vector<T, Eigen::aligned_allocator<T> >::const_iterator const_iterator_aligntype;$/;"	t	class:alvar::MarkerIteratorImpl
container	include/ar_track_alvar/Container3d.h	/^				Container3d<T> *container;$/;"	m	class:alvar::Container3d::Iterator
container	include/ar_track_alvar/Container3d.h	/^	Container3d<T> &container;$/;"	m	class:alvar::Container3dLimitDist
container	include/ar_track_alvar/Container3d.h	/^	Container3d<T> &container;$/;"	m	class:alvar::Container3dSortDist
container	include/ar_track_alvar/Container3d.h	/^	Container3d<T> &container;$/;"	m	class:alvar::Container3dSortSize
container	include/ar_track_alvar/SfM.h	/^	std::map<int, Feature> container;$/;"	m	class:alvar::SimpleSfM
container_reset_point	include/ar_track_alvar/SfM.h	/^	std::map<int, Feature> container_reset_point;$/;"	m	class:alvar::SimpleSfM
container_triangulated	include/ar_track_alvar/SfM.h	/^	std::map<int, Feature> container_triangulated;$/;"	m	class:alvar::SimpleSfM
container_triangulated_reset_point	include/ar_track_alvar/SfM.h	/^	std::map<int, Feature> container_triangulated_reset_point;$/;"	m	class:alvar::SimpleSfM
content_res	src/SampleMarkerCreator.cpp	/^    int    content_res;$/;"	m	struct:State	file:
content_type	include/ar_track_alvar/Marker.h	/^    unsigned char	content_type;$/;"	m	class:alvar::MarkerData
count	include/ar_track_alvar/Filter.h	/^	unsigned int count;$/;"	m	class:alvar::FilterAverage
count_hamming_dec_len	src/Bitset.cpp	/^int BitsetExt::count_hamming_dec_len(int block_len, int enc_len) {$/;"	f	class:alvar::BitsetExt
count_hamming_enc_len	src/Bitset.cpp	/^int BitsetExt::count_hamming_enc_len(int block_len, int dec_len) {$/;"	f	class:alvar::BitsetExt
create	src/Threads.cpp	/^bool Threads::create(void *(*method)(void *), void *parameters)$/;"	f	class:alvar::Threads
create	src/Threads_unix.cpp	/^bool ThreadsPrivate::create(void *(*method)(void *), void *parameters)$/;"	f	class:alvar::ThreadsPrivate
create	src/Threads_win.cpp	/^bool ThreadsPrivate::create(void *(*method)(void *), void *parameters)$/;"	f	class:alvar::ThreadsPrivate
createCapture	src/CaptureFactory.cpp	/^Capture *CaptureFactory::createCapture(const CaptureDevice captureDevice)$/;"	f	class:alvar::CaptureFactory
createCapture	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^Capture *CapturePluginCmu::createCapture(const CaptureDevice captureDevice)$/;"	f	class:alvar::plugins::CapturePluginCmu
createCapture	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^Capture *CapturePluginDSCapture::createCapture(const CaptureDevice captureDevice)$/;"	f	class:alvar::plugins::CapturePluginDSCapture
createCapture	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^Capture *CapturePluginFile::createCapture(const CaptureDevice captureDevice)$/;"	f	class:alvar::plugins::CapturePluginFile
createCapture	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^Capture *CapturePluginHighgui::createCapture(const CaptureDevice captureDevice)$/;"	f	class:alvar::plugins::CapturePluginHighgui
createCapture	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^Capture *CapturePluginPtgrey::createCapture(const CaptureDevice captureDevice)$/;"	f	class:alvar::plugins::CapturePluginPtgrey
createXMLMatrix	src/FileFormatUtils.cpp	/^	TiXmlElement* FileFormatUtils::createXMLMatrix(const char* element_name, const CvMat *matrix) {$/;"	f	class:alvar::FileFormatUtils
crit	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^    CRITICAL_SECTION crit;$/;"	m	class:alvar::plugins::CaptureDSCapture
cross	src/Util.cpp	/^int cross(CvPoint *A,CvPoint *B, CvPoint *C){$/;"	f	namespace:alvar
cur_button	src/GlutViewer.cpp	/^int cur_button;$/;"	v
currentEntry	src/DirectoryIterator.cpp	/^std::string DirectoryIterator::currentEntry()$/;"	f	class:alvar::DirectoryIterator
currentPath	src/DirectoryIterator.cpp	/^std::string DirectoryIterator::currentPath()$/;"	f	class:alvar::DirectoryIterator
cv_ptr_	nodes/FindMarkerBundles.cpp	/^cv_bridge::CvImagePtr cv_ptr_;$/;"	v
cv_ptr_	nodes/FindMarkerBundlesNoKinect.cpp	/^cv_bridge::CvImagePtr cv_ptr_;$/;"	v
cv_ptr_	nodes/IndividualMarkers.cpp	/^cv_bridge::CvImagePtr cv_ptr_;$/;"	v
cv_ptr_	nodes/IndividualMarkersNoKinect.cpp	/^cv_bridge::CvImagePtr cv_ptr_;$/;"	v
cv_ptr_	nodes/TrainMarkerBundle.cpp	/^cv_bridge::CvImagePtr cv_ptr_;$/;"	v
d	include/ar_track_alvar/CaptureFactory.h	/^    CaptureFactoryPrivate *d;$/;"	m	class:alvar::CaptureFactory
d	include/ar_track_alvar/DirectoryIterator.h	/^    DirectoryIteratorPrivate *d;$/;"	m	class:alvar::DirectoryIterator
d	include/ar_track_alvar/DirectoryIterator_private.h	/^    DirectoryIteratorPrivateData *d;$/;"	m	class:alvar::DirectoryIteratorPrivate
d	include/ar_track_alvar/Mutex.h	/^    MutexPrivate *d;$/;"	m	class:alvar::Mutex
d	include/ar_track_alvar/Mutex_private.h	/^    MutexPrivateData *d;$/;"	m	class:alvar::MutexPrivate
d	include/ar_track_alvar/Plugin.h	/^    PluginPrivate *d;$/;"	m	class:alvar::Plugin
d	include/ar_track_alvar/Plugin_private.h	/^    PluginPrivateData *d;$/;"	m	class:alvar::PluginPrivate
d	include/ar_track_alvar/Threads.h	/^    ThreadsPrivate *d;$/;"	m	class:alvar::Threads
d	include/ar_track_alvar/Threads_private.h	/^    ThreadsPrivateData *d;$/;"	m	class:alvar::ThreadsPrivate
d	include/ar_track_alvar/Timer.h	/^    TimerPrivate *d;$/;"	m	class:alvar::Timer
d	include/ar_track_alvar/Timer_private.h	/^    TimerPrivateData *d;$/;"	m	class:alvar::TimerPrivate
d	src/SampleMarkerDetector.cpp	/^Drawable d[32];$/;"	v
d	src/SampleMarkerlessDetector.cpp	/^Drawable d;$/;"	v
d_marker	src/SamplePointcloud.cpp	/^Drawable d_marker;$/;"	v
d_points	src/SamplePointcloud.cpp	/^OwnDrawable d_points[1000];$/;"	v
data	include/ar_track_alvar/Container3d.h	/^		std::vector<node_type> data;$/;"	m	class:alvar::Container3d
data	include/ar_track_alvar/Marker.h	/^    } data;$/;"	m	class:alvar::MarkerData	typeref:union:alvar::MarkerData::__anon1
decodeXMLMatrix	src/FileFormatUtils.cpp	/^	bool FileFormatUtils::decodeXMLMatrix(const TiXmlElement *xml_matrix, int &type, int &rows, int &cols) {$/;"	f	class:alvar::FileFormatUtils
decode_error	include/ar_track_alvar/Marker.h	/^    double decode_error;$/;"	m	class:alvar::Marker
defaultDevice	include/ar_track_alvar/Shared.h	/^int defaultDevice(CaptureFactory::CaptureDeviceVector &devices)$/;"	f
default_margin	include/ar_track_alvar/Marker.h	/^    double default_margin() { return 1.5; }$/;"	f	class:alvar::MarkerArtoolkit
default_res	include/ar_track_alvar/Marker.h	/^    int default_res() { std::cout<<"MarkerArtoolkit::default_res"<<std::endl; return 3; }$/;"	f	class:alvar::MarkerArtoolkit
default_videocallback	src/CvTestbed.cpp	/^void CvTestbed::default_videocallback(IplImage *image) {$/;"	f	class:CvTestbed
delta	include/ar_track_alvar/Kalman.h	/^	CvMat *delta;$/;"	m	class:alvar::KalmanEkf
delta	include/ar_track_alvar/Kalman.h	/^	CvMat *delta;$/;"	m	class:alvar::KalmanSensorEkf
delta	include/ar_track_alvar/Optimization.h	/^	CvMat *delta;$/;"	m	class:alvar::Optimization
description	src/CaptureDevice.cpp	/^std::string CaptureDevice::description() const$/;"	f	class:alvar::CaptureDevice
det	src/TrifocalTensor.cpp	/^double det(double *r0, double *r1, double *r2, double *r3) {$/;"	f	namespace:alvar
detect_additional	src/SampleMultiMarker.cpp	/^bool detect_additional = false;$/;"	v
detect_pose_grayscale	include/ar_track_alvar/ConnectedComponents.h	/^	bool detect_pose_grayscale;$/;"	m	class:alvar::LabelingCvSeq
detect_pose_grayscale	include/ar_track_alvar/MarkerDetector.h	/^	bool detect_pose_grayscale;$/;"	m	class:alvar::MarkerDetectorImpl
deviation	src/Filter.cpp	/^double FilterAverage::deviation() const {$/;"	f	class:alvar::FilterAverage
diag	include/ar_track_alvar/Optimization.h	/^	CvMat *diag;$/;"	m	class:alvar::Optimization
diff	include/ar_track_alvar/Util.h	/^int ALVAR_EXPORT diff(const std::vector<C> &v, std::vector<C> &ret)$/;"	f	namespace:alvar
dim_binsize	include/ar_track_alvar/Util.h	/^	std::vector<int> dim_binsize;$/;"	m	class:alvar::Histogram
dist_limit	include/ar_track_alvar/Container3d.h	/^	float dist_limit;$/;"	m	class:alvar::Container3dLimitDist
distance	src/Util.cpp	/^double distance(CvPoint *A,CvPoint *B){$/;"	f	namespace:alvar
distance_threshold_	src/kinect_filtering.cpp	/^  const double distance_threshold_ = 0.005;$/;"	m	namespace:ar_track_alvar	file:
document	src/Util.cpp	/^	TiXmlDocument document;$/;"	m	struct:alvar::SerializationFormatterXml	file:
dot	src/Util.cpp	/^int dot(CvPoint *A, CvPoint *B, CvPoint *C){$/;"	f	namespace:alvar
draw3dPoints	nodes/FindMarkerBundles.cpp	/^void draw3dPoints(ARCloud::Ptr cloud, string frame, int color, int id, double rad)$/;"	f
draw3dPoints	nodes/IndividualMarkers.cpp	/^void draw3dPoints(ARCloud::Ptr cloud, string frame, int color, int id, double rad)$/;"	f
drawArrow	nodes/FindMarkerBundles.cpp	/^void drawArrow(gm::Point start, tf::Matrix3x3 mat, string frame, int color, int id)$/;"	f
drawArrow	nodes/IndividualMarkers.cpp	/^void drawArrow(gm::Point start, tf::Matrix3x3 mat, string frame, int color, int id)$/;"	f
edge_length	include/ar_track_alvar/Marker.h	/^    double edge_length;$/;"	m	class:alvar::Marker
edge_length	include/ar_track_alvar/MarkerDetector.h	/^	double edge_length;$/;"	m	class:alvar::MarkerDetectorImpl
elev	src/GlutViewer.cpp	/^float elev = 0.0, azim = 0.0, rad = 0.0;$/;"	v
enableCallback	nodes/IndividualMarkersNoKinect.cpp	/^void enableCallback(const std_msgs::BoolConstPtr& msg)$/;"	f
enableSwitched	nodes/IndividualMarkers.cpp	/^bool enableSwitched = false;$/;"	v
enableSwitched	nodes/IndividualMarkersNoKinect.cpp	/^bool enableSwitched = false;$/;"	v
enabled	nodes/IndividualMarkers.cpp	/^bool enabled = true;$/;"	v
enabled	nodes/IndividualMarkersNoKinect.cpp	/^bool enabled = true;$/;"	v
end	include/ar_track_alvar/Container3d.h	/^		Iterator end() {$/;"	f	class:alvar::Container3d
end	src/IntegralImage.cpp	/^int IntIndex::end() const {$/;"	f	class:alvar::IntIndex
enumerateDevices	src/CaptureFactory.cpp	/^CaptureFactory::CaptureDeviceVector CaptureFactory::enumerateDevices(const std::string &captureType)$/;"	f	class:alvar::CaptureFactory
enumerateDevices	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^CapturePlugin::CaptureDeviceVector CapturePluginCmu::enumerateDevices()$/;"	f	class:alvar::plugins::CapturePluginCmu
enumerateDevices	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^CapturePlugin::CaptureDeviceVector CapturePluginDSCapture::enumerateDevices()$/;"	f	class:alvar::plugins::CapturePluginDSCapture
enumerateDevices	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^CapturePlugin::CaptureDeviceVector CapturePluginFile::enumerateDevices()$/;"	f	class:alvar::plugins::CapturePluginFile
enumerateDevices	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^CapturePlugin::CaptureDeviceVector CapturePluginHighgui::enumerateDevices()$/;"	f	class:alvar::plugins::CapturePluginHighgui
enumerateDevices	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^CapturePlugin::CaptureDeviceVector CapturePluginPtgrey::enumerateDevices()$/;"	f	class:alvar::plugins::CapturePluginPtgrey
enumeratePlugins	src/CaptureFactory.cpp	/^CaptureFactory::CapturePluginVector CaptureFactory::enumeratePlugins()$/;"	f	class:alvar::CaptureFactory
erase_without_p2d	include/ar_track_alvar/EC.h	/^	bool erase_without_p2d;$/;"	m	class:alvar::DoEraseTest
erase_without_p3d	include/ar_track_alvar/EC.h	/^	bool erase_without_p3d;$/;"	m	class:alvar::DoEraseTest
err	include/ar_track_alvar/Optimization.h	/^	CvMat *err;$/;"	m	class:alvar::Optimization
errorAtLine	src/Platform.cpp	/^void errorAtLine(int status, int error, const char *filename,$/;"	f	namespace:alvar
estep	include/ar_track_alvar/IntegralImage.h	/^    int estep;$/;"	m	class:alvar::IntIndex
estimate	include/ar_track_alvar/Ransac.h	/^    int estimate(PARAMETER* params, int param_c,$/;"	f	class:alvar::Ransac
estimate	include/ar_track_alvar/Ransac.h	/^    int estimate(int param_c,$/;"	f	class:alvar::IndexRansac
estimateRequiredRounds	src/Ransac.cpp	/^int RansacImpl::estimateRequiredRounds(float success_propability,$/;"	f	class:alvar::RansacImpl
estimate_param	include/ar_track_alvar/Optimization.h	/^	void *estimate_param;$/;"	m	class:alvar::Optimization
estimation_type	include/ar_track_alvar/SfM.h	/^		int estimation_type;$/;"	m	class:alvar::SimpleSfM::Feature
etalon_columns	src/SampleCamCalib.cpp	/^const int etalon_columns=8;$/;"	v
etalon_rows	src/SampleCamCalib.cpp	/^const int etalon_rows=6;$/;"	v
exp_filt2	src/Util.cpp	/^int exp_filt2(vector<double> &v, vector<double> &ret, bool clamp)$/;"	f	namespace:alvar
extractFrame	src/kinect_filtering.cpp	/^  int extractFrame (const pcl::ModelCoefficients& coeffs,$/;"	f	namespace:ar_track_alvar
extractOrientation	src/kinect_filtering.cpp	/^  int extractOrientation (const pcl::ModelCoefficients& coeffs,$/;"	f	namespace:ar_track_alvar
extractPlaneCoordinates	src/FernPoseEstimator.cpp	/^void FernPoseEstimator::extractPlaneCoordinates(FernPoseEstimator::ExternalContainerMap &container)$/;"	f	class:alvar::FernPoseEstimator
f	include/ar_track_alvar/TrackerStat.h	/^	TrackerFeatures f;$/;"	m	class:alvar::TrackerStat
f	src/SampleFilter.cpp	/^    virtual void f(CvMat *_x, CvMat *_x_pred, double dt) {$/;"	f	class:KalmanOwn	file:
feature_count	include/ar_track_alvar/TrackerFeatures.h	/^	int feature_count;$/;"	m	class:alvar::TrackerFeatures
features	include/ar_track_alvar/TrackerFeatures.h	/^	CvPoint2D32f *features;$/;"	m	class:alvar::TrackerFeatures
fernEstimator	src/SampleMarkerlessDetector.cpp	/^FernPoseEstimator fernEstimator;$/;"	v
filename	include/ar_track_alvar/CvTestbed.h	/^	std::string filename;$/;"	m	class:CvTestbed
filename	include/ar_track_alvar/Util.h	/^	std::string filename;$/;"	m	class:alvar::Serialization
filename	src/SampleMarkerCreator.cpp	/^    stringstream filename;$/;"	m	struct:State	file:
fill_zeros_left	src/Bitset.cpp	/^void Bitset::fill_zeros_left(size_t bit_count) {$/;"	f	class:alvar::Bitset
filterCloud	src/kinect_filtering.cpp	/^  ARCloud::Ptr filterCloud (const ARCloud& cloud, const vector<cv::Point, Eigen::aligned_allocator<cv::Point> >& pixels)$/;"	f	namespace:ar_track_alvar
filter_array_average	src/SampleFilter.cpp	/^void filter_array_average(double x, double y, double *fx, double *fy) {$/;"	f
filter_average	src/SampleFilter.cpp	/^void filter_average(double x, double y, double *fx, double *fy) {$/;"	f
filter_buffer_max	include/ar_track_alvar/MultiMarkerFiltered.h	/^	static const int filter_buffer_max=15;$/;"	m	class:alvar::MultiMarkerFiltered
filter_buffer_min	include/ar_track_alvar/MultiMarkerInitializer.h	/^	int filter_buffer_min;$/;"	m	class:alvar::MultiMarkerInitializer
filter_des	src/SampleFilter.cpp	/^void filter_des(double x, double y, double *fx, double *fy) {$/;"	f
filter_ekf	src/SampleFilter.cpp	/^void filter_ekf(double x, double y, double *fx, double *fy) {$/;"	f
filter_kalman	src/SampleFilter.cpp	/^void filter_kalman(double x, double y, double *fx, double *fy) {$/;"	f
filter_median	src/SampleFilter.cpp	/^void filter_median(double x, double y, double *fx, double *fy) {$/;"	f
filter_names	src/SampleFilter.cpp	/^char filter_names[nof_filters][64]={$/;"	v
filter_none	src/SampleFilter.cpp	/^void filter_none(double x, double y, double *fx, double *fy) {$/;"	f
filter_running_average	src/SampleFilter.cpp	/^void filter_running_average(double x, double y, double *fx, double *fy) {$/;"	f
filters	src/SampleFilter.cpp	/^void (*(filters[nof_filters]))(double x, double y, double *fx, double *fy) = {$/;"	v
findFeatures	src/FernImageDetector.cpp	/^void FernImageDetector::findFeatures(Mat &object, bool planeAssumption)$/;"	f	class:alvar::FernImageDetector
find_zero_crossings	src/Util.cpp	/^int find_zero_crossings(const vector<double>& v, vector<int> &corners, int offs)$/;"	f	namespace:alvar
fitPlane	src/kinect_filtering.cpp	/^  PlaneFitResult fitPlane (ARCloud::ConstPtr cloud)$/;"	f	namespace:ar_track_alvar
flip	src/Bitset.cpp	/^void Bitset::flip(size_t pos) {$/;"	f	class:alvar::Bitset
font	src/SampleTrack.cpp	/^CvFont font;$/;"	v
formatter_handle	include/ar_track_alvar/Util.h	/^	void *formatter_handle;$/;"	m	class:alvar::Serialization
frame_count	include/ar_track_alvar/TrackerFeatures.h	/^	int frame_count;$/;"	m	class:alvar::TrackerFeatures
framecount	include/ar_track_alvar/TrackerPsa.h	/^	long framecount;$/;"	m	class:alvar::TrackerPsa
gamma	include/ar_track_alvar/Filter.h	/^	double gamma;$/;"	m	class:alvar::FilterDoubleExponentialSmoothing
gen	cfg/Params.cfg	/^gen = ParameterGenerator()$/;"	v
generateCloud	test/test_kinect_filtering.cpp	/^a::ARCloud::Ptr generateCloud(const double px, const double py, const double pz,$/;"	f
generateCloud	test/test_points.cpp	/^a::ARCloud::Ptr generateCloud(const double px, const double py, const double pz,$/;"	f
get	include/ar_track_alvar/Filter.h	/^	double get() const { return value; }$/;"	f	class:alvar::Filter
get	src/IntegralImage.cpp	/^int IntIndex::get() const {$/;"	f	class:alvar::IntIndex
getAlpha	include/ar_track_alvar/Filter.h	/^	double getAlpha() { return alpha; }$/;"	f	class:alvar::FilterRunningAverage
getCamInfo_	include/ar_track_alvar/Camera.h	/^	bool getCamInfo_;$/;"	m	class:alvar::Camera
getCapCallback	nodes/FindMarkerBundlesNoKinect.cpp	/^void getCapCallback (const sensor_msgs::ImageConstPtr & image_msg)$/;"	f
getCapCallback	nodes/IndividualMarkersNoKinect.cpp	/^void getCapCallback (const sensor_msgs::ImageConstPtr & image_msg)$/;"	f
getCapCallback	nodes/TrainMarkerBundle.cpp	/^void getCapCallback (const sensor_msgs::ImageConstPtr & image_msg)$/;"	f
getCoeffs	src/kinect_filtering.cpp	/^  int getCoeffs (const pcl::ModelCoefficients& coeffs, double* a, double* b,$/;"	f	namespace:ar_track_alvar
getCurrentSize	include/ar_track_alvar/Filter.h	/^	int getCurrentSize() { return (int) buffer.size(); }$/;"	f	class:alvar::FilterAverage
getGamma	include/ar_track_alvar/Filter.h	/^	double getGamma() { return gamma; }$/;"	f	class:alvar::FilterDoubleExponentialSmoothing
getIndices	include/ar_track_alvar/MultiMarker.h	/^	std::vector<int> getIndices(){$/;"	f	class:alvar::MultiMarker
getMasterId	include/ar_track_alvar/MultiMarker.h	/^	int getMasterId(){$/;"	f	class:alvar::MultiMarker
getMeasurementCount	include/ar_track_alvar/MultiMarkerInitializer.h	/^	int getMeasurementCount() { return measurements.size(); }$/;"	f	class:alvar::MultiMarkerInitializer
getMeasurementMarkers	include/ar_track_alvar/MultiMarkerInitializer.h	/^	const std::vector<MarkerMeasurement, Eigen::aligned_allocator<MarkerMeasurement> >& getMeasurementMarkers(int measurement) {$/;"	f	class:alvar::MultiMarkerInitializer
getMeasurementPose	include/ar_track_alvar/MultiMarkerInitializer.h	/^	double getMeasurementPose(int measurement, Camera *cam, Pose &pose) {$/;"	f	class:alvar::MultiMarkerInitializer
getMedian	src/medianFilter.cpp	/^  void MedianFilter::getMedian(Pose &ret_pose){$/;"	f	class:ar_track_alvar::MedianFilter
getPlugin	src/CaptureFactory.cpp	/^CapturePlugin *CaptureFactoryPrivate::getPlugin(const std::string &captureType)$/;"	f	class:alvar::CaptureFactoryPrivate
getPointCloudCallback	nodes/FindMarkerBundles.cpp	/^void getPointCloudCallback (const sensor_msgs::PointCloud2ConstPtr &msg)$/;"	f
getPointCloudCallback	nodes/IndividualMarkers.cpp	/^void getPointCloudCallback (const sensor_msgs::PointCloud2ConstPtr &msg)$/;"	f
getQuaternion	src/kinect_filtering.cpp	/^  int getQuaternion (const tf::Matrix3x3& m, tf::Quaternion &retQ)$/;"	f	namespace:ar_track_alvar
getRow	src/TrifocalTensor.cpp	/^double *getRow(double* m, int row) {$/;"	f	namespace:alvar
getState	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *getState() { return state; }$/;"	f	class:alvar::UnscentedKalman
getStateCovariance	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *getStateCovariance() { return stateCovariance; }$/;"	f	class:alvar::UnscentedKalman
getWindowSize	include/ar_track_alvar/Filter.h	/^	int getWindowSize() { return window_size; }$/;"	f	class:alvar::FilterAverage
get_id_index	src/MultiMarker.cpp	/^int MultiMarker::get_id_index(int id, bool add_if_missing \/*=false*\/)$/;"	f	class:alvar::MultiMarker
get_m	include/ar_track_alvar/Kalman.h	/^	int get_m() { return m; }$/;"	f	class:alvar::KalmanSensorCore
get_measurement	src/SampleFilter.cpp	/^void get_measurement(double *x, double *y) {$/;"	f
get_measurement	src/SampleOptimization.cpp	/^bool get_measurement(double *x, double *y, double a, double b, double c, double d, double e) {$/;"	f
get_n	include/ar_track_alvar/Kalman.h	/^	int get_n() { return n; }$/;"	f	class:alvar::KalmanCore
get_n	include/ar_track_alvar/Kalman.h	/^	int get_n() { return n; }$/;"	f	class:alvar::KalmanSensorCore
get_next_step	src/IntegralImage.cpp	/^int IntIndex::get_next_step() const {$/;"	f	class:alvar::IntIndex
get_y	src/SampleOptimization.cpp	/^double get_y(double x, double a, double b, double c, double d, double e) {$/;"	f
gl_mat	include/ar_track_alvar/GlutViewer.h	/^	double gl_mat[16];$/;"	m	class:Drawable
globalPose	include/ar_track_alvar/MultiMarkerInitializer.h	/^		bool globalPose;$/;"	m	class:alvar::MultiMarkerInitializer::MarkerMeasurement
glut_thread	src/GlutViewer.cpp	/^static void *glut_thread(void *lpThreadParameter)$/;"	f	file:
gray	include/ar_track_alvar/ConnectedComponents.h	/^	IplImage *gray;$/;"	m	class:alvar::Labeling
gray	include/ar_track_alvar/TrackerFeatures.h	/^	IplImage *gray;$/;"	m	class:alvar::TrackerFeatures
gray	src/SampleMarkerlessDetector.cpp	/^cv::Mat gray;$/;"	v
h	src/SampleFilter.cpp	/^    virtual void h(CvMat *x_pred, CvMat *_z_pred) {$/;"	f	class:KalmanSensorOwn	file:
hamming_dec	src/Bitset.cpp	/^int BitsetExt::hamming_dec(int block_len) {$/;"	f	class:alvar::BitsetExt
hamming_dec_block	src/Bitset.cpp	/^int BitsetExt::hamming_dec_block(unsigned long block_len, deque<bool>::iterator &iter) {$/;"	f	class:alvar::BitsetExt
hamming_enc	src/Bitset.cpp	/^void BitsetExt::hamming_enc(int block_len) {$/;"	f	class:alvar::BitsetExt
hamming_enc_block	src/Bitset.cpp	/^void BitsetExt::hamming_enc_block(unsigned long block_len, deque<bool>::iterator &iter) {$/;"	f	class:alvar::BitsetExt
hasNext	src/DirectoryIterator.cpp	/^bool DirectoryIterator::hasNext()$/;"	f	class:alvar::DirectoryIterator
hasNext	src/DirectoryIterator_unix.cpp	/^bool DirectoryIteratorPrivate::hasNext()$/;"	f	class:alvar::DirectoryIteratorPrivate
hasNext	src/DirectoryIterator_win.cpp	/^bool DirectoryIteratorPrivate::hasNext()$/;"	f	class:alvar::DirectoryIteratorPrivate
has_p2d	include/ar_track_alvar/EC.h	/^	bool has_p2d;$/;"	m	class:alvar::ExternalContainer
has_p3d	include/ar_track_alvar/EC.h	/^	bool has_p3d;$/;"	m	class:alvar::ExternalContainer
has_stored_pose	include/ar_track_alvar/SfM.h	/^		bool has_stored_pose;$/;"	m	class:alvar::SimpleSfM::Feature
height	include/ar_track_alvar/Camera.h	/^	int height;$/;"	m	struct:alvar::ProjPoints
height	src/GlutViewer.cpp	/^int height;$/;"	v
hex	src/Bitset.cpp	/^string Bitset::hex() $/;"	f	class:alvar::Bitset
hidingtex	src/SampleMarkerHide.cpp	/^    unsigned char hidingtex[64*64*4];$/;"	m	struct:OwnDrawable	file:
hist	include/ar_track_alvar/TrackerStat.h	/^	HistogramSubpixel hist;$/;"	m	class:alvar::TrackerStat
hist_rot	include/ar_track_alvar/TrackerStat.h	/^	HistogramSubpixel hist_rot;$/;"	m	class:alvar::TrackerStatRot
homography	src/FernImageDetector.cpp	/^cv::Mat FernImageDetector::homography()$/;"	f	class:alvar::FernImageDetector
hor	include/ar_track_alvar/TrackerPsa.h	/^	long *hor, *horprev;$/;"	m	class:alvar::TrackerPsa
horprev	include/ar_track_alvar/TrackerPsa.h	/^	long *hor, *horprev;$/;"	m	class:alvar::TrackerPsa
hypothesis	include/ar_track_alvar/Ransac.h	/^  void* hypothesis;$/;"	m	class:alvar::RansacImpl
id	include/ar_track_alvar/Marker.h	/^      unsigned long	id;							$/;"	m	union:alvar::MarkerData::__anon1
id	include/ar_track_alvar/Marker.h	/^    unsigned long id;$/;"	m	class:alvar::MarkerArtoolkit
id	src/CaptureDevice.cpp	/^std::string CaptureDevice::id() const$/;"	f	class:alvar::CaptureDevice
ids	include/ar_track_alvar/TrackerFeatures.h	/^	int *ids;$/;"	m	class:alvar::TrackerFeatures
image	src/GlutViewer.cpp	/^unsigned char* image=0;$/;"	v
imagePoints	src/FernImageDetector.cpp	/^void FernImageDetector::imagePoints(vector<CvPoint2D64f> &points)$/;"	f	class:alvar::FernImageDetector
image_points	include/ar_track_alvar/Camera.h	/^	std::vector<CvPoint2D64f> image_points;$/;"	m	struct:alvar::ProjPoints
images	include/ar_track_alvar/CvTestbed.h	/^	std::vector<Image> images;$/;"	m	class:CvTestbed
img	include/ar_track_alvar/Kalman.h	/^	IplImage *img;$/;"	m	class:alvar::KalmanVisualize
img	src/SampleMarkerCreator.cpp	/^    IplImage *img;$/;"	m	struct:State	file:
imgBuffer	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^    BYTE        *imgBuffer;$/;"	m	class:alvar::plugins::CaptureDSCapture
imgBufferForCallback	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^    BYTE        *imgBufferForCallback;$/;"	m	class:alvar::plugins::CaptureDSCapture
img_eig	include/ar_track_alvar/TrackerFeatures.h	/^	IplImage *img_eig;$/;"	m	class:alvar::TrackerFeatures
img_legend	include/ar_track_alvar/Kalman.h	/^	IplImage *img_legend;$/;"	m	class:alvar::KalmanVisualize
img_matrix	src/Kalman.cpp	/^void KalmanVisualize::img_matrix(CvMat *mat, int top, int left) {$/;"	f	class:alvar::KalmanVisualize
img_scale	include/ar_track_alvar/Kalman.h	/^	int img_scale;$/;"	m	class:alvar::KalmanVisualize
img_show	include/ar_track_alvar/Kalman.h	/^	IplImage *img_show;$/;"	m	class:alvar::KalmanVisualize
img_tmp	include/ar_track_alvar/TrackerFeatures.h	/^	IplImage *img_tmp;$/;"	m	class:alvar::TrackerFeatures
index	include/ar_track_alvar/IntegralImage.h	/^    int index;$/;"	m	class:alvar::IntIndex
indices	include/ar_track_alvar/Ransac.h	/^  int *indices;$/;"	m	class:alvar::RansacImpl
init	nodes/FindMarkerBundles.cpp	/^bool init = true;$/;"	v
init	nodes/FindMarkerBundlesNoKinect.cpp	/^bool init = true;  $/;"	v
init	nodes/TrainMarkerBundle.cpp	/^bool init=true;$/;"	v
init	src/SamplePointcloud.cpp	/^bool init=true;$/;"	v
initialize	src/UnscentedKalman.cpp	/^void UnscentedKalman::initialize() {$/;"	f	class:alvar::UnscentedKalman
inlierRatio	src/FernImageDetector.cpp	/^double FernImageDetector::inlierRatio()$/;"	f	class:alvar::FernImageDetector
inliers	include/ar_track_alvar/filter/kinect_filtering.h	/^  ARCloud::Ptr inliers;$/;"	m	struct:ar_track_alvar::PlaneFitResult
input	include/ar_track_alvar/Util.h	/^	bool input;$/;"	m	class:alvar::Serialization
instance	src/CaptureFactory.cpp	/^CaptureFactory *CaptureFactory::instance()$/;"	f	class:alvar::CaptureFactory
integx	include/ar_track_alvar/IntegralImage.h	/^	IntegralImage integx;$/;"	m	class:alvar::IntegralGradient
integy	include/ar_track_alvar/IntegralImage.h	/^	IntegralImage integy;$/;"	m	class:alvar::IntegralGradient
invPredObsCovariance	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *invPredObsCovariance;$/;"	m	class:alvar::UnscentedKalman
ipl	include/ar_track_alvar/CvTestbed.h	/^		IplImage *ipl;$/;"	m	struct:CvTestbed::Image
isCapturing	include/ar_track_alvar/Capture.h	/^    bool isCapturing() {return mIsCapturing;}$/;"	f	class:alvar::Capture
is_initialized	src/SfM.cpp	/^	bool is_initialized;$/;"	m	class:alvar::CameraMoves	file:
items	src/GlutViewer.cpp	/^vector<Drawable*> items;$/;"	v
iter	include/ar_track_alvar/Container3d.h	/^				std::vector<size_t>::iterator iter;$/;"	m	class:alvar::Container3d::Iterator
jaw	src/GlutViewer.cpp	/^float jaw  = 0.0, jawx, jawy, jawz;$/;"	v
jawx	src/GlutViewer.cpp	/^float jaw  = 0.0, jawx, jawy, jawz;$/;"	v
jawy	src/GlutViewer.cpp	/^float jaw  = 0.0, jawx, jawy, jawz;$/;"	v
jawz	src/GlutViewer.cpp	/^float jaw  = 0.0, jawx, jawy, jawz;$/;"	v
kalman	include/ar_track_alvar/Kalman.h	/^	KalmanCore *kalman;$/;"	m	class:alvar::KalmanVisualize
kalmanGain	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *kalmanGain;$/;"	m	class:alvar::UnscentedKalman
kalmanTmp	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *kalmanTmp;$/;"	m	class:alvar::UnscentedKalman
kalman_ext	include/ar_track_alvar/Kalman.h	/^	Kalman *kalman_ext;$/;"	m	class:alvar::KalmanVisualize
keyProcess	nodes/TrainMarkerBundle.cpp	/^int keyProcess(int key)$/;"	f
keycallback	include/ar_track_alvar/CvTestbed.h	/^	int (*keycallback)(int key);$/;"	m	class:CvTestbed
keycallback	src/SampleLabeling.cpp	/^int keycallback(int key)$/;"	f
keycallback	src/SampleMultiMarker.cpp	/^int keycallback(int key)$/;"	f
keycallback	src/SampleMultiMarkerBundle.cpp	/^int keycallback(int key)$/;"	f
keycallback	src/SamplePointcloud.cpp	/^int keycallback(int key)$/;"	f
keycallback	src/SampleTrack.cpp	/^int keycallback(int key) {$/;"	f
labeling	include/ar_track_alvar/MarkerDetector.h	/^	Labeling* labeling;$/;"	m	class:alvar::MarkerDetectorImpl
lambda	include/ar_track_alvar/Optimization.h	/^	double lambda;$/;"	m	class:alvar::Optimization
lambda	include/ar_track_alvar/UnscentedKalman.h	/^	double lambda, lambda2;$/;"	m	class:alvar::UnscentedKalman
lambda2	include/ar_track_alvar/UnscentedKalman.h	/^	double lambda, lambda2;$/;"	m	class:alvar::UnscentedKalman
limit_sq	include/ar_track_alvar/EC.h	/^	float limit_sq;$/;"	m	class:alvar::DoEraseTest
linePointDist	src/Util.cpp	/^double linePointDist(CvPoint *A,CvPoint *B,CvPoint *C, bool isSegment){$/;"	f	namespace:alvar
load	src/Plugin_unix.cpp	/^void PluginPrivate::load(const std::string filename)$/;"	f	class:alvar::PluginPrivate
load	src/Plugin_win.cpp	/^void PluginPrivate::load(const std::string filename)$/;"	f	class:alvar::PluginPrivate
loadPlugin	src/CaptureFactory.cpp	/^void CaptureFactoryPrivate::loadPlugin(const std::string &captureType)$/;"	f	class:alvar::CaptureFactoryPrivate
loadPlugin	src/CaptureFactory.cpp	/^void CaptureFactoryPrivate::loadPlugin(const std::string &captureType, const std::string &filename)$/;"	f	class:alvar::CaptureFactoryPrivate
loadPlugins	src/CaptureFactory.cpp	/^void CaptureFactoryPrivate::loadPlugins()$/;"	f	class:alvar::CaptureFactoryPrivate
loadSettings	include/ar_track_alvar/Capture.h	/^    virtual bool loadSettings(std::string filename) {$/;"	f	class:alvar::Capture
lock	src/Mutex.cpp	/^void Mutex::lock()$/;"	f	class:alvar::Mutex
lock	src/Mutex_unix.cpp	/^void MutexPrivate::lock()$/;"	f	class:alvar::MutexPrivate
lock	src/Mutex_win.cpp	/^void MutexPrivate::lock()$/;"	f	class:alvar::MutexPrivate
m	include/ar_track_alvar/Kalman.h	/^	int m; $/;"	m	class:alvar::KalmanSensorCore
m	include/ar_track_alvar/Kalman.h	/^	int m;$/;"	m	class:alvar::KalmanVisualize
mCamera	include/ar_track_alvar/FernPoseEstimator.h	/^	Camera mCamera;$/;"	m	class:alvar::FernPoseEstimator
mCamera	src/platform/capture_plugin_cmu/CapturePluginCmu.h	/^    C1394Camera *mCamera;$/;"	m	class:alvar::plugins::CaptureCmu
mCamera	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	/^    FlyCapture2::Camera *mCamera;$/;"	m	class:alvar::plugins::CapturePtgrey
mCameraEC	include/ar_track_alvar/FernPoseEstimator.h	/^	CameraEC mCameraEC;$/;"	m	class:alvar::FernPoseEstimator
mCaptureDevice	include/ar_track_alvar/Capture.h	/^    CaptureDevice mCaptureDevice;$/;"	m	class:alvar::Capture
mCapturePluginMap	include/ar_track_alvar/CaptureFactory_private.h	/^    CapturePluginMap mCapturePluginMap;$/;"	m	class:alvar::CaptureFactoryPrivate
mCaptureType	include/ar_track_alvar/CaptureDevice.h	/^    std::string mCaptureType;$/;"	m	class:alvar::CaptureDevice
mCaptureType	include/ar_track_alvar/CapturePlugin.h	/^    std::string mCaptureType;$/;"	m	class:alvar::CapturePlugin
mChannels	src/platform/capture_plugin_cmu/CapturePluginCmu.h	/^    int mChannels;$/;"	m	class:alvar::plugins::CaptureCmu
mChannels	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	/^    int mChannels;$/;"	m	class:alvar::plugins::CapturePtgrey
mClassifier	include/ar_track_alvar/FernImageDetector.h	/^    std::vector<FernClassifierWrapper> mClassifier;$/;"	m	class:alvar::FernImageDetector
mCorrespondences	include/ar_track_alvar/FernImageDetector.h	/^    cv::Mat mCorrespondences;$/;"	m	class:alvar::FernImageDetector
mCriticalSection	src/Mutex_win.cpp	/^    CRITICAL_SECTION mCriticalSection;$/;"	m	class:alvar::MutexPrivateData	file:
mData	src/DirectoryIterator_unix.cpp	/^    dirent *mData;$/;"	m	class:alvar::DirectoryIteratorPrivateData	file:
mData	src/DirectoryIterator_win.cpp	/^    WIN32_FIND_DATA mData;$/;"	m	class:alvar::DirectoryIteratorPrivateData	file:
mDescription	include/ar_track_alvar/CaptureDevice.h	/^    std::string mDescription;$/;"	m	class:alvar::CaptureDevice
mDestroyer	include/ar_track_alvar/CaptureFactory.h	/^    static CaptureFactoryDestroyer mDestroyer;$/;"	m	class:alvar::CaptureFactory
mDestroyer	src/CaptureFactory.cpp	/^CaptureFactory::CaptureFactoryDestroyer CaptureFactory::mDestroyer;$/;"	m	class:alvar::CaptureFactory	file:
mDirectory	include/ar_track_alvar/DirectoryIterator_private.h	/^    std::string mDirectory;$/;"	m	class:alvar::DirectoryIteratorPrivate
mEntry	include/ar_track_alvar/DirectoryIterator_private.h	/^    std::string mEntry;$/;"	m	class:alvar::DirectoryIteratorPrivate
mGUID	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	/^    FlyCapture2::PGRGuid mGUID;$/;"	m	class:alvar::plugins::CapturePtgrey
mHandle	src/DirectoryIterator_unix.cpp	/^    DIR *mHandle;$/;"	m	class:alvar::DirectoryIteratorPrivateData	file:
mHandle	src/DirectoryIterator_win.cpp	/^    HANDLE mHandle;$/;"	m	class:alvar::DirectoryIteratorPrivateData	file:
mHandle	src/Plugin_unix.cpp	/^    void *mHandle;$/;"	m	class:alvar::PluginPrivateData	file:
mHandle	src/Plugin_win.cpp	/^    HINSTANCE mHandle;$/;"	m	class:alvar::PluginPrivateData	file:
mHandles	src/Threads_unix.cpp	/^    std::vector<pthread_t> mHandles;$/;"	m	class:alvar::ThreadsPrivateData	file:
mHandles	src/Threads_win.cpp	/^    std::vector<HANDLE> mHandles;$/;"	m	class:alvar::ThreadsPrivateData	file:
mHomography	include/ar_track_alvar/FernImageDetector.h	/^    cv::Mat mHomography;$/;"	m	class:alvar::FernImageDetector
mId	include/ar_track_alvar/CaptureDevice.h	/^    std::string mId;$/;"	m	class:alvar::CaptureDevice
mImage	src/platform/capture_plugin_file/CapturePluginFile.h	/^    IplImage mImage;$/;"	m	class:alvar::plugins::CaptureFile
mImage	src/platform/capture_plugin_highgui/CapturePluginHighgui.h	/^    IplImage mImage;$/;"	m	class:alvar::plugins::CaptureHighgui
mImage	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	/^    FlyCapture2::Image *mImage;$/;"	m	class:alvar::plugins::CapturePtgrey
mImagePoints	include/ar_track_alvar/FernImageDetector.h	/^    vector<cv::Point2f> mImagePoints;$/;"	m	class:alvar::FernImageDetector
mInlierRatio	include/ar_track_alvar/FernImageDetector.h	/^    double mInlierRatio;$/;"	m	class:alvar::FernImageDetector
mInstance	include/ar_track_alvar/CaptureFactory.h	/^        CaptureFactory *mInstance;$/;"	m	class:alvar::CaptureFactory::CaptureFactoryDestroyer
mInstance	include/ar_track_alvar/CaptureFactory.h	/^    static CaptureFactory *mInstance;$/;"	m	class:alvar::CaptureFactory
mInstance	src/CaptureFactory.cpp	/^CaptureFactory *CaptureFactory::mInstance = NULL;$/;"	m	class:alvar::CaptureFactory	file:
mIsCapturing	include/ar_track_alvar/Capture.h	/^    bool mIsCapturing;$/;"	m	class:alvar::Capture
mKeyPoints	include/ar_track_alvar/FernImageDetector.h	/^    vector<KeyPoint> mKeyPoints;$/;"	m	class:alvar::FernImageDetector
mLDetector	include/ar_track_alvar/FernImageDetector.h	/^    LDetector mLDetector;$/;"	m	class:alvar::FernImageDetector
mLoadedAllPlugins	include/ar_track_alvar/CaptureFactory_private.h	/^    bool mLoadedAllPlugins;$/;"	m	class:alvar::CaptureFactoryPrivate
mMatrix	src/platform/capture_plugin_file/CapturePluginFile.h	/^    cv::Mat mMatrix;$/;"	m	class:alvar::plugins::CaptureFile
mMatrix	src/platform/capture_plugin_highgui/CapturePluginHighgui.h	/^    cv::Mat mMatrix;$/;"	m	class:alvar::plugins::CaptureHighgui
mModelPoints	include/ar_track_alvar/FernImageDetector.h	/^    vector<cv::Point2f> mModelPoints;$/;"	m	class:alvar::FernImageDetector
mMutex	include/ar_track_alvar/CaptureFactory.h	/^    static Mutex mMutex;$/;"	m	class:alvar::CaptureFactory
mMutex	include/ar_track_alvar/Lock.h	/^    Mutex *mMutex;$/;"	m	class:alvar::Lock
mMutex	src/CaptureFactory.cpp	/^Mutex CaptureFactory::mMutex;$/;"	m	class:alvar::CaptureFactory	file:
mMutex	src/Mutex_unix.cpp	/^    pthread_mutex_t mMutex;$/;"	m	class:alvar::MutexPrivateData	file:
mObjects	include/ar_track_alvar/FernImageDetector.h	/^    std::vector<Mat> mObjects;$/;"	m	class:alvar::FernImageDetector
mPatchGenerator	include/ar_track_alvar/FernImageDetector.h	/^    PatchGenerator mPatchGenerator;$/;"	m	class:alvar::FernImageDetector
mPerformanceFrequency	src/Timer_win.cpp	/^    LARGE_INTEGER mPerformanceFrequency;$/;"	m	class:alvar::TimerPrivateData	file:
mPerformanceQuerySupported	src/Timer_win.cpp	/^    bool mPerformanceQuerySupported;$/;"	m	class:alvar::TimerPrivateData	file:
mPerformanceStart	src/Timer_win.cpp	/^    LARGE_INTEGER mPerformanceStart;$/;"	m	class:alvar::TimerPrivateData	file:
mPluginMap	include/ar_track_alvar/CaptureFactory_private.h	/^    PluginMap mPluginMap;$/;"	m	class:alvar::CaptureFactoryPrivate
mPluginPaths	include/ar_track_alvar/CaptureFactory_private.h	/^    PluginPathsVector mPluginPaths;$/;"	m	class:alvar::CaptureFactoryPrivate
mPluginPostfix	include/ar_track_alvar/CaptureFactory_private.h	/^    std::string mPluginPostfix;$/;"	m	class:alvar::CaptureFactoryPrivate
mPluginPrefix	include/ar_track_alvar/CaptureFactory_private.h	/^    std::string mPluginPrefix;$/;"	m	class:alvar::CaptureFactoryPrivate
mPose	include/ar_track_alvar/FernPoseEstimator.h	/^	Pose mPose;$/;"	m	class:alvar::FernPoseEstimator
mReferenceCount	include/ar_track_alvar/Plugin.h	/^    int *mReferenceCount;$/;"	m	class:alvar::Plugin
mReturnFrame	src/platform/capture_plugin_cmu/CapturePluginCmu.h	/^    IplImage *mReturnFrame;$/;"	m	class:alvar::plugins::CaptureCmu
mReturnFrame	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^    IplImage    *mReturnFrame;$/;"	m	class:alvar::plugins::CaptureDSCapture
mReturnFrame	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	/^    IplImage *mReturnFrame;$/;"	m	class:alvar::plugins::CapturePtgrey
mSize	include/ar_track_alvar/FernImageDetector.h	/^    cv::Size mSize;$/;"	m	class:alvar::FernImageDetector
mStart	src/Timer_unix.cpp	/^    timespec mStart;$/;"	m	class:alvar::TimerPrivateData	file:
mStart	src/Timer_win.cpp	/^    DWORD mStart;$/;"	m	class:alvar::TimerPrivateData	file:
mValid	include/ar_track_alvar/DirectoryIterator_private.h	/^    bool mValid;$/;"	m	class:alvar::DirectoryIteratorPrivate
mVideoCapture	src/platform/capture_plugin_file/CapturePluginFile.h	/^    cv::VideoCapture mVideoCapture;$/;"	m	class:alvar::plugins::CaptureFile
mVideoCapture	src/platform/capture_plugin_highgui/CapturePluginHighgui.h	/^    cv::VideoCapture mVideoCapture;$/;"	m	class:alvar::plugins::CaptureHighgui
mVisualize	include/ar_track_alvar/FernImageDetector.h	/^    bool mVisualize;$/;"	m	class:alvar::FernImageDetector
mXResolution	include/ar_track_alvar/Capture.h	/^    unsigned long mXResolution;$/;"	m	class:alvar::Capture
mYResolution	include/ar_track_alvar/Capture.h	/^    unsigned long mYResolution;$/;"	m	class:alvar::Capture
m_nBpp	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^    int         m_nBpp;$/;"	m	class:alvar::plugins::CaptureDSCapture
m_nVideo_x_res	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^    int         m_nVideo_x_res;$/;"	m	class:alvar::plugins::CaptureDSCapture
m_nVideo_y_res	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^    int         m_nVideo_y_res;$/;"	m	class:alvar::plugins::CaptureDSCapture
m_pDSCapture	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^    CDSCapture  *m_pDSCapture;$/;"	m	class:alvar::plugins::CaptureDSCapture
main	nodes/FindMarkerBundles.cpp	/^int main(int argc, char *argv[])$/;"	f
main	nodes/FindMarkerBundlesNoKinect.cpp	/^int main(int argc, char *argv[])$/;"	f
main	nodes/IndividualMarkers.cpp	/^int main(int argc, char *argv[])$/;"	f
main	nodes/IndividualMarkersNoKinect.cpp	/^int main(int argc, char *argv[])$/;"	f
main	nodes/TrainMarkerBundle.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleCamCalib.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleCvTestbed.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleFilter.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleIntegralImage.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleLabeling.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleMarkerCreator.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleMarkerDetector.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleMarkerHide.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleMarkerlessCreator.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleMarkerlessDetector.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleMultiMarker.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleMultiMarkerBundle.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleOptimization.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SamplePointcloud.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/SampleTrack.cpp	/^int main(int argc, char *argv[])$/;"	f
main	test/test_kinect_filtering.cpp	/^int main (int argc, char** argv)$/;"	f
main	test/test_points.cpp	/^int main (int argc, char** argv)$/;"	f
makeMarkerMsgs	nodes/FindMarkerBundles.cpp	/^void makeMarkerMsgs(int type, int id, Pose &p, sensor_msgs::ImageConstPtr image_msg, tf::StampedTransform &CamToOutput, visualization_msgs::Marker *rvizMarker, ar_track_alvar_msgs::AlvarMarker *ar_pose_marker, int confidence){$/;"	f
makeMarkerMsgs	nodes/FindMarkerBundlesNoKinect.cpp	/^void makeMarkerMsgs(int type, int id, Pose &p, sensor_msgs::ImageConstPtr image_msg, tf::StampedTransform &CamToOutput, visualization_msgs::Marker *rvizMarker, ar_track_alvar_msgs::AlvarMarker *ar_pose_marker){$/;"	f
makeMarkerMsgs	nodes/TrainMarkerBundle.cpp	/^void makeMarkerMsgs(int type, int id, Pose &p, sensor_msgs::ImageConstPtr image_msg, tf::StampedTransform &CamToOutput, visualization_msgs::Marker *rvizMarker, ar_track_alvar_msgs::AlvarMarker *ar_pose_marker){$/;"	f
makeMasterTransform	nodes/FindMarkerBundles.cpp	/^int makeMasterTransform (const CvPoint3D64f& p0, const CvPoint3D64f& p1,$/;"	f
makeQuaternion	src/kinect_filtering.cpp	/^  gm::Quaternion makeQuaternion (double x, double y, double z, double w)$/;"	f	namespace:ar_track_alvar
map_edge_length	include/ar_track_alvar/MarkerDetector.h	/^	std::map<unsigned long, double> map_edge_length;$/;"	m	class:alvar::MarkerDetectorImpl
margin	include/ar_track_alvar/Marker.h	/^    double margin;$/;"	m	class:alvar::Marker
margin	include/ar_track_alvar/MarkerDetector.h	/^	double margin;$/;"	m	class:alvar::MarkerDetectorImpl
margin	src/SampleMarkerHide.cpp	/^const double margin = 1.0;$/;"	v
margin_error	include/ar_track_alvar/Marker.h	/^    double margin_error;$/;"	m	class:alvar::Marker
margin_res	src/SampleMarkerCreator.cpp	/^    double margin_res;$/;"	m	struct:State	file:
marker_allpoints_img	include/ar_track_alvar/Marker.h	/^    std::vector<PointDouble> marker_allpoints_img;$/;"	m	class:alvar::Marker
marker_content	include/ar_track_alvar/Marker.h	/^    CvMat *marker_content;$/;"	m	class:alvar::Marker
marker_corners	include/ar_track_alvar/Marker.h	/^    std::vector<PointDouble> marker_corners;$/;"	m	class:alvar::Marker
marker_corners_img	include/ar_track_alvar/Marker.h	/^    std::vector<PointDouble> marker_corners_img;$/;"	m	class:alvar::Marker
marker_data_content_type	src/SampleMarkerCreator.cpp	/^    MarkerData::MarkerContentType marker_data_content_type;$/;"	m	struct:State	file:
marker_data_force_strong_hamming	src/SampleMarkerCreator.cpp	/^    bool                          marker_data_force_strong_hamming;$/;"	m	struct:State	file:
marker_detected	include/ar_track_alvar/MultiMarkerInitializer.h	/^	std::vector<bool> marker_detected;$/;"	m	class:alvar::MultiMarkerInitializer
marker_detector	include/ar_track_alvar/SfM.h	/^	MarkerDetectorEC<MarkerData> marker_detector; $/;"	m	class:alvar::SimpleSfM
marker_detector	nodes/FindMarkerBundles.cpp	/^MarkerDetector<MarkerData> marker_detector;$/;"	v
marker_detector	nodes/FindMarkerBundlesNoKinect.cpp	/^MarkerDetector<MarkerData> marker_detector;$/;"	v
marker_detector	nodes/IndividualMarkers.cpp	/^MarkerDetector<MarkerData> marker_detector;$/;"	v
marker_detector	nodes/IndividualMarkersNoKinect.cpp	/^MarkerDetector<MarkerData> marker_detector;$/;"	v
marker_detector	nodes/TrainMarkerBundle.cpp	/^MarkerDetector<MarkerData> marker_detector;$/;"	v
marker_detector	src/SampleMultiMarker.cpp	/^MarkerDetector<MarkerData> marker_detector;$/;"	v
marker_detector	src/SampleMultiMarkerBundle.cpp	/^MarkerDetector<MarkerData> marker_detector;$/;"	v
marker_indices	include/ar_track_alvar/MultiMarker.h	/^	std::vector<int> marker_indices; \/\/ The marker id's to be used in marker field (first being the base)$/;"	m	class:alvar::MultiMarker
marker_margin	nodes/IndividualMarkers.cpp	/^int marker_margin = 2; \/\/ default marker margin$/;"	v
marker_margin	nodes/IndividualMarkersNoKinect.cpp	/^int marker_margin = 2; \/\/ default marker margin$/;"	v
marker_margin_b	include/ar_track_alvar/Marker.h	/^    std::vector<PointDouble> marker_margin_b;$/;"	m	class:alvar::Marker
marker_margin_w	include/ar_track_alvar/Marker.h	/^    std::vector<PointDouble> marker_margin_w;$/;"	m	class:alvar::Marker
marker_points	include/ar_track_alvar/Marker.h	/^    std::vector<PointDouble> marker_points;$/;"	m	class:alvar::Marker
marker_resolution	nodes/IndividualMarkers.cpp	/^int marker_resolution = 5; \/\/ default marker resolution$/;"	v
marker_resolution	nodes/IndividualMarkersNoKinect.cpp	/^int marker_resolution = 5; \/\/ default marker resolution$/;"	v
marker_side_len	src/SampleMarkerCreator.cpp	/^    double marker_side_len; \/\/ marker side len in current units$/;"	m	struct:State	file:
marker_size	nodes/FindMarkerBundles.cpp	/^double marker_size;$/;"	v
marker_size	nodes/FindMarkerBundlesNoKinect.cpp	/^double marker_size;$/;"	v
marker_size	nodes/IndividualMarkers.cpp	/^double marker_size;$/;"	v
marker_size	nodes/IndividualMarkersNoKinect.cpp	/^double marker_size;$/;"	v
marker_size	nodes/TrainMarkerBundle.cpp	/^double marker_size;$/;"	v
marker_size	src/SampleMarkerDetector.cpp	/^const int marker_size=15;$/;"	v
marker_size	src/SampleMultiMarker.cpp	/^const double marker_size = 4;$/;"	v
marker_size	src/SampleMultiMarkerBundle.cpp	/^const double marker_size = 4;$/;"	v
marker_size	src/SamplePointcloud.cpp	/^const double marker_size=1;$/;"	v
marker_status	include/ar_track_alvar/MultiMarker.h	/^	std::vector<int> marker_status;  \/\/ 0: not in point cloud, 1: in point cloud, 2: used in GetPose()$/;"	m	class:alvar::MultiMarker
marker_type	src/SampleMarkerCreator.cpp	/^    int    marker_type;     \/\/ 0:MarkerData, 1:ArToolkit$/;"	m	struct:State	file:
markers	include/ar_track_alvar/MarkerDetector.h	/^	std::vector<M, Eigen::aligned_allocator<M> > *markers;$/;"	m	class:alvar::MarkerDetector
markers_found	include/ar_track_alvar/SfM.h	/^	bool markers_found;$/;"	m	class:alvar::SimpleSfM
mask	include/ar_track_alvar/TrackerFeatures.h	/^	IplImage *mask;$/;"	m	class:alvar::TrackerFeatures
master_id	include/ar_track_alvar/MultiMarker.h	/^	int master_id;  \/\/The id of the first marker specified in the XML file $/;"	m	class:alvar::MultiMarker
master_id	nodes/FindMarkerBundles.cpp	/^int *master_id;$/;"	v
master_id	nodes/FindMarkerBundlesNoKinect.cpp	/^int *master_id;$/;"	v
master_visible	nodes/FindMarkerBundles.cpp	/^bool *master_visible;$/;"	v
max	include/ar_track_alvar/Platform.h	65;"	d
max	include/ar_track_alvar/Util.h	308;"	d
max_features	include/ar_track_alvar/TrackerFeatures.h	/^	int max_features;$/;"	m	class:alvar::TrackerFeatures
max_frequency	nodes/IndividualMarkers.cpp	/^double max_frequency;$/;"	v
max_frequency	nodes/IndividualMarkersNoKinect.cpp	/^double max_frequency;$/;"	v
max_new_marker_error	nodes/FindMarkerBundles.cpp	/^double max_new_marker_error;$/;"	v
max_new_marker_error	nodes/FindMarkerBundlesNoKinect.cpp	/^double max_new_marker_error;$/;"	v
max_new_marker_error	nodes/IndividualMarkers.cpp	/^double max_new_marker_error;$/;"	v
max_new_marker_error	nodes/IndividualMarkersNoKinect.cpp	/^double max_new_marker_error;$/;"	v
max_new_marker_error	nodes/TrainMarkerBundle.cpp	/^double max_new_marker_error;$/;"	v
max_params	include/ar_track_alvar/Ransac.h	/^  int max_params;$/;"	m	class:alvar::RansacImpl
max_shift	include/ar_track_alvar/TrackerPsa.h	/^	int max_shift;$/;"	m	class:alvar::TrackerPsa
max_track_error	nodes/FindMarkerBundles.cpp	/^double max_track_error;$/;"	v
max_track_error	nodes/FindMarkerBundlesNoKinect.cpp	/^double max_track_error;$/;"	v
max_track_error	nodes/IndividualMarkers.cpp	/^double max_track_error;$/;"	v
max_track_error	nodes/IndividualMarkersNoKinect.cpp	/^double max_track_error;$/;"	v
max_track_error	nodes/TrainMarkerBundle.cpp	/^double max_track_error;$/;"	v
maxx	src/SampleMarkerCreator.cpp	/^    double minx, miny, maxx, maxy; \/\/ top-left and bottom-right in pixel units$/;"	m	struct:State	file:
maxy	src/SampleMarkerCreator.cpp	/^    double minx, miny, maxx, maxy; \/\/ top-left and bottom-right in pixel units$/;"	m	struct:State	file:
measurements	include/ar_track_alvar/MultiMarkerBundle.h	/^	std::map<int, PointDouble> measurements; \/\/$/;"	m	class:alvar::MultiMarkerBundle
measurements	include/ar_track_alvar/MultiMarkerInitializer.h	/^	std::vector<std::vector<MarkerMeasurement, Eigen::aligned_allocator<MarkerMeasurement> > > measurements;$/;"	m	class:alvar::MultiMarkerInitializer
measurements_index	include/ar_track_alvar/MultiMarkerBundle.h	/^	int measurements_index(int frame, int marker_id, int marker_corner) {$/;"	f	class:alvar::MultiMarkerBundle
med_filt_size	nodes/FindMarkerBundles.cpp	/^int med_filt_size;$/;"	v
med_filts	nodes/FindMarkerBundles.cpp	/^ata::MedianFilter **med_filts;$/;"	v
median_ind	include/ar_track_alvar/filter/medianFilter.h	/^  int median_ind;$/;"	m	class:ar_track_alvar::MedianFilter
median_init	include/ar_track_alvar/filter/medianFilter.h	/^  bool median_init;$/;"	m	class:ar_track_alvar::MedianFilter
median_n	include/ar_track_alvar/filter/medianFilter.h	/^  int median_n;  $/;"	m	class:ar_track_alvar::MedianFilter
median_poses	include/ar_track_alvar/filter/medianFilter.h	/^  alvar::Pose *median_poses;$/;"	m	class:ar_track_alvar::MedianFilter
method	src/Threads_win.cpp	/^    void *(*method)(void *);$/;"	m	struct:alvar::StartThreadParameters	file:
min	include/ar_track_alvar/Platform.h	61;"	d
min	include/ar_track_alvar/Util.h	304;"	d
min_distance	include/ar_track_alvar/TrackerFeatures.h	/^	double min_distance;$/;"	m	class:alvar::TrackerFeatures
min_features	include/ar_track_alvar/TrackerFeatures.h	/^	int min_features;$/;"	m	class:alvar::TrackerFeatures
min_params	include/ar_track_alvar/Ransac.h	/^  int min_params;$/;"	m	class:alvar::RansacImpl
minx	src/SampleMarkerCreator.cpp	/^    double minx, miny, maxx, maxy; \/\/ top-left and bottom-right in pixel units$/;"	m	struct:State	file:
miny	src/SampleMarkerCreator.cpp	/^    double minx, miny, maxx, maxy; \/\/ top-left and bottom-right in pixel units$/;"	m	struct:State	file:
modelPoints	src/FernImageDetector.cpp	/^void FernImageDetector::modelPoints(vector<CvPoint3D64f> &points, bool normalize)$/;"	f	class:alvar::FernImageDetector
modelview_mat	src/GlutViewer.cpp	/^double modelview_mat[16] = { 1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1 };$/;"	v
moving	src/SfM.cpp	/^CameraMoves moving;$/;"	m	namespace:alvar	file:
multi_marker	src/SampleMarkerCreator.cpp	/^    MultiMarker multi_marker;$/;"	m	struct:State	file:
multi_marker	src/SampleMultiMarker.cpp	/^MultiMarker *multi_marker;$/;"	v
multi_marker_bundle	nodes/TrainMarkerBundle.cpp	/^MultiMarkerBundle *multi_marker_bundle=NULL;$/;"	v
multi_marker_bundle	src/SampleMultiMarkerBundle.cpp	/^MultiMarkerBundle *multi_marker_bundle=NULL;$/;"	v
multi_marker_bundles	nodes/FindMarkerBundles.cpp	/^MultiMarkerBundle **multi_marker_bundles=NULL;$/;"	v
multi_marker_bundles	nodes/FindMarkerBundlesNoKinect.cpp	/^MultiMarkerBundle **multi_marker_bundles=NULL;$/;"	v
multi_marker_file	include/ar_track_alvar/SfM.h	/^	std::string multi_marker_file;$/;"	m	class:alvar::SimpleSfM
multi_marker_init	nodes/TrainMarkerBundle.cpp	/^MultiMarkerInitializer *multi_marker_init=NULL;$/;"	v
multi_marker_init	src/SampleMultiMarkerBundle.cpp	/^MultiMarkerInitializer *multi_marker_init=NULL;$/;"	v
mutex_items	src/GlutViewer.cpp	/^Mutex mutex_items;$/;"	v
n	include/ar_track_alvar/Kalman.h	/^	int n; $/;"	m	class:alvar::KalmanCore
n	include/ar_track_alvar/Kalman.h	/^	int n;$/;"	m	class:alvar::KalmanSensorCore
n	include/ar_track_alvar/Kalman.h	/^	int n;$/;"	m	class:alvar::KalmanVisualize
n_	include/ar_track_alvar/Camera.h	/^	ros::NodeHandle n_;$/;"	m	class:alvar::Camera
n_bundles	nodes/FindMarkerBundles.cpp	/^int n_bundles = 0;   $/;"	v
n_bundles	nodes/FindMarkerBundlesNoKinect.cpp	/^int n_bundles = 0;   $/;"	v
n_images	src/MultiMarkerBundle.cpp	/^int n_images; \/\/ TODO: This should not be global (use the param instead)$/;"	m	namespace:alvar	file:
n_markers	src/MultiMarkerBundle.cpp	/^int n_markers; \/\/ TODO: This should not be global (use the param instead)$/;"	m	namespace:alvar	file:
needs_has_p2d	include/ar_track_alvar/EC.h	/^	bool needs_has_p2d;$/;"	m	class:alvar::DoHandleTest
needs_has_p3d	include/ar_track_alvar/EC.h	/^	bool needs_has_p3d;$/;"	m	class:alvar::DoHandleTest
new_M	include/ar_track_alvar/MarkerDetector.h	/^  Marker* new_M(double _edge_length = 0, int _res = 0, double _margin = 0) {$/;"	f	class:alvar::MarkerDetector
next	src/DirectoryIterator.cpp	/^std::string DirectoryIterator::next()$/;"	f	class:alvar::DirectoryIterator
next	src/DirectoryIterator_unix.cpp	/^std::string DirectoryIteratorPrivate::next()$/;"	f	class:alvar::DirectoryIteratorPrivate
next	src/DirectoryIterator_win.cpp	/^std::string DirectoryIteratorPrivate::next()$/;"	f	class:alvar::DirectoryIteratorPrivate
next	src/Filter.cpp	/^double FilterAverage::next(double y) {$/;"	f	class:alvar::FilterAverage
next	src/Filter.cpp	/^double FilterDoubleExponentialSmoothing::next(double y) {$/;"	f	class:alvar::FilterDoubleExponentialSmoothing
next	src/Filter.cpp	/^double FilterMedian::next(double y) {$/;"	f	class:alvar::FilterMedian
next	src/Filter.cpp	/^double FilterRunningAverage::next(double y) {$/;"	f	class:alvar::FilterRunningAverage
next	src/IntegralImage.cpp	/^int IntIndex::next() {$/;"	f	class:alvar::IntIndex
next_event	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^    HANDLE next_event;$/;"	m	class:alvar::plugins::CaptureDSCapture
next_id	include/ar_track_alvar/TrackerFeatures.h	/^	int next_id;$/;"	m	class:alvar::TrackerFeatures
next_step	include/ar_track_alvar/IntegralImage.h	/^    int next_step;$/;"	m	class:alvar::IntIndex
node_type	include/ar_track_alvar/Container3d.h	/^		typedef std::pair<CvPoint3D32f, T> node_type;$/;"	t	class:alvar::Container3d
nof_filters	src/SampleFilter.cpp	/^const int nof_filters = 8;$/;"	v
nof_markers	nodes/TrainMarkerBundle.cpp	/^int nof_markers;  $/;"	v
nof_markers	src/SampleMultiMarker.cpp	/^const int nof_markers = 5;$/;"	v
nof_markers	src/SampleMultiMarkerBundle.cpp	/^const int nof_markers = 8;$/;"	v
nof_trackers	src/SampleTrack.cpp	/^const int nof_trackers = 6;$/;"	v
normalx	include/ar_track_alvar/IntegralImage.h	/^	IplImage *normalx;$/;"	m	class:alvar::IntegralGradient
normaly	include/ar_track_alvar/IntegralImage.h	/^	IplImage *normaly;$/;"	m	class:alvar::IntegralGradient
object_model	src/EC.cpp	/^	const CvMat *object_model;$/;"	m	struct:alvar::ProjectParams	file:
object_points	include/ar_track_alvar/Camera.h	/^	std::vector<CvPoint3D64f> object_points;$/;"	m	struct:alvar::ProjPoints
obs_n	include/ar_track_alvar/UnscentedKalman.h	/^    int obs_n;$/;"	m	class:alvar::UnscentedKalman
off_x	src/GlutViewer.cpp	/^float off_x=0, off_y=0;$/;"	v
off_y	src/GlutViewer.cpp	/^float off_x=0, off_y=0;$/;"	v
operator !=	include/ar_track_alvar/Container3d.h	/^				bool operator!=(const Iterator& _m) const { return iter != _m.iter; }$/;"	f	class:alvar::Container3d::Iterator
operator !=	include/ar_track_alvar/Marker.h	/^    bool operator!=(const MarkerIterator& other) {$/;"	f	class:alvar::MarkerIteratorImpl
operator ()	include/ar_track_alvar/Container3d.h	/^	bool operator()(size_t i) const {$/;"	f	class:alvar::Container3dLimitDist
operator ()	include/ar_track_alvar/Container3d.h	/^	bool operator()(size_t i1, size_t i2)$/;"	f	class:alvar::Container3dSortDist
operator ()	include/ar_track_alvar/Container3d.h	/^	bool operator()(size_t i1, size_t i2)$/;"	f	class:alvar::Container3dSortSize
operator ()	include/ar_track_alvar/EC.h	/^	virtual bool operator()(const T &f) const {$/;"	f	class:alvar::DoEraseTest
operator ()	include/ar_track_alvar/EC.h	/^	virtual bool operator()(const T &f) const {$/;"	f	class:alvar::DoHandleTest
operator *	include/ar_track_alvar/Container3d.h	/^				node_type &operator*() const { return container->data[*iter]; }$/;"	f	class:alvar::Container3d::Iterator
operator *	include/ar_track_alvar/Marker.h	/^    const Marker* operator*() {$/;"	f	class:alvar::MarkerIteratorImpl
operator +	src/Rotation.cpp	/^inline Rotation operator + (const Rotation& r1, const Rotation& r2)$/;"	f	namespace:alvar
operator ++	include/ar_track_alvar/Container3d.h	/^				virtual Iterator& operator++() { ++iter; return *this; }$/;"	f	class:alvar::Container3d::Iterator
operator ++	include/ar_track_alvar/Marker.h	/^    MarkerIterator& operator++() {$/;"	f	class:alvar::MarkerIteratorImpl
operator +=	src/Rotation.cpp	/^inline Rotation& Rotation::operator += (const Rotation& r)$/;"	f	class:alvar::Rotation
operator ->	include/ar_track_alvar/Container3d.h	/^				node_type *operator->() const { return &(operator*()); }$/;"	f	class:alvar::Container3d::Iterator
operator ->	include/ar_track_alvar/Marker.h	/^    const Marker* operator->() {$/;"	f	class:alvar::MarkerIteratorImpl
operator <	src/Util.cpp	/^bool Index::operator<(const Index &index) const {$/;"	f	class:alvar::Index
operator <<	include/ar_track_alvar/Util.h	/^	Serialization& operator<<(C &serializable) {$/;"	f	class:alvar::Serialization
operator <<	src/kinect_filtering.cpp	/^  ostream& operator<< (ostream& str, const tf::Matrix3x3& m)$/;"	f	namespace:ar_track_alvar
operator <<	src/kinect_filtering.cpp	/^  ostream& operator<< (ostream& str, const tf::Quaternion& q)$/;"	f	namespace:ar_track_alvar
operator <<	src/kinect_filtering.cpp	/^  ostream& operator<< (ostream& str, const tf::Vector3& v)$/;"	f	namespace:ar_track_alvar
operator =	include/ar_track_alvar/Filter.h	/^	double operator= (double _value) { return next(_value); }$/;"	f	class:alvar::FilterAverage
operator =	include/ar_track_alvar/Filter.h	/^	double operator= (double _value) { return next(_value); }$/;"	f	class:alvar::FilterDoubleExponentialSmoothing
operator =	include/ar_track_alvar/Filter.h	/^	double operator= (double _value) { return next(_value); }$/;"	f	class:alvar::FilterMedian
operator =	include/ar_track_alvar/Filter.h	/^	double operator= (double _value) { return next(_value); }$/;"	f	class:alvar::FilterRunningAverage
operator =	include/ar_track_alvar/Marker.h	/^    MarkerIteratorImpl& operator=(const MarkerIteratorImpl& other) {$/;"	f	class:alvar::MarkerIteratorImpl
operator =	src/IntegralImage.cpp	/^int IntIndex::operator=(int v) {$/;"	f	class:alvar::IntIndex
operator =	src/Plugin.cpp	/^Plugin &Plugin::operator=(const Plugin &plugin)$/;"	f	class:alvar::Plugin
operator =	src/Pose.cpp	/^Pose& Pose::operator = (const Pose& p)$/;"	f	class:alvar::Pose
operator =	src/Rotation.cpp	/^inline Rotation& Rotation::operator = (const Rotation& r)$/;"	f	class:alvar::Rotation
operator =	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^      bool operator=(const VideoSampler &vs) { return parent == vs.parent; }$/;"	f	class:alvar::plugins::CaptureDSCapture::VideoSampler
operator ==	include/ar_track_alvar/Container3d.h	/^				bool operator==(const Iterator& _m) const { return iter == _m.iter; }$/;"	f	class:alvar::Container3d::Iterator
operator ==	include/ar_track_alvar/Marker.h	/^    bool operator==(const MarkerIterator& other) {$/;"	f	class:alvar::MarkerIteratorImpl
operator >>	include/ar_track_alvar/Util.h	/^	Serialization& operator>>(C &serializable) {$/;"	f	class:alvar::Serialization
operator []	include/ar_track_alvar/Container3d.h	/^		node_type &operator[](size_t index) {$/;"	f	class:alvar::Container3d
operator []	include/ar_track_alvar/Filter.h	/^	F &operator[](size_t i) {$/;"	f	class:alvar::FilterArray
operator double	include/ar_track_alvar/Filter.h	/^	operator double () { return get(); }$/;"	f	class:alvar::Filter
optimization_error	include/ar_track_alvar/MultiMarkerBundle.h	/^	double optimization_error;$/;"	m	class:alvar::MultiMarkerBundle
optimization_keyframes	include/ar_track_alvar/MultiMarkerBundle.h	/^	int optimization_keyframes;$/;"	m	class:alvar::MultiMarkerBundle
optimization_markers	include/ar_track_alvar/MultiMarkerBundle.h	/^	int optimization_markers;$/;"	m	class:alvar::MultiMarkerBundle
optimize	nodes/TrainMarkerBundle.cpp	/^bool optimize = false;$/;"	v
optimize	src/SampleMultiMarkerBundle.cpp	/^bool optimize = false;$/;"	v
optimize_done	nodes/TrainMarkerBundle.cpp	/^bool optimize_done = false;$/;"	v
optimize_done	src/SampleMultiMarkerBundle.cpp	/^bool optimize_done = false;$/;"	v
optimizing	include/ar_track_alvar/MultiMarkerBundle.h	/^	bool optimizing;$/;"	m	class:alvar::MultiMarkerBundle
orig	include/ar_track_alvar/Container3d.h	/^	CvPoint3D32f orig;$/;"	m	class:alvar::Container3dLimitDist
orig	include/ar_track_alvar/Container3d.h	/^	CvPoint3D32f orig;$/;"	m	class:alvar::Container3dSortDist
out_matrix	src/Kalman.cpp	/^void KalmanVisualize::out_matrix(CvMat *m, char *name) {$/;"	f	class:alvar::KalmanVisualize
out_matrix	src/Util.cpp	/^void out_matrix(const CvMat *m, const char *name) {$/;"	f	namespace:alvar
outputEnumeratedDevices	include/ar_track_alvar/Shared.h	/^void outputEnumeratedDevices(CaptureFactory::CaptureDeviceVector &devices, int selectedDevice)$/;"	f
outputEnumeratedPlugins	include/ar_track_alvar/Shared.h	/^void outputEnumeratedPlugins(CaptureFactory::CapturePluginVector &plugins)$/;"	f
output_frame	nodes/FindMarkerBundles.cpp	/^std::string output_frame;$/;"	v
output_frame	nodes/FindMarkerBundlesNoKinect.cpp	/^std::string output_frame;$/;"	v
output_frame	nodes/IndividualMarkers.cpp	/^std::string output_frame;$/;"	v
output_frame	nodes/IndividualMarkersNoKinect.cpp	/^std::string output_frame;$/;"	v
output_frame	nodes/TrainMarkerBundle.cpp	/^std::string output_frame;$/;"	v
output_frame_from_msg	nodes/IndividualMarkers.cpp	/^bool output_frame_from_msg;$/;"	v
own_drawable_count	src/SamplePointcloud.cpp	/^int own_drawable_count;$/;"	v
p2d	include/ar_track_alvar/EC.h	/^	CvPoint2D32f p2d;$/;"	m	class:alvar::ExternalContainer
p2d1	include/ar_track_alvar/SfM.h	/^		CvPoint2D32f p2d1;$/;"	m	class:alvar::SimpleSfM::Feature
p3d	include/ar_track_alvar/EC.h	/^	CvPoint3D32f p3d;$/;"	m	class:alvar::ExternalContainer
p3d_sh	include/ar_track_alvar/SfM.h	/^		CvPoint3D32f p3d_sh;$/;"	m	class:alvar::SimpleSfM::Feature
panx	src/GlutViewer.cpp	/^float panx = 0.0, pany = 0.0;$/;"	v
pany	src/GlutViewer.cpp	/^float panx = 0.0, pany = 0.0;$/;"	v
parameters	src/Threads_win.cpp	/^    void *parameters;$/;"	m	struct:alvar::StartThreadParameters	file:
parent	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^      CaptureDSCapture *parent;$/;"	m	class:alvar::plugins::CaptureDSCapture::VideoSampler
parseEnvironmentVariable	src/CaptureFactory_unix.cpp	/^void CaptureFactoryPrivate::parseEnvironmentVariable(const std::string &variable)$/;"	f	class:alvar::CaptureFactoryPrivate
parseEnvironmentVariable	src/CaptureFactory_win.cpp	/^void CaptureFactoryPrivate::parseEnvironmentVariable(const std::string &variable)$/;"	f	class:alvar::CaptureFactoryPrivate
parseXMLMatrix	src/FileFormatUtils.cpp	/^	bool FileFormatUtils::parseXMLMatrix(const TiXmlElement *xml_matrix, CvMat *matrix) {$/;"	f	class:alvar::FileFormatUtils
pluginExtension	src/CaptureFactory_unix.cpp	/^std::string CaptureFactoryPrivate::pluginExtension()$/;"	f	class:alvar::CaptureFactoryPrivate
pluginExtension	src/CaptureFactory_win.cpp	/^std::string CaptureFactoryPrivate::pluginExtension()$/;"	f	class:alvar::CaptureFactoryPrivate
pluginPrefix	src/CaptureFactory_unix.cpp	/^std::string CaptureFactoryPrivate::pluginPrefix()$/;"	f	class:alvar::CaptureFactoryPrivate
pluginPrefix	src/CaptureFactory_win.cpp	/^std::string CaptureFactoryPrivate::pluginPrefix()$/;"	f	class:alvar::CaptureFactoryPrivate
plugins	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^namespace plugins {$/;"	n	namespace:alvar	file:
plugins	src/platform/capture_plugin_cmu/CapturePluginCmu.h	/^namespace plugins {$/;"	n	namespace:alvar
plugins	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^namespace plugins {$/;"	n	namespace:alvar	file:
plugins	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^namespace plugins {$/;"	n	namespace:alvar
plugins	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^namespace plugins {$/;"	n	namespace:alvar	file:
plugins	src/platform/capture_plugin_file/CapturePluginFile.h	/^namespace plugins {$/;"	n	namespace:alvar
plugins	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^namespace plugins {$/;"	n	namespace:alvar	file:
plugins	src/platform/capture_plugin_highgui/CapturePluginHighgui.h	/^namespace plugins {$/;"	n	namespace:alvar
plugins	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^namespace plugins {$/;"	n	namespace:alvar	file:
plugins	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.h	/^namespace plugins {$/;"	n	namespace:alvar
point	include/ar_track_alvar/TrackerOrientation.h	/^		CvPoint2D32f point;$/;"	m	struct:alvar::TrackerOrientation::Feature
point3d	include/ar_track_alvar/TrackerOrientation.h	/^		CvPoint3D64f point3d;$/;"	m	struct:alvar::TrackerOrientation::Feature
point_counts	include/ar_track_alvar/Camera.h	/^	std::vector<int> point_counts;$/;"	m	struct:alvar::ProjPoints
pointcloud	include/ar_track_alvar/MultiMarker.h	/^	std::map<int, CvPoint3D64f> pointcloud;$/;"	m	class:alvar::MultiMarker
pointcloud_filtered	include/ar_track_alvar/MultiMarkerFiltered.h	/^	FilterMedian *pointcloud_filtered;$/;"	m	class:alvar::MultiMarkerFiltered
pointcloud_filtered	include/ar_track_alvar/MultiMarkerInitializer.h	/^	FilterMedian *pointcloud_filtered;$/;"	m	class:alvar::MultiMarkerInitializer
pointcloud_index	src/MultiMarker.cpp	/^int MultiMarker::pointcloud_index(int marker_id, int marker_corner, bool add_if_missing \/*=false*\/) {$/;"	f	class:alvar::MultiMarker
polyLinePointDist	src/Util.cpp	/^double polyLinePointDist(CvPoint *PointList, int nPnts,CvPoint *C, int *index, int isClosedPolygon){$/;"	f	namespace:alvar
poly_res	src/SampleOptimization.cpp	/^const double poly_res=8.0;$/;"	v
pop_back	src/Bitset.cpp	/^bool Bitset::pop_back()$/;"	f	class:alvar::Bitset
pop_front	src/Bitset.cpp	/^bool Bitset::pop_front()$/;"	f	class:alvar::Bitset
pose	include/ar_track_alvar/Marker.h	/^    Pose pose;$/;"	m	class:alvar::Marker
pose	include/ar_track_alvar/SfM.h	/^	Pose pose;$/;"	m	class:alvar::SimpleSfM
pose	src/FernPoseEstimator.cpp	/^Pose FernPoseEstimator::pose() const$/;"	f	class:alvar::FernPoseEstimator
pose1	include/ar_track_alvar/SfM.h	/^		Pose pose1;$/;"	m	class:alvar::SimpleSfM::Feature
pose_difference	include/ar_track_alvar/SfM.h	/^	Pose pose_difference;$/;"	m	class:alvar::SimpleSfM
pose_ok	include/ar_track_alvar/SfM.h	/^	bool pose_ok;$/;"	m	class:alvar::SimpleSfM
pose_original	include/ar_track_alvar/SfM.h	/^	Pose pose_original;$/;"	m	class:alvar::SimpleSfM
posx	src/SampleMarkerCreator.cpp	/^    double posx, posy;      \/\/ The position of marker center in the given units$/;"	m	struct:State	file:
posy	src/SampleMarkerCreator.cpp	/^    double posx, posy;      \/\/ The position of marker center in the given units$/;"	m	struct:State	file:
predObs	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *predObs;$/;"	m	class:alvar::UnscentedKalman
predObsCovariance	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *predObsCovariance;$/;"	m	class:alvar::UnscentedKalman
predObsDiff	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *predObsDiff;$/;"	m	class:alvar::UnscentedKalman
predict	src/Kalman.cpp	/^CvMat *Kalman::predict(unsigned long tick) {$/;"	f	class:alvar::Kalman
predict	src/Kalman.cpp	/^CvMat *KalmanCore::predict() {$/;"	f	class:alvar::KalmanCore
predict	src/UnscentedKalman.cpp	/^void UnscentedKalman::predict(UnscentedProcess *process_model) {$/;"	f	class:alvar::UnscentedKalman
predict_P	src/Kalman.cpp	/^void Kalman::predict_P() {$/;"	f	class:alvar::Kalman
predict_update	src/Kalman.cpp	/^CvMat *Kalman::predict_update(KalmanSensor *sensor, unsigned long tick) {$/;"	f	class:alvar::Kalman
predict_update	src/Kalman.cpp	/^CvMat *KalmanCore::predict_update(KalmanSensorCore *sensor) {$/;"	f	class:alvar::KalmanCore
predict_x	src/Kalman.cpp	/^void KalmanCore::predict_x(unsigned long tick) {$/;"	f	class:alvar::KalmanCore
predict_x	src/Kalman.cpp	/^void KalmanEkf::predict_x(unsigned long tick) {$/;"	f	class:alvar::KalmanEkf
prev	src/SfM.cpp	/^	double prev[3];$/;"	m	class:alvar::CameraMoves	file:
prev_feature_count	include/ar_track_alvar/TrackerFeatures.h	/^	int prev_feature_count;$/;"	m	class:alvar::TrackerFeatures
prev_features	include/ar_track_alvar/TrackerFeatures.h	/^	CvPoint2D32f *prev_features;$/;"	m	class:alvar::TrackerFeatures
prev_gray	include/ar_track_alvar/TrackerFeatures.h	/^	IplImage *prev_gray;$/;"	m	class:alvar::TrackerFeatures
prev_ids	include/ar_track_alvar/TrackerFeatures.h	/^	int *prev_ids;$/;"	m	class:alvar::TrackerFeatures
prev_pyramid	include/ar_track_alvar/TrackerFeatures.h	/^	IplImage *prev_pyramid;$/;"	m	class:alvar::TrackerFeatures
prev_tick	include/ar_track_alvar/Kalman.h	/^	int prev_tick; $/;"	m	class:alvar::Kalman
proj_mat	src/GlutViewer.cpp	/^double proj_mat[16];$/;"	v
project	src/TrifocalTensor.cpp	/^void TrifocalTensor::project(const CvPoint2D64f &p0, $/;"	f	class:alvar::TrifocalTensor
project	src/kinect_filtering.cpp	/^  tf::Vector3 project (const ARPoint& p, const double a, const double b,$/;"	f	namespace:ar_track_alvar
projectAxis	src/TrifocalTensor.cpp	/^double TrifocalTensor::projectAxis(const CvPoint2D64f &p0, const CvPoint2D64f &p1, int l) {$/;"	f	class:alvar::TrifocalTensor
projectError	src/TrifocalTensor.cpp	/^double TrifocalTensor::projectError(const CvPoint2D64f &p0, $/;"	f	class:alvar::TrifocalTensor
projected_p2d	include/ar_track_alvar/EC.h	/^	CvPoint2D32f projected_p2d; \/\/ This is only temporary -- user needs to take care that it has valid content$/;"	m	class:alvar::ExternalContainer
projected_p2d_sh	include/ar_track_alvar/SfM.h	/^		CvPoint2D32f projected_p2d_sh;$/;"	m	class:alvar::SimpleSfM::Feature
prompt	src/SampleMarkerCreator.cpp	/^    bool   prompt;$/;"	m	struct:State	file:
purge	include/ar_track_alvar/EC.h	/^	bool purge;$/;"	m	class:alvar::TrackerFeaturesEC
push_back	src/Bitset.cpp	/^void Bitset::push_back(const bool bit) { bits.push_back(bit); }$/;"	f	class:alvar::Bitset
push_back	src/Bitset.cpp	/^void Bitset::push_back(const unsigned char b, int bit_count \/*=8*\/) {$/;"	f	class:alvar::Bitset
push_back	src/Bitset.cpp	/^void Bitset::push_back(const unsigned long l, int bit_count \/*=32*\/) {$/;"	f	class:alvar::Bitset
push_back	src/Bitset.cpp	/^void Bitset::push_back(const unsigned short s, int bit_count \/*=16*\/) {$/;"	f	class:alvar::Bitset
push_back	src/Bitset.cpp	/^void Bitset::push_back(string s) {$/;"	f	class:alvar::Bitset
push_back_meaningful	src/Bitset.cpp	/^void Bitset::push_back_meaningful(const unsigned long l) {$/;"	f	class:alvar::Bitset
push_to_buffer	src/Filter.cpp	/^void FilterAverage::push_to_buffer(double y) {$/;"	f	class:alvar::FilterAverage
pyr_levels	include/ar_track_alvar/TrackerFeatures.h	/^	int pyr_levels;$/;"	m	class:alvar::TrackerFeatures
pyramid	include/ar_track_alvar/TrackerFeatures.h	/^	IplImage *pyramid;$/;"	m	class:alvar::TrackerFeatures
quality_level	include/ar_track_alvar/TrackerFeatures.h	/^	double quality_level;$/;"	m	class:alvar::TrackerFeatures
quaternion	include/ar_track_alvar/Rotation.h	/^	double quaternion[4];$/;"	m	class:alvar::Rotation
quaternion_mat	include/ar_track_alvar/Rotation.h	/^	CvMat quaternion_mat;$/;"	m	class:alvar::Rotation
rad	src/GlutViewer.cpp	/^float elev = 0.0, azim = 0.0, rad = 0.0;$/;"	v
randFloat	test/test_kinect_filtering.cpp	/^float randFloat (float a, float b)$/;"	f
randFloat	test/test_points.cpp	/^float randFloat (float a, float b)$/;"	f
random	src/SampleOptimization.cpp	/^double random(int dist_type, double param1, double param2) {$/;"	f
read	src/FernImageDetector.cpp	/^bool FernImageDetector::read(const std::string &filename, const bool binary)$/;"	f	class:alvar::FernImageDetector
readBinary	src/FernImageDetector.cpp	/^void FernClassifierWrapper::readBinary(std::fstream &stream)$/;"	f	class:alvar::FernClassifierWrapper
refine	include/ar_track_alvar/Ransac.h	/^    int refine(PARAMETER* params, int param_c,$/;"	f	class:alvar::Ransac
refine	include/ar_track_alvar/Ransac.h	/^    int refine(int param_c,$/;"	f	class:alvar::IndexRansac
registerPlugin	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^void registerPlugin(const std::string &captureType, alvar::CapturePlugin *&capturePlugin)$/;"	f	namespace:alvar::plugins
registerPlugin	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^void registerPlugin(const string &captureType, alvar::CapturePlugin *&capturePlugin)$/;"	f	namespace:alvar::plugins
registerPlugin	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^void registerPlugin(const std::string &captureType, alvar::CapturePlugin *&capturePlugin)$/;"	f	namespace:alvar::plugins
registerPlugin	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^void registerPlugin(const std::string &captureType, alvar::CapturePlugin *&capturePlugin)$/;"	f	namespace:alvar::plugins
registerPlugin	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^void registerPlugin(const string &captureType, alvar::CapturePlugin *&capturePlugin)$/;"	f	namespace:alvar::plugins
rel_corners	include/ar_track_alvar/MultiMarker.h	/^    std::vector< std::vector<tf::Vector3> > rel_corners; \/\/The coords of the master marker relative to each child marker in marker_indices$/;"	m	class:alvar::MultiMarker
release_at_exit	include/ar_track_alvar/CvTestbed.h	/^		bool release_at_exit;$/;"	m	struct:CvTestbed::Image
res	include/ar_track_alvar/IntegralImage.h	/^    int res;$/;"	m	class:alvar::IntIndex
res	include/ar_track_alvar/Marker.h	/^    int res;$/;"	m	class:alvar::Marker
res	include/ar_track_alvar/MarkerDetector.h	/^	int res;$/;"	m	class:alvar::MarkerDetectorImpl
res	src/SampleFilter.cpp	/^const int res=320;$/;"	v
res	src/SampleOptimization.cpp	/^const int res=640;$/;"	v
reset	include/ar_track_alvar/Marker.h	/^    MarkerIterator& reset() {$/;"	f	class:alvar::MarkerIteratorImpl
reset	src/Filter.cpp	/^void FilterAverage::reset() {$/;"	f	class:alvar::FilterAverage
reset	src/Filter.cpp	/^void FilterRunningAverage::reset() { breset=true; }$/;"	f	class:alvar::FilterRunningAverage
reset	src/SampleMarkerlessDetector.cpp	/^bool reset = false;$/;"	v
reset	src/SamplePointcloud.cpp	/^bool reset=false;$/;"	v
reset	src/SampleTrack.cpp	/^bool reset = true;$/;"	v
resolve	src/Plugin.cpp	/^void *Plugin::resolve(const char *symbol)$/;"	f	class:alvar::Plugin
resolve	src/Plugin_unix.cpp	/^void *PluginPrivate::resolve(const char *symbol)$/;"	f	class:alvar::PluginPrivate
resolve	src/Plugin_win.cpp	/^void *PluginPrivate::resolve(const char *symbol)$/;"	f	class:alvar::PluginPrivate
ros_corners_3D	include/ar_track_alvar/Marker.h	/^    ar_track_alvar::ARCloud ros_corners_3D;$/;"	m	class:alvar::Marker
ros_marker_points_img	include/ar_track_alvar/Marker.h	/^    std::vector<PointDouble> ros_marker_points_img;$/;"	m	class:alvar::Marker
ros_orientation	include/ar_track_alvar/Marker.h	/^    int ros_orientation;$/;"	m	class:alvar::Marker
rot	include/ar_track_alvar/TrackerPsa.h	/^	double *rot, *rotprev;$/;"	m	class:alvar::TrackerPsaRot
rot_count	include/ar_track_alvar/TrackerPsa.h	/^	int *rot_count;$/;"	m	class:alvar::TrackerPsaRot
rotd	include/ar_track_alvar/TrackerPsa.h	/^	double rotd;$/;"	m	class:alvar::TrackerPsaRot
rotd	include/ar_track_alvar/TrackerStat.h	/^	double rotd;$/;"	m	class:alvar::TrackerStatRot
rotprev	include/ar_track_alvar/TrackerPsa.h	/^	double *rot, *rotprev;$/;"	m	class:alvar::TrackerPsaRot
round	src/ConnectedComponents.cpp	/^inline int round(double x) {$/;"	f	namespace:alvar
running	include/ar_track_alvar/CvTestbed.h	/^	bool running;$/;"	m	class:CvTestbed
rvizMarkerPub2_	nodes/FindMarkerBundles.cpp	/^ros::Publisher rvizMarkerPub2_;$/;"	v
rvizMarkerPub2_	nodes/IndividualMarkers.cpp	/^ros::Publisher rvizMarkerPub2_;$/;"	v
rvizMarkerPub_	nodes/FindMarkerBundles.cpp	/^ros::Publisher rvizMarkerPub_;$/;"	v
rvizMarkerPub_	nodes/FindMarkerBundlesNoKinect.cpp	/^ros::Publisher rvizMarkerPub_;$/;"	v
rvizMarkerPub_	nodes/IndividualMarkers.cpp	/^ros::Publisher rvizMarkerPub_;$/;"	v
rvizMarkerPub_	nodes/IndividualMarkersNoKinect.cpp	/^ros::Publisher rvizMarkerPub_;$/;"	v
rvizMarkerPub_	nodes/TrainMarkerBundle.cpp	/^ros::Publisher rvizMarkerPub_;$/;"	v
rvizMarker_	nodes/IndividualMarkers.cpp	/^visualization_msgs::Marker rvizMarker_;$/;"	v
rvizMarker_	nodes/IndividualMarkersNoKinect.cpp	/^visualization_msgs::Marker rvizMarker_;$/;"	v
s	include/ar_track_alvar/Line.h	/^	PointDouble s; \/\/ direction vector$/;"	m	struct:alvar::Line
sampler	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.h	/^    } sampler;$/;"	m	class:alvar::plugins::CaptureDSCapture	typeref:class:alvar::plugins::CaptureDSCapture::VideoSampler
samples	include/ar_track_alvar/Ransac.h	/^  void** samples;$/;"	m	class:alvar::RansacImpl
saveSettings	include/ar_track_alvar/Capture.h	/^	virtual bool saveSettings(std::string filename) {$/;"	f	class:alvar::Capture
scale	include/ar_track_alvar/GlutViewer.h	/^	double scale;$/;"	m	class:Drawable
scale	include/ar_track_alvar/SfM.h	/^	double scale;$/;"	m	class:alvar::SimpleSfM
search_space	include/ar_track_alvar/Container3d.h	/^		std::vector<size_t>    search_space;$/;"	m	class:alvar::Container3d
seconds_since_update	src/Kalman.cpp	/^double Kalman::seconds_since_update(unsigned long tick) {$/;"	f	class:alvar::Kalman
sensor	include/ar_track_alvar/Kalman.h	/^	KalmanSensorCore *sensor;$/;"	m	class:alvar::KalmanVisualize
sensor_ext	include/ar_track_alvar/Kalman.h	/^	KalmanSensor *sensor_ext;$/;"	m	class:alvar::KalmanVisualize
set	include/ar_track_alvar/CaptureFactory.h	/^        void set(CaptureFactory *instance) {mInstance = instance;}$/;"	f	class:alvar::CaptureFactory::CaptureFactoryDestroyer
setAlpha	include/ar_track_alvar/Filter.h	/^	void setAlpha(double _alpha) { alpha=std::max(std::min(_alpha,1.0),0.0); }$/;"	f	class:alvar::FilterRunningAverage
setCalibration	src/FernPoseEstimator.cpp	/^bool FernPoseEstimator::setCalibration(const std::string &filename, int width, int height)$/;"	f	class:alvar::FernPoseEstimator
setGamma	include/ar_track_alvar/Filter.h	/^	void setGamma(double _gamma) { gamma=std::max(std::min(_gamma,1.0),0.0); }$/;"	f	class:alvar::FilterDoubleExponentialSmoothing
setResolution	include/ar_track_alvar/Capture.h	/^    virtual void setResolution(const unsigned long xResolution, const unsigned long yResolution)$/;"	f	class:alvar::Capture
setResolution	src/FernPoseEstimator.cpp	/^void FernPoseEstimator::setResolution(int width, int height)$/;"	f	class:alvar::FernPoseEstimator
setResolution	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^void CaptureHighgui::setResolution(const unsigned long xResolution, const unsigned long yResolution)$/;"	f	class:alvar::plugins::CaptureHighgui
setUp	test/test_ar.py	/^    def setUp(self):$/;"	m	class:TestArAlvarRos
setWindowSize	include/ar_track_alvar/Filter.h	/^	void setWindowSize(int size) { $/;"	f	class:alvar::FilterMedian
setWindowSize	include/ar_track_alvar/Filter.h	/^	void setWindowSize(int size) { window_size=size; count=0; }$/;"	f	class:alvar::FilterAverage
setupPluginPaths	src/CaptureFactory_unix.cpp	/^void CaptureFactoryPrivate::setupPluginPaths()$/;"	f	class:alvar::CaptureFactoryPrivate
setupPluginPaths	src/CaptureFactory_win.cpp	/^void CaptureFactoryPrivate::setupPluginPaths()$/;"	f	class:alvar::CaptureFactoryPrivate
sfm	src/SamplePointcloud.cpp	/^SimpleSfM *sfm;$/;"	v
show	src/Kalman.cpp	/^void KalmanVisualize::show() {$/;"	f	class:alvar::KalmanVisualize
showSettingsDialog	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^bool CaptureCmu::showSettingsDialog()$/;"	f	class:alvar::plugins::CaptureCmu
showSettingsDialog	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^bool CaptureDSCapture::showSettingsDialog()$/;"	f	class:alvar::plugins::CaptureDSCapture
showSettingsDialog	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^bool CaptureFile::showSettingsDialog()$/;"	f	class:alvar::plugins::CaptureFile
showSettingsDialog	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^bool CaptureHighgui::showSettingsDialog()$/;"	f	class:alvar::plugins::CaptureHighgui
showSettingsDialog	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^bool CapturePtgrey::showSettingsDialog()$/;"	f	class:alvar::plugins::CapturePtgrey
sigma_n	include/ar_track_alvar/UnscentedKalman.h	/^    int sigma_n;$/;"	m	class:alvar::UnscentedKalman
sigma_predObs	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat **sigma_predObs;$/;"	m	class:alvar::UnscentedKalman
sigma_state	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat **sigma_state;$/;"	m	class:alvar::UnscentedKalman
sigmasUpdated	include/ar_track_alvar/UnscentedKalman.h	/^    bool sigmasUpdated;$/;"	m	class:alvar::UnscentedKalman
size	include/ar_track_alvar/Container3d.h	/^		size_t size() const { return data.size(); }$/;"	f	class:alvar::Container3d
size	src/FernImageDetector.cpp	/^cv::Size FernImageDetector::size()$/;"	f	class:alvar::FernImageDetector
sizeof_model	include/ar_track_alvar/Ransac.h	/^  int sizeof_model;$/;"	m	class:alvar::RansacImpl
sizeof_param	include/ar_track_alvar/Ransac.h	/^  int sizeof_param;$/;"	m	class:alvar::RansacImpl
skip	src/DirectoryIterator_unix.cpp	/^void DirectoryIteratorPrivate::skip()$/;"	f	class:alvar::DirectoryIteratorPrivate
skip	src/DirectoryIterator_win.cpp	/^void DirectoryIteratorPrivate::skip()$/;"	f	class:alvar::DirectoryIteratorPrivate
sleep	src/Platform.cpp	/^void sleep(unsigned long milliseconds)$/;"	f	namespace:alvar
slope	include/ar_track_alvar/Filter.h	/^	double slope;$/;"	m	class:alvar::FilterDoubleExponentialSmoothing
sort_buffer	include/ar_track_alvar/Filter.h	/^	std::vector<double> sort_buffer;$/;"	m	class:alvar::FilterMedian
sqrtStateCovariance	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *sqrtStateCovariance;$/;"	m	class:alvar::UnscentedKalman
st	src/SampleMarkerCreator.cpp	/^} st;$/;"	v	typeref:struct:State
start	src/Timer.cpp	/^void Timer::start()$/;"	f	class:alvar::Timer
start	src/Timer_unix.cpp	/^void TimerPrivate::start()$/;"	f	class:alvar::TimerPrivate
start	src/Timer_win.cpp	/^void TimerPrivate::start()$/;"	f	class:alvar::TimerPrivate
start	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^bool CaptureCmu::start()$/;"	f	class:alvar::plugins::CaptureCmu
start	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^bool CaptureDSCapture::start()$/;"	f	class:alvar::plugins::CaptureDSCapture
start	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^bool CaptureFile::start()$/;"	f	class:alvar::plugins::CaptureFile
start	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^bool CaptureHighgui::start()$/;"	f	class:alvar::plugins::CaptureHighgui
start	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^bool CapturePtgrey::start()$/;"	f	class:alvar::plugins::CapturePtgrey
startThread	src/Threads_win.cpp	/^static DWORD WINAPI startThread(void *parameters)$/;"	f	namespace:alvar
state	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *state;$/;"	m	class:alvar::UnscentedKalman
stateCovariance	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *stateCovariance;$/;"	m	class:alvar::UnscentedKalman
stateD	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *stateD;$/;"	m	class:alvar::UnscentedKalman
stateDiff	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *stateDiff;$/;"	m	class:alvar::UnscentedKalman
statePredObsCrossCorrelation	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *statePredObsCrossCorrelation;$/;"	m	class:alvar::UnscentedKalman
stateTmp	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *stateTmp;$/;"	m	class:alvar::UnscentedKalman
stateU	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *stateU;$/;"	m	class:alvar::UnscentedKalman
stateV	include/ar_track_alvar/UnscentedKalman.h	/^    CvMat *stateV;$/;"	m	class:alvar::UnscentedKalman
state_k	include/ar_track_alvar/UnscentedKalman.h	/^    int state_k;$/;"	m	class:alvar::UnscentedKalman
state_n	include/ar_track_alvar/UnscentedKalman.h	/^    int state_n;$/;"	m	class:alvar::UnscentedKalman
status	include/ar_track_alvar/TrackerFeatures.h	/^	char *status;$/;"	m	class:alvar::TrackerFeatures
status2D	include/ar_track_alvar/TrackerOrientation.h	/^		enum {NOT_TRACKED=0, IS_TRACKED} status2D;$/;"	m	struct:alvar::TrackerOrientation::Feature	typeref:enum:alvar::TrackerOrientation::Feature::__anon2
status3D	include/ar_track_alvar/TrackerOrientation.h	/^		enum {NONE=0, USE_FOR_POSE, IS_OUTLIER, IS_INITIAL} status3D;$/;"	m	struct:alvar::TrackerOrientation::Feature	typeref:enum:alvar::TrackerOrientation::Feature::__anon3
step	include/ar_track_alvar/IntegralImage.h	/^    int step;$/;"	m	class:alvar::IntIndex
step_remainder	include/ar_track_alvar/IntegralImage.h	/^    int step_remainder;$/;"	m	class:alvar::IntIndex
steps	include/ar_track_alvar/IntegralImage.h	/^    int steps;$/;"	m	class:alvar::IntIndex
stop	src/Timer.cpp	/^double Timer::stop()$/;"	f	class:alvar::Timer
stop	src/Timer_unix.cpp	/^double TimerPrivate::stop()$/;"	f	class:alvar::TimerPrivate
stop	src/Timer_win.cpp	/^double TimerPrivate::stop()$/;"	f	class:alvar::TimerPrivate
stop	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^void CaptureCmu::stop()$/;"	f	class:alvar::plugins::CaptureCmu
stop	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^void CaptureDSCapture::stop()$/;"	f	class:alvar::plugins::CaptureDSCapture
stop	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^void CaptureFile::stop()$/;"	f	class:alvar::plugins::CaptureFile
stop	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^void CaptureHighgui::stop()$/;"	f	class:alvar::plugins::CaptureHighgui
stop	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^void CapturePtgrey::stop()$/;"	f	class:alvar::plugins::CapturePtgrey
storage	include/ar_track_alvar/ConnectedComponents.h	/^	CvMemStorage* storage;$/;"	m	class:alvar::LabelingCvSeq
str	include/ar_track_alvar/Marker.h	/^      char			str[MAX_MARKER_STRING_LEN]; $/;"	m	union:alvar::MarkerData::__anon1
stream	include/ar_track_alvar/Util.h	/^	std::ios *stream;$/;"	m	class:alvar::Serialization
sub_	include/ar_track_alvar/Camera.h	/^	ros::Subscriber sub_;$/;"	m	class:alvar::Camera
sum	include/ar_track_alvar/IntegralImage.h	/^	IplImage *sum;$/;"	m	class:alvar::IntegralImage
tearDown	test/test_ar.py	/^    def tearDown(self):$/;"	m	class:TestArAlvarRos
test_markers	test/test_ar.py	/^    def test_markers(self):$/;"	m	class:TestArAlvarRos
test_reprojection	include/ar_track_alvar/EC.h	/^	bool test_reprojection;$/;"	m	class:alvar::DoEraseTest
tf	include/ar_track_alvar/SfM.h	/^	TrackerFeaturesEC tf;$/;"	m	class:alvar::SimpleSfM
tf_broadcaster	nodes/FindMarkerBundles.cpp	/^tf::TransformBroadcaster *tf_broadcaster;$/;"	v
tf_broadcaster	nodes/FindMarkerBundlesNoKinect.cpp	/^tf::TransformBroadcaster *tf_broadcaster;$/;"	v
tf_broadcaster	nodes/IndividualMarkers.cpp	/^tf::TransformBroadcaster *tf_broadcaster;$/;"	v
tf_broadcaster	nodes/IndividualMarkersNoKinect.cpp	/^tf::TransformBroadcaster *tf_broadcaster;$/;"	v
tf_broadcaster	nodes/TrainMarkerBundle.cpp	/^tf::TransformBroadcaster *tf_broadcaster;$/;"	v
tf_listener	nodes/FindMarkerBundles.cpp	/^tf::TransformListener *tf_listener;$/;"	v
tf_listener	nodes/FindMarkerBundlesNoKinect.cpp	/^tf::TransformListener *tf_listener;$/;"	v
tf_listener	nodes/IndividualMarkers.cpp	/^tf::TransformListener *tf_listener;$/;"	v
tf_listener	nodes/IndividualMarkersNoKinect.cpp	/^tf::TransformListener *tf_listener;$/;"	v
tf_listener	nodes/TrainMarkerBundle.cpp	/^tf::TransformListener *tf_listener;$/;"	v
threads	src/GlutViewer.cpp	/^Threads threads;$/;"	v
thresh_param1	include/ar_track_alvar/ConnectedComponents.h	/^	int thresh_param1, thresh_param2;$/;"	m	class:alvar::Labeling
thresh_param1	src/SampleLabeling.cpp	/^int thresh_param1 = 31;$/;"	v
thresh_param2	include/ar_track_alvar/ConnectedComponents.h	/^	int thresh_param1, thresh_param2;$/;"	m	class:alvar::Labeling
title	include/ar_track_alvar/CvTestbed.h	/^		std::string title;$/;"	m	struct:CvTestbed::Image
tmp	include/ar_track_alvar/Filter.h	/^	double *tmp;$/;"	m	class:alvar::FilterArray
tmp	include/ar_track_alvar/Optimization.h	/^	CvMat *tmp;$/;"	m	class:alvar::Optimization
tmp_par	include/ar_track_alvar/Optimization.h	/^	CvMat *tmp_par;$/;"	m	class:alvar::Optimization
track_error	include/ar_track_alvar/Marker.h	/^    double track_error;$/;"	m	class:alvar::Marker
track_features	src/SampleTrack.cpp	/^void track_features(IplImage *image, IplImage *img_gray) {$/;"	f
track_markers	include/ar_track_alvar/MarkerDetector.h	/^	std::vector<M, Eigen::aligned_allocator<M> > *track_markers;$/;"	m	class:alvar::MarkerDetector
track_none	src/SampleTrack.cpp	/^void track_none(IplImage *image, IplImage *img_gray) {$/;"	f
track_psa	src/SampleTrack.cpp	/^void track_psa(IplImage *image, IplImage *img_gray) {$/;"	f
track_psa_rot	src/SampleTrack.cpp	/^void track_psa_rot(IplImage *image, IplImage *img_gray) {$/;"	f
track_stat	src/SampleTrack.cpp	/^void track_stat(IplImage *image, IplImage *img_gray) {$/;"	f
track_stat_rot	src/SampleTrack.cpp	/^void track_stat_rot(IplImage *image, IplImage *img_gray) {$/;"	f
tracker	src/SampleTrack.cpp	/^int tracker = 0;$/;"	v
tracker_names	src/SampleTrack.cpp	/^char tracker_names[nof_trackers][64]={$/;"	v
trackers	src/SampleTrack.cpp	/^void (*(trackers[nof_trackers]))(IplImage *image, IplImage *img_gray) = {$/;"	v
train	src/FernImageDetector.cpp	/^void FernImageDetector::train(Mat &object)$/;"	f	class:alvar::FernImageDetector
train	src/FernImageDetector.cpp	/^void FernImageDetector::train(const std::string &filename)$/;"	f	class:alvar::FernImageDetector
translation	include/ar_track_alvar/Pose.h	/^	double translation[4];$/;"	m	class:alvar::Pose
translation_mat	include/ar_track_alvar/Pose.h	/^	CvMat  translation_mat;$/;"	m	class:alvar::Pose
tri_cntr	include/ar_track_alvar/SfM.h	/^		int tri_cntr;        \/\/ This is needed only by UpdateTriangulateOnly$/;"	m	class:alvar::SimpleSfM::Feature
type_id	include/ar_track_alvar/EC.h	/^	int type_id;$/;"	m	class:alvar::DoEraseTest
type_id	include/ar_track_alvar/EC.h	/^	int type_id;$/;"	m	class:alvar::DoHandleTest
type_id	include/ar_track_alvar/EC.h	/^	int type_id;$/;"	m	class:alvar::ExternalContainer
uchar	src/Bitset.cpp	/^unsigned char Bitset::uchar()$/;"	f	class:alvar::Bitset
ulong	src/Bitset.cpp	/^unsigned long Bitset::ulong()$/;"	f	class:alvar::Bitset
uniqueName	src/CaptureDevice.cpp	/^std::string CaptureDevice::uniqueName() const$/;"	f	class:alvar::CaptureDevice
units	src/SampleMarkerCreator.cpp	/^    double units;           \/\/ how many pixels per one unit$/;"	m	struct:State	file:
unload	src/Plugin_unix.cpp	/^void PluginPrivate::unload()$/;"	f	class:alvar::PluginPrivate
unload	src/Plugin_win.cpp	/^void PluginPrivate::unload()$/;"	f	class:alvar::PluginPrivate
unlock	src/Mutex.cpp	/^void Mutex::unlock()$/;"	f	class:alvar::Mutex
unlock	src/Mutex_unix.cpp	/^void MutexPrivate::unlock()$/;"	f	class:alvar::MutexPrivate
unlock	src/Mutex_win.cpp	/^void MutexPrivate::unlock()$/;"	f	class:alvar::MutexPrivate
update	src/UnscentedKalman.cpp	/^void UnscentedKalman::update(UnscentedObservation *obs) {$/;"	f	class:alvar::UnscentedKalman
updateFromTrackedPoints	src/FernPoseEstimator.cpp	/^void FernPoseEstimator::updateFromTrackedPoints(FernPoseEstimator::ExternalContainerMap &container)$/;"	f	class:alvar::FernPoseEstimator
updateMarkerPoses	src/MultiMarkerInitializer.cpp	/^bool MultiMarkerInitializer::updateMarkerPoses(vector<MarkerMeasurement, Eigen::aligned_allocator<MarkerMeasurement> > &markers, const Pose &pose) {$/;"	f	class:alvar::MultiMarkerInitializer
update_F	src/Kalman.cpp	/^void Kalman::update_F(unsigned long tick) {$/;"	f	class:alvar::Kalman
update_F	src/Kalman.cpp	/^void KalmanEkf::update_F(unsigned long tick) {$/;"	f	class:alvar::KalmanEkf
update_H	include/ar_track_alvar/Kalman.h	/^	virtual void update_H(CvMat *x_pred) {}$/;"	f	class:alvar::KalmanSensor
update_H	src/Kalman.cpp	/^void KalmanSensorEkf::update_H(CvMat *x_pred) {$/;"	f	class:alvar::KalmanSensorEkf
update_K	src/Kalman.cpp	/^void KalmanSensor::update_K(CvMat *P_pred) {$/;"	f	class:alvar::KalmanSensor
update_P	src/Kalman.cpp	/^void KalmanSensor::update_P(CvMat *P_pred, CvMat *P) {$/;"	f	class:alvar::KalmanSensor
update_next_step	src/IntegralImage.cpp	/^void IntIndex::update_next_step() {$/;"	f	class:alvar::IntIndex
update_post	src/Kalman.cpp	/^void KalmanVisualize::update_post() {$/;"	f	class:alvar::KalmanVisualize
update_pre	src/Kalman.cpp	/^void KalmanVisualize::update_pre() {$/;"	f	class:alvar::KalmanVisualize
update_tri	include/ar_track_alvar/SfM.h	/^	bool update_tri;$/;"	m	class:alvar::SimpleSfM
update_x	src/Kalman.cpp	/^void KalmanSensorCore::update_x(CvMat *x_pred, CvMat *x) {$/;"	f	class:alvar::KalmanSensorCore
update_x	src/Kalman.cpp	/^void KalmanSensorEkf::update_x(CvMat *x_pred, CvMat *x) {$/;"	f	class:alvar::KalmanSensorEkf
val	include/ar_track_alvar/Util.h	/^	D val;$/;"	m	struct:alvar::Point
val	include/ar_track_alvar/Util.h	/^	std::vector<int> val;$/;"	m	struct:alvar::Index
valid	include/ar_track_alvar/Marker.h	/^    bool valid;$/;"	m	class:alvar::Marker
value	include/ar_track_alvar/Filter.h	/^	double value;$/;"	m	class:alvar::Filter
ver	include/ar_track_alvar/TrackerPsa.h	/^	long *ver, *verprev;$/;"	m	class:alvar::TrackerPsa
verbose	include/ar_track_alvar/Bitset.h	/^	bool verbose;$/;"	m	class:alvar::BitsetExt
verprev	include/ar_track_alvar/TrackerPsa.h	/^	long *ver, *verprev;$/;"	m	class:alvar::TrackerPsa
videocallback	include/ar_track_alvar/CvTestbed.h	/^	void (*videocallback)(IplImage *image);$/;"	m	class:CvTestbed
videocallback	src/SampleCamCalib.cpp	/^void videocallback(IplImage *image)$/;"	f
videocallback	src/SampleCvTestbed.cpp	/^void videocallback(IplImage *image)$/;"	f
videocallback	src/SampleIntegralImage.cpp	/^void videocallback(IplImage *image)$/;"	f
videocallback	src/SampleLabeling.cpp	/^void videocallback(IplImage *image)$/;"	f
videocallback	src/SampleMarkerDetector.cpp	/^void videocallback(IplImage *image)$/;"	f
videocallback	src/SampleMarkerHide.cpp	/^void videocallback(IplImage *image)$/;"	f
videocallback	src/SampleMarkerlessDetector.cpp	/^void videocallback(IplImage *image)$/;"	f
videocallback	src/SampleMultiMarker.cpp	/^void videocallback(IplImage *image)$/;"	f
videocallback	src/SampleMultiMarkerBundle.cpp	/^void videocallback(IplImage *image)$/;"	f
videocallback	src/SamplePointcloud.cpp	/^void videocallback(IplImage *image)$/;"	f
videocallback	src/SampleTrack.cpp	/^void videocallback(IplImage *image)$/;"	f
visible	include/ar_track_alvar/CvTestbed.h	/^		bool visible;$/;"	m	struct:CvTestbed::Image
visualize	src/SampleMultiMarker.cpp	/^int visualize=0;$/;"	v
visualize	src/SampleMultiMarkerBundle.cpp	/^int visualize=1;$/;"	v
vr_window	src/GlutViewer.cpp	/^int vr_window;$/;"	v
width	include/ar_track_alvar/Camera.h	/^	int width;$/;"	m	struct:alvar::ProjPoints
width	src/GlutViewer.cpp	/^int width;$/;"	v
win_size	include/ar_track_alvar/TrackerFeatures.h	/^	int win_size;$/;"	m	class:alvar::TrackerFeatures
window_size	include/ar_track_alvar/Filter.h	/^	unsigned int window_size;$/;"	m	class:alvar::FilterAverage
wintitle	include/ar_track_alvar/CvTestbed.h	/^	std::string wintitle;$/;"	m	class:CvTestbed
write	src/FernImageDetector.cpp	/^bool FernImageDetector::write(const std::string &filename, const bool binary)$/;"	f	class:alvar::FernImageDetector
writeBinary	src/FernImageDetector.cpp	/^void FernClassifierWrapper::writeBinary(std::fstream &stream) const$/;"	f	class:alvar::FernClassifierWrapper
x	include/ar_track_alvar/Kalman.h	/^	CvMat *x;$/;"	m	class:alvar::KalmanCore
xResolution	include/ar_track_alvar/Capture.h	/^    unsigned long xResolution() {return mXResolution;}$/;"	f	class:alvar::Capture
x_gain	include/ar_track_alvar/Kalman.h	/^	CvMat *x_gain;$/;"	m	class:alvar::KalmanSensorCore
x_minus	include/ar_track_alvar/Kalman.h	/^	CvMat *x_minus;$/;"	m	class:alvar::KalmanEkf
x_minus	include/ar_track_alvar/Kalman.h	/^	CvMat *x_minus;$/;"	m	class:alvar::KalmanSensorEkf
x_minus	include/ar_track_alvar/Optimization.h	/^	CvMat *x_minus;$/;"	m	class:alvar::Optimization
x_plus	include/ar_track_alvar/Kalman.h	/^	CvMat *x_plus;$/;"	m	class:alvar::KalmanEkf
x_plus	include/ar_track_alvar/Kalman.h	/^	CvMat *x_plus;$/;"	m	class:alvar::KalmanSensorEkf
x_plus	include/ar_track_alvar/Optimization.h	/^	CvMat *x_plus;$/;"	m	class:alvar::Optimization
x_pred	include/ar_track_alvar/Kalman.h	/^	CvMat *x_pred;$/;"	m	class:alvar::KalmanCore
x_res	include/ar_track_alvar/Camera.h	/^	int x_res;$/;"	m	class:alvar::Camera
x_res	include/ar_track_alvar/TrackerFeatures.h	/^	int x_res, y_res;$/;"	m	class:alvar::TrackerFeatures
x_res	include/ar_track_alvar/TrackerPsa.h	/^	int x_res, y_res;$/;"	m	class:alvar::TrackerPsa
x_res	include/ar_track_alvar/TrackerStat.h	/^	int x_res, y_res;$/;"	m	class:alvar::TrackerStatRot
x_tmp1	include/ar_track_alvar/Kalman.h	/^	CvMat *x_tmp1;$/;"	m	class:alvar::KalmanEkf
x_tmp1	include/ar_track_alvar/Optimization.h	/^	CvMat *x_tmp1;$/;"	m	class:alvar::Optimization
x_tmp2	include/ar_track_alvar/Kalman.h	/^	CvMat *x_tmp2;$/;"	m	class:alvar::KalmanEkf
x_tmp2	include/ar_track_alvar/Optimization.h	/^	CvMat *x_tmp2;$/;"	m	class:alvar::Optimization
xd	include/ar_track_alvar/TrackerPsa.h	/^	double xd;$/;"	m	class:alvar::TrackerPsa
xd	include/ar_track_alvar/TrackerStat.h	/^	double xd;$/;"	m	class:alvar::TrackerStat
xml_current	src/Util.cpp	/^	TiXmlElement *xml_current;$/;"	m	struct:alvar::SerializationFormatterXml	file:
yResolution	include/ar_track_alvar/Capture.h	/^    unsigned long yResolution() {return mYResolution;}$/;"	f	class:alvar::Capture
y_res	include/ar_track_alvar/Camera.h	/^	int y_res;$/;"	m	class:alvar::Camera
y_res	include/ar_track_alvar/TrackerFeatures.h	/^	int x_res, y_res;$/;"	m	class:alvar::TrackerFeatures
y_res	include/ar_track_alvar/TrackerPsa.h	/^	int x_res, y_res;$/;"	m	class:alvar::TrackerPsa
y_res	include/ar_track_alvar/TrackerStat.h	/^	int x_res, y_res;$/;"	m	class:alvar::TrackerStatRot
yd	include/ar_track_alvar/TrackerPsa.h	/^	double yd;$/;"	m	class:alvar::TrackerPsa
yd	include/ar_track_alvar/TrackerStat.h	/^	double yd;$/;"	m	class:alvar::TrackerStat
z	include/ar_track_alvar/Kalman.h	/^	CvMat *z; $/;"	m	class:alvar::KalmanSensorCore
z_pred	include/ar_track_alvar/Kalman.h	/^	CvMat *z_pred;$/;"	m	class:alvar::KalmanSensorCore
z_residual	include/ar_track_alvar/Kalman.h	/^	CvMat *z_residual;$/;"	m	class:alvar::KalmanSensorCore
z_tmp1	include/ar_track_alvar/Kalman.h	/^	CvMat *z_tmp1;$/;"	m	class:alvar::KalmanSensorEkf
z_tmp2	include/ar_track_alvar/Kalman.h	/^	CvMat *z_tmp2;$/;"	m	class:alvar::KalmanSensorEkf
~Capture	include/ar_track_alvar/Capture.h	/^    virtual ~Capture() {}$/;"	f	class:alvar::Capture
~CaptureCmu	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^CaptureCmu::~CaptureCmu()$/;"	f	class:alvar::plugins::CaptureCmu
~CaptureDSCapture	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^CaptureDSCapture::~CaptureDSCapture()$/;"	f	class:alvar::plugins::CaptureDSCapture
~CaptureDevice	src/CaptureDevice.cpp	/^CaptureDevice::~CaptureDevice()$/;"	f	class:alvar::CaptureDevice
~CaptureFactory	src/CaptureFactory.cpp	/^CaptureFactory::~CaptureFactory()$/;"	f	class:alvar::CaptureFactory
~CaptureFactoryDestroyer	include/ar_track_alvar/CaptureFactory.h	/^        ~CaptureFactoryDestroyer() {delete mInstance;}$/;"	f	class:alvar::CaptureFactory::CaptureFactoryDestroyer
~CaptureFactoryPrivate	src/CaptureFactory.cpp	/^CaptureFactoryPrivate::~CaptureFactoryPrivate()$/;"	f	class:alvar::CaptureFactoryPrivate
~CaptureFile	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^CaptureFile::~CaptureFile()$/;"	f	class:alvar::plugins::CaptureFile
~CaptureHighgui	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^CaptureHighgui::~CaptureHighgui()$/;"	f	class:alvar::plugins::CaptureHighgui
~CapturePlugin	include/ar_track_alvar/CapturePlugin.h	/^    virtual ~CapturePlugin() {};$/;"	f	class:alvar::CapturePlugin
~CapturePluginCmu	src/platform/capture_plugin_cmu/CapturePluginCmu.cpp	/^CapturePluginCmu::~CapturePluginCmu()$/;"	f	class:alvar::plugins::CapturePluginCmu
~CapturePluginDSCapture	src/platform/capture_plugin_dscapture/CapturePluginDSCapture.cpp	/^CapturePluginDSCapture::~CapturePluginDSCapture()$/;"	f	class:alvar::plugins::CapturePluginDSCapture
~CapturePluginFile	src/platform/capture_plugin_file/CapturePluginFile.cpp	/^CapturePluginFile::~CapturePluginFile()$/;"	f	class:alvar::plugins::CapturePluginFile
~CapturePluginHighgui	src/platform/capture_plugin_highgui/CapturePluginHighgui.cpp	/^CapturePluginHighgui::~CapturePluginHighgui()$/;"	f	class:alvar::plugins::CapturePluginHighgui
~CapturePluginPtgrey	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^CapturePluginPtgrey::~CapturePluginPtgrey()$/;"	f	class:alvar::plugins::CapturePluginPtgrey
~CapturePtgrey	src/platform/capture_plugin_ptgrey/CapturePluginPtgrey.cpp	/^CapturePtgrey::~CapturePtgrey()$/;"	f	class:alvar::plugins::CapturePtgrey
~CvTestbed	src/CvTestbed.cpp	/^CvTestbed::~CvTestbed() {$/;"	f	class:CvTestbed
~DirectoryIterator	src/DirectoryIterator.cpp	/^DirectoryIterator::~DirectoryIterator()$/;"	f	class:alvar::DirectoryIterator
~DirectoryIteratorPrivate	src/DirectoryIterator_unix.cpp	/^DirectoryIteratorPrivate::~DirectoryIteratorPrivate()$/;"	f	class:alvar::DirectoryIteratorPrivate
~DirectoryIteratorPrivate	src/DirectoryIterator_win.cpp	/^DirectoryIteratorPrivate::~DirectoryIteratorPrivate()$/;"	f	class:alvar::DirectoryIteratorPrivate
~Feature	include/ar_track_alvar/TrackerOrientation.h	/^		~Feature() {}$/;"	f	struct:alvar::TrackerOrientation::Feature
~FernClassifierWrapper	src/FernImageDetector.cpp	/^FernClassifierWrapper::~FernClassifierWrapper()$/;"	f	class:alvar::FernClassifierWrapper
~FernImageDetector	src/FernImageDetector.cpp	/^FernImageDetector::~FernImageDetector()$/;"	f	class:alvar::FernImageDetector
~FernPoseEstimator	src/FernPoseEstimator.cpp	/^FernPoseEstimator::~FernPoseEstimator()$/;"	f	class:alvar::FernPoseEstimator
~FilterArray	include/ar_track_alvar/Filter.h	/^	~FilterArray() {$/;"	f	class:alvar::FilterArray
~IndexRansac	include/ar_track_alvar/Ransac.h	/^    virtual ~IndexRansac() {}$/;"	f	class:alvar::IndexRansac
~IntegralGradient	src/IntegralImage.cpp	/^IntegralGradient::~IntegralGradient() {$/;"	f	class:alvar::IntegralGradient
~IntegralImage	src/IntegralImage.cpp	/^IntegralImage::~IntegralImage() {$/;"	f	class:alvar::IntegralImage
~Kalman	src/Kalman.cpp	/^Kalman::~Kalman() {$/;"	f	class:alvar::Kalman
~KalmanCore	src/Kalman.cpp	/^KalmanCore::~KalmanCore() {$/;"	f	class:alvar::KalmanCore
~KalmanEkf	src/Kalman.cpp	/^KalmanEkf::~KalmanEkf() {$/;"	f	class:alvar::KalmanEkf
~KalmanSensor	src/Kalman.cpp	/^KalmanSensor::~KalmanSensor() {$/;"	f	class:alvar::KalmanSensor
~KalmanSensorCore	src/Kalman.cpp	/^KalmanSensorCore::~KalmanSensorCore() {$/;"	f	class:alvar::KalmanSensorCore
~KalmanSensorEkf	src/Kalman.cpp	/^KalmanSensorEkf::~KalmanSensorEkf() {$/;"	f	class:alvar::KalmanSensorEkf
~KalmanVisualize	src/Kalman.cpp	/^KalmanVisualize::~KalmanVisualize() {$/;"	f	class:alvar::KalmanVisualize
~Labeling	src/ConnectedComponents.cpp	/^Labeling::~Labeling()$/;"	f	class:alvar::Labeling
~LabelingCvSeq	src/ConnectedComponents.cpp	/^LabelingCvSeq::~LabelingCvSeq()$/;"	f	class:alvar::LabelingCvSeq
~Lock	include/ar_track_alvar/Lock.h	/^    ~Lock()$/;"	f	class:alvar::Lock
~Marker	src/Marker.cpp	/^Marker::~Marker() {$/;"	f	class:alvar::Marker
~MarkerDetector	include/ar_track_alvar/MarkerDetector.h	/^	~MarkerDetector() {$/;"	f	class:alvar::MarkerDetector
~MarkerDetectorImpl	src/MarkerDetector.cpp	/^	MarkerDetectorImpl::~MarkerDetectorImpl() {$/;"	f	class:alvar::MarkerDetectorImpl
~MarkerIteratorImpl	include/ar_track_alvar/Marker.h	/^    ~MarkerIteratorImpl() {}$/;"	f	class:alvar::MarkerIteratorImpl
~MultiMarkerBundle	src/MultiMarkerBundle.cpp	/^MultiMarkerBundle::~MultiMarkerBundle()$/;"	f	class:alvar::MultiMarkerBundle
~MultiMarkerFiltered	src/MultiMarkerFiltered.cpp	/^MultiMarkerFiltered::~MultiMarkerFiltered()$/;"	f	class:alvar::MultiMarkerFiltered
~Mutex	src/Mutex.cpp	/^Mutex::~Mutex()$/;"	f	class:alvar::Mutex
~MutexPrivate	src/Mutex_unix.cpp	/^MutexPrivate::~MutexPrivate()$/;"	f	class:alvar::MutexPrivate
~MutexPrivate	src/Mutex_win.cpp	/^MutexPrivate::~MutexPrivate()$/;"	f	class:alvar::MutexPrivate
~Optimization	src/Optimization.cpp	/^Optimization::~Optimization()$/;"	f	class:alvar::Optimization
~Plugin	src/Plugin.cpp	/^Plugin::~Plugin()$/;"	f	class:alvar::Plugin
~PluginPrivate	src/Plugin_unix.cpp	/^PluginPrivate::~PluginPrivate()$/;"	f	class:alvar::PluginPrivate
~PluginPrivate	src/Plugin_win.cpp	/^PluginPrivate::~PluginPrivate()$/;"	f	class:alvar::PluginPrivate
~Ransac	include/ar_track_alvar/Ransac.h	/^    virtual ~Ransac() {}$/;"	f	class:alvar::Ransac
~RansacImpl	src/Ransac.cpp	/^RansacImpl::~RansacImpl() {$/;"	f	class:alvar::RansacImpl
~Serialization	src/Util.cpp	/^Serialization::~Serialization() {$/;"	f	class:alvar::Serialization
~State	src/SampleMarkerCreator.cpp	/^    ~State() {$/;"	f	struct:State
~Threads	src/Threads.cpp	/^Threads::~Threads()$/;"	f	class:alvar::Threads
~ThreadsPrivate	src/Threads_unix.cpp	/^ThreadsPrivate::~ThreadsPrivate()$/;"	f	class:alvar::ThreadsPrivate
~ThreadsPrivate	src/Threads_win.cpp	/^ThreadsPrivate::~ThreadsPrivate()$/;"	f	class:alvar::ThreadsPrivate
~Timer	src/Timer.cpp	/^Timer::~Timer()$/;"	f	class:alvar::Timer
~TimerPrivate	src/Timer_unix.cpp	/^TimerPrivate::~TimerPrivate()$/;"	f	class:alvar::TimerPrivate
~TimerPrivate	src/Timer_win.cpp	/^TimerPrivate::~TimerPrivate()$/;"	f	class:alvar::TimerPrivate
~TrackerFeatures	src/TrackerFeatures.cpp	/^TrackerFeatures::~TrackerFeatures() {$/;"	f	class:alvar::TrackerFeatures
~TrackerPsa	src/TrackerPsa.cpp	/^TrackerPsa::~TrackerPsa() {$/;"	f	class:alvar::TrackerPsa
~TrackerPsaRot	src/TrackerPsa.cpp	/^TrackerPsaRot::~TrackerPsaRot() {$/;"	f	class:alvar::TrackerPsaRot
~TrifocalTensor	src/TrifocalTensor.cpp	/^TrifocalTensor::~TrifocalTensor() {$/;"	f	class:alvar::TrifocalTensor
~Uncopyable	include/ar_track_alvar/Uncopyable.h	/^    ~Uncopyable()$/;"	f	class:alvar::Uncopyable
~UnscentedKalman	src/UnscentedKalman.cpp	/^UnscentedKalman::~UnscentedKalman() {$/;"	f	class:alvar::UnscentedKalman
